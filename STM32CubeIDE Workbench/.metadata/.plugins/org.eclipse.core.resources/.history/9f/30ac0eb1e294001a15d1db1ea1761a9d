/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
 
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/

/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	// Clear both the half and full transfer flags, at it can be both that activated this buffer
	LL_DMA_ClearFlag_TC3(DMA1);
	LL_DMA_ClearFlag_HT3(DMA1);
	// If the number if pixels sent is greater or equal to the frame's number of pixels, that
	// means it's time to wait for the sync timer and update the OLED.
	if(vid_number_of_send >= VID_FRAME_SIZE){
		OLED_CS_1; // End communication to the OLED display
		while(LL_TIM_IsActiveFlag_UPDATE(TIM3) == 0x00); // Wait until the sync timer is done
		// Reset the timer and restart it
		LL_TIM_DisableCounter(TIM3);
		LL_TIM_ClearFlag_UPDATE(TIM3);
		LL_TIM_SetCounter(TIM3, 0);
		LL_TIM_EnableCounter(TIM3);

		vid_number_of_send = 0; // Reset the number of pixels sent to 0
		// Restart a new OLED write command
		OLED_Driver_CUSTOM_RAM_Address(OLED_Y_MIN, OLED_Y_MAX, 0, 127);
		OLED_Driver_Write_Command(0x5C);
		OLED_DC_1;
	}
	// Disable the DMA, update it with the new array's address and size, then enable it
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE]);
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, VID_HALF_BUFFER_SIZE);
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
	// Increment the buffer count variable. If it's equal to the total allocations (2), then set it to 0
	video_bufferCount++;
	if(video_bufferCount == VID_NUMB_BUFFER){
		video_bufferCount = 0;
	}
	// Add to the number of pixels sent what is to be sent out by the DMA (each pixel contains 2 byte)
	vid_number_of_send += VID_HALF_BUFFER_SIZE/2;

	unsigned int f_size = 0;    // Placeholder for size of array written by FatFs
	// Disable channel 7's interupt to prevent both this and that interupt trying to read from FatFs at the
	// same time, read the data, then re-enable the interupt
	NVIC_DisableIRQ(DMA1_Channel7_IRQn);
	FRESULT res = f_read(&vid_fil,&vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE],VID_HALF_BUFFER_SIZE,&f_size); // Read part of file
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
	// If the file didn't read currently, just exit while turning off all interupts
	if(res != FR_OK){
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
		LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_3);
		return;
	}
	// If the FatFs written size is not what we expect or 0, that means it's the end of file
	if(f_size == 0 || f_size != VID_HALF_BUFFER_SIZE){
		end_of_video_file = 1;
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
		LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_3);
		return;
	}

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	// Clear both the half and full transfer flags, at it can be both that activated this buffer
  LL_DMA_ClearFlag_TC7(DMA1);
  LL_DMA_ClearFlag_HT7(DMA1);
  // Increment the buffer count variable. If it's equal to the total allocations (2), then set it to 0
  music_bufferCount++;
	if(music_bufferCount == MUSIC_NUMB_BUFFER){
		music_bufferCount = 0;
	}

  unsigned int f_size = 0;    // Placeholder for size of array written by FatFs
  // Read and fill part of the audio buffer
  FRESULT res = f_read(&audio_fil,&musicBuffer[music_bufferCount*MUSIC_HALF_BUFFER_SIZE],MUSIC_HALF_BUFFER_SIZE,&f_size);
  // If the file didn't read currently, just exit while turning off all interupts
  if(res != FR_OK){
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_7);
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_7);
    return;
  }
  // If the FatFs written size is not what we expect or 0, that means it's the end of file
  if(f_size == 0 || f_size != MUSIC_HALF_BUFFER_SIZE){
    end_of_music_file = 1;
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_7);
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_7);
    return;
  }
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
