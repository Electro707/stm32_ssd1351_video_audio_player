
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080044d8  080044d8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d8  080044d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080044e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f4  20000004  080044e4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022f8  080044e4  000222f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fd7  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001601  00000000  00000000  00028004  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013db5  00000000  00000000  0002a700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000057d9  00000000  00000000  0003e4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000680c0  00000000  00000000  00043c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000abd4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000252c  00000000  00000000  000abdcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080043e4 	.word	0x080043e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080043e4 	.word	0x080043e4

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LL_DMA_EnableChannel+0x38>)
 80002b0:	5cd3      	ldrb	r3, [r2, r3]
 80002b2:	461a      	mov	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	3a01      	subs	r2, #1
 80002be:	4906      	ldr	r1, [pc, #24]	; (80002d8 <LL_DMA_EnableChannel+0x38>)
 80002c0:	5c8a      	ldrb	r2, [r1, r2]
 80002c2:	4611      	mov	r1, r2
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	440a      	add	r2, r1
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	08004430 	.word	0x08004430

080002dc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <LL_DMA_DisableChannel+0x38>)
 80002ec:	5cd3      	ldrb	r3, [r2, r3]
 80002ee:	461a      	mov	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	683a      	ldr	r2, [r7, #0]
 80002f8:	3a01      	subs	r2, #1
 80002fa:	4906      	ldr	r1, [pc, #24]	; (8000314 <LL_DMA_DisableChannel+0x38>)
 80002fc:	5c8a      	ldrb	r2, [r1, r2]
 80002fe:	4611      	mov	r1, r2
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	440a      	add	r2, r1
 8000304:	f023 0301 	bic.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	08004430 	.word	0x08004430

08000318 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	3b01      	subs	r3, #1
 8000328:	4a0c      	ldr	r2, [pc, #48]	; (800035c <LL_DMA_SetDataTransferDirection+0x44>)
 800032a:	5cd3      	ldrb	r3, [r2, r3]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000338:	f023 0310 	bic.w	r3, r3, #16
 800033c:	68ba      	ldr	r2, [r7, #8]
 800033e:	3a01      	subs	r2, #1
 8000340:	4906      	ldr	r1, [pc, #24]	; (800035c <LL_DMA_SetDataTransferDirection+0x44>)
 8000342:	5c8a      	ldrb	r2, [r1, r2]
 8000344:	4611      	mov	r1, r2
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	440a      	add	r2, r1
 800034a:	4611      	mov	r1, r2
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	4313      	orrs	r3, r2
 8000350:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	08004430 	.word	0x08004430

08000360 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	3b01      	subs	r3, #1
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LL_DMA_SetMode+0x40>)
 8000372:	5cd3      	ldrb	r3, [r2, r3]
 8000374:	461a      	mov	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4413      	add	r3, r2
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f023 0220 	bic.w	r2, r3, #32
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	3b01      	subs	r3, #1
 8000384:	4906      	ldr	r1, [pc, #24]	; (80003a0 <LL_DMA_SetMode+0x40>)
 8000386:	5ccb      	ldrb	r3, [r1, r3]
 8000388:	4619      	mov	r1, r3
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	440b      	add	r3, r1
 800038e:	4619      	mov	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4313      	orrs	r3, r2
 8000394:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	08004430 	.word	0x08004430

080003a4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <LL_DMA_SetPeriphIncMode+0x40>)
 80003b6:	5cd3      	ldrb	r3, [r2, r3]
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	4413      	add	r3, r2
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4906      	ldr	r1, [pc, #24]	; (80003e4 <LL_DMA_SetPeriphIncMode+0x40>)
 80003ca:	5ccb      	ldrb	r3, [r1, r3]
 80003cc:	4619      	mov	r1, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	440b      	add	r3, r1
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	08004430 	.word	0x08004430

080003e8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <LL_DMA_SetMemoryIncMode+0x40>)
 80003fa:	5cd3      	ldrb	r3, [r2, r3]
 80003fc:	461a      	mov	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3b01      	subs	r3, #1
 800040c:	4906      	ldr	r1, [pc, #24]	; (8000428 <LL_DMA_SetMemoryIncMode+0x40>)
 800040e:	5ccb      	ldrb	r3, [r1, r3]
 8000410:	4619      	mov	r1, r3
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	440b      	add	r3, r1
 8000416:	4619      	mov	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4313      	orrs	r3, r2
 800041c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	08004430 	.word	0x08004430

0800042c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3b01      	subs	r3, #1
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LL_DMA_SetPeriphSize+0x40>)
 800043e:	5cd3      	ldrb	r3, [r2, r3]
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	4413      	add	r3, r2
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	3b01      	subs	r3, #1
 8000450:	4906      	ldr	r1, [pc, #24]	; (800046c <LL_DMA_SetPeriphSize+0x40>)
 8000452:	5ccb      	ldrb	r3, [r1, r3]
 8000454:	4619      	mov	r1, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	440b      	add	r3, r1
 800045a:	4619      	mov	r1, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4313      	orrs	r3, r2
 8000460:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	08004430 	.word	0x08004430

08000470 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <LL_DMA_SetMemorySize+0x40>)
 8000482:	5cd3      	ldrb	r3, [r2, r3]
 8000484:	461a      	mov	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	4413      	add	r3, r2
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	3b01      	subs	r3, #1
 8000494:	4906      	ldr	r1, [pc, #24]	; (80004b0 <LL_DMA_SetMemorySize+0x40>)
 8000496:	5ccb      	ldrb	r3, [r1, r3]
 8000498:	4619      	mov	r1, r3
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	440b      	add	r3, r1
 800049e:	4619      	mov	r1, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	08004430 	.word	0x08004430

080004b4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80004c6:	5cd3      	ldrb	r3, [r2, r3]
 80004c8:	461a      	mov	r2, r3
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	4413      	add	r3, r2
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4906      	ldr	r1, [pc, #24]	; (80004f4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80004da:	5ccb      	ldrb	r3, [r1, r3]
 80004dc:	4619      	mov	r1, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	440b      	add	r3, r1
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	600b      	str	r3, [r1, #0]
             Priority);
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	08004430 	.word	0x08004430

080004f8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3b01      	subs	r3, #1
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <LL_DMA_SetDataLength+0x40>)
 800050a:	5cd3      	ldrb	r3, [r2, r3]
 800050c:	461a      	mov	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4413      	add	r3, r2
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	041b      	lsls	r3, r3, #16
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	3a01      	subs	r2, #1
 800051c:	4906      	ldr	r1, [pc, #24]	; (8000538 <LL_DMA_SetDataLength+0x40>)
 800051e:	5c8a      	ldrb	r2, [r1, r2]
 8000520:	4611      	mov	r1, r2
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	440a      	add	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4313      	orrs	r3, r2
 800052c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	08004430 	.word	0x08004430

0800053c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	3b01      	subs	r3, #1
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <LL_DMA_SetMemoryAddress+0x2c>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60d3      	str	r3, [r2, #12]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	08004430 	.word	0x08004430

0800056c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <LL_DMA_SetPeriphAddress+0x2c>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	461a      	mov	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6093      	str	r3, [r2, #8]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	08004430 	.word	0x08004430

0800059c <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005b0:	bf0c      	ite	eq
 80005b2:	2301      	moveq	r3, #1
 80005b4:	2300      	movne	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <LL_DMA_IsActiveFlag_HT3>:
  * @rmtoll ISR          HTIF3         LL_DMA_IsActiveFlag_HT3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005fc:	bf0c      	ite	eq
 80005fe:	2301      	moveq	r3, #1
 8000600:	2300      	movne	r3, #0
 8000602:	b2db      	uxtb	r3, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <LL_DMA_IsActiveFlag_HT7>:
  * @rmtoll ISR          HTIF7         LL_DMA_IsActiveFlag_HT7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800061e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000622:	bf0c      	ite	eq
 8000624:	2301      	moveq	r3, #1
 8000626:	2300      	movne	r3, #0
 8000628:	b2db      	uxtb	r3, r3
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000642:	605a      	str	r2, [r3, #4]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800065c:	605a      	str	r2, [r3, #4]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <LL_DMA_ClearFlag_HT3>:
  * @rmtoll IFCR         CHTIF3        LL_DMA_ClearFlag_HT3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000676:	605a      	str	r2, [r3, #4]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <LL_DMA_ClearFlag_HT7>:
  * @rmtoll IFCR         CHTIF7        LL_DMA_ClearFlag_HT7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000690:	605a      	str	r2, [r3, #4]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LL_DMA_EnableIT_TC+0x38>)
 80006ac:	5cd3      	ldrb	r3, [r2, r3]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	3a01      	subs	r2, #1
 80006ba:	4906      	ldr	r1, [pc, #24]	; (80006d4 <LL_DMA_EnableIT_TC+0x38>)
 80006bc:	5c8a      	ldrb	r2, [r1, r2]
 80006be:	4611      	mov	r1, r2
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	440a      	add	r2, r1
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	08004430 	.word	0x08004430

080006d8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LL_DMA_EnableIT_HT+0x38>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	3a01      	subs	r2, #1
 80006f6:	4906      	ldr	r1, [pc, #24]	; (8000710 <LL_DMA_EnableIT_HT+0x38>)
 80006f8:	5c8a      	ldrb	r2, [r1, r2]
 80006fa:	4611      	mov	r1, r2
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	440a      	add	r2, r1
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	08004430 	.word	0x08004430

08000714 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <LL_RCC_HSE_Enable+0x18>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <LL_RCC_HSE_Enable+0x18>)
 800071e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000

08000730 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <LL_RCC_HSE_IsReady+0x20>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	b2db      	uxtb	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f023 0203 	bic.w	r2, r3, #3
 8000764:	4904      	ldr	r1, [pc, #16]	; (8000778 <LL_RCC_SetSysClkSource+0x24>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	604b      	str	r3, [r1, #4]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <LL_RCC_GetSysClkSource+0x14>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40021000 	.word	0x40021000

08000794 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <LL_RCC_SetAHBPrescaler+0x24>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007a4:	4904      	ldr	r1, [pc, #16]	; (80007b8 <LL_RCC_SetAHBPrescaler+0x24>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	604b      	str	r3, [r1, #4]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80007cc:	4904      	ldr	r1, [pc, #16]	; (80007e0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	604b      	str	r3, [r1, #4]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80007f4:	4904      	ldr	r1, [pc, #16]	; (8000808 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	604b      	str	r3, [r1, #4]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <LL_RCC_PLL_Enable+0x18>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <LL_RCC_PLL_Enable+0x18>)
 8000816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_RCC_PLL_IsReady+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000

0800084c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	430b      	orrs	r3, r1
 8000868:	4903      	ldr	r1, [pc, #12]	; (8000878 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800086a:	4313      	orrs	r3, r2
 800086c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40021000 	.word	0x40021000

0800087c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000886:	695a      	ldr	r2, [r3, #20]
 8000888:	4907      	ldr	r1, [pc, #28]	; (80008a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4313      	orrs	r3, r2
 800088e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4013      	ands	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800089a:	68fb      	ldr	r3, [r7, #12]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	4907      	ldr	r1, [pc, #28]	; (80008d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008c2:	69da      	ldr	r2, [r3, #28]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4013      	ands	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008e6:	699a      	ldr	r2, [r3, #24]
 80008e8:	4907      	ldr	r1, [pc, #28]	; (8000908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4013      	ands	r3, r2
 80008f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <LL_FLASH_SetLatency+0x24>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f023 0207 	bic.w	r2, r3, #7
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <LL_FLASH_SetLatency+0x24>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	600b      	str	r3, [r1, #0]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <LL_FLASH_GetLatency+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0307 	and.w	r3, r3, #7
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	40022000 	.word	0x40022000

0800094c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <LL_SPI_DisableDMAReq_RX>:
  * @rmtoll CR2          RXDMAEN       LL_SPI_DisableDMAReq_RX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f023 0201 	bic.w	r2, r3, #1
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	605a      	str	r2, [r3, #4]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f043 0202 	orr.w	r2, r3, #2
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	605a      	str	r2, [r3, #4]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f023 0201 	bic.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <LL_TIM_SetUpdateSource>:
  *         @arg @ref LL_TIM_UPDATESOURCE_REGULAR
  *         @arg @ref LL_TIM_UPDATESOURCE_COUNTER
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f023 0204 	bic.w	r2, r3, #4
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a1a      	ldr	r2, [r3, #32]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	621a      	str	r2, [r3, #32]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a1a      	ldr	r2, [r3, #32]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	621a      	str	r2, [r3, #32]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
	...

08000a68 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a68:	b4b0      	push	{r4, r5, r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d01c      	beq.n	8000ab2 <LL_TIM_OC_DisableFast+0x4a>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d017      	beq.n	8000aae <LL_TIM_OC_DisableFast+0x46>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b10      	cmp	r3, #16
 8000a82:	d012      	beq.n	8000aaa <LL_TIM_OC_DisableFast+0x42>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b40      	cmp	r3, #64	; 0x40
 8000a88:	d00d      	beq.n	8000aa6 <LL_TIM_OC_DisableFast+0x3e>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a90:	d007      	beq.n	8000aa2 <LL_TIM_OC_DisableFast+0x3a>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a98:	d101      	bne.n	8000a9e <LL_TIM_OC_DisableFast+0x36>
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	e00a      	b.n	8000ab4 <LL_TIM_OC_DisableFast+0x4c>
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	e008      	b.n	8000ab4 <LL_TIM_OC_DisableFast+0x4c>
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	e006      	b.n	8000ab4 <LL_TIM_OC_DisableFast+0x4c>
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e004      	b.n	8000ab4 <LL_TIM_OC_DisableFast+0x4c>
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e002      	b.n	8000ab4 <LL_TIM_OC_DisableFast+0x4c>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <LL_TIM_OC_DisableFast+0x4c>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3318      	adds	r3, #24
 8000aba:	461a      	mov	r2, r3
 8000abc:	4629      	mov	r1, r5
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <LL_TIM_OC_DisableFast+0x7c>)
 8000ac0:	5c5b      	ldrb	r3, [r3, r1]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	4629      	mov	r1, r5
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <LL_TIM_OC_DisableFast+0x80>)
 8000acc:	5c5b      	ldrb	r3, [r3, r1]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	408b      	lsls	r3, r1
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	6023      	str	r3, [r4, #0]

}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bcb0      	pop	{r4, r5, r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	08004438 	.word	0x08004438
 8000ae8:	08004440 	.word	0x08004440

08000aec <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000aec:	b4b0      	push	{r4, r5, r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d01c      	beq.n	8000b36 <LL_TIM_OC_EnablePreload+0x4a>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d017      	beq.n	8000b32 <LL_TIM_OC_EnablePreload+0x46>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d012      	beq.n	8000b2e <LL_TIM_OC_EnablePreload+0x42>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	2b40      	cmp	r3, #64	; 0x40
 8000b0c:	d00d      	beq.n	8000b2a <LL_TIM_OC_EnablePreload+0x3e>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b14:	d007      	beq.n	8000b26 <LL_TIM_OC_EnablePreload+0x3a>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b1c:	d101      	bne.n	8000b22 <LL_TIM_OC_EnablePreload+0x36>
 8000b1e:	2305      	movs	r3, #5
 8000b20:	e00a      	b.n	8000b38 <LL_TIM_OC_EnablePreload+0x4c>
 8000b22:	2306      	movs	r3, #6
 8000b24:	e008      	b.n	8000b38 <LL_TIM_OC_EnablePreload+0x4c>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e006      	b.n	8000b38 <LL_TIM_OC_EnablePreload+0x4c>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e004      	b.n	8000b38 <LL_TIM_OC_EnablePreload+0x4c>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e002      	b.n	8000b38 <LL_TIM_OC_EnablePreload+0x4c>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LL_TIM_OC_EnablePreload+0x4c>
 8000b36:	2300      	movs	r3, #0
 8000b38:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4629      	mov	r1, r5
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <LL_TIM_OC_EnablePreload+0x7c>)
 8000b44:	5c5b      	ldrb	r3, [r3, r1]
 8000b46:	4413      	add	r3, r2
 8000b48:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b4a:	6822      	ldr	r2, [r4, #0]
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <LL_TIM_OC_EnablePreload+0x80>)
 8000b50:	5c5b      	ldrb	r3, [r3, r1]
 8000b52:	4619      	mov	r1, r3
 8000b54:	2308      	movs	r3, #8
 8000b56:	408b      	lsls	r3, r1
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	6023      	str	r3, [r4, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bcb0      	pop	{r4, r5, r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	08004438 	.word	0x08004438
 8000b6c:	08004440 	.word	0x08004440

08000b70 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b9c:	f023 0307 	bic.w	r3, r3, #7
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	605a      	str	r2, [r3, #4]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	609a      	str	r2, [r3, #8]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f06f 0201 	mvn.w	r2, #1
 8000c20:	611a      	str	r2, [r3, #16]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <LL_TIM_EnableDMAReq_UPDATE>:
  * @rmtoll DIER         UDE           LL_TIM_EnableDMAReq_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	611a      	str	r2, [r3, #16]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	615a      	str	r2, [r3, #20]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
	...

08000c88 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c96:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca2:	6053      	str	r3, [r2, #4]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	40010000 	.word	0x40010000

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fe10 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000cbc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000cc0:	f7ff fdf4 	bl	80008ac <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f7ff fa41 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000cca:	f7ff ffdd 	bl	8000c88 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f9fb 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 fc9b 	bl	800160c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f000 fc71 	bl	80015bc <MX_DMA_Init>
  MX_SPI1_Init();
 8000cda:	f000 fa35 	bl	8001148 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000cde:	f000 faa3 	bl	8001228 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ce2:	f000 fb1d 	bl	8001320 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ce6:	f000 fbb1 	bl	800144c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000cea:	f000 fc11 	bl	8001510 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000cee:	f000 fbdf 	bl	80014b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initDelay();
 8000cf2:	f001 fcf2 	bl	80026da <initDelay>
  LL_TIM_SetUpdateSource(TIM4, LL_TIM_UPDATESOURCE_COUNTER);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4899      	ldr	r0, [pc, #612]	; (8000f60 <main+0x2b0>)
 8000cfa:	f7ff fe72 	bl	80009e2 <LL_TIM_SetUpdateSource>
  LL_TIM_SetUpdateSource(TIM3, LL_TIM_UPDATESOURCE_COUNTER);
 8000cfe:	2104      	movs	r1, #4
 8000d00:	4898      	ldr	r0, [pc, #608]	; (8000f64 <main+0x2b4>)
 8000d02:	f7ff fe6e 	bl	80009e2 <LL_TIM_SetUpdateSource>
  LL_TIM_SetUpdateSource(TIM2, LL_TIM_UPDATESOURCE_COUNTER);
 8000d06:	2104      	movs	r1, #4
 8000d08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d0c:	f7ff fe69 	bl	80009e2 <LL_TIM_SetUpdateSource>
  LL_TIM_SetUpdateSource(TIM1, LL_TIM_UPDATESOURCE_COUNTER);
 8000d10:	2104      	movs	r1, #4
 8000d12:	4895      	ldr	r0, [pc, #596]	; (8000f68 <main+0x2b8>)
 8000d14:	f7ff fe65 	bl	80009e2 <LL_TIM_SetUpdateSource>


  // Add Timer 4's DMA periferal and memory location
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, &TIM1->CCR1);
 8000d18:	4a94      	ldr	r2, [pc, #592]	; (8000f6c <main+0x2bc>)
 8000d1a:	2107      	movs	r1, #7
 8000d1c:	4894      	ldr	r0, [pc, #592]	; (8000f70 <main+0x2c0>)
 8000d1e:	f7ff fc25 	bl	800056c <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, &musicBuffer);
 8000d22:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <main+0x2c4>)
 8000d24:	461a      	mov	r2, r3
 8000d26:	2107      	movs	r1, #7
 8000d28:	4891      	ldr	r0, [pc, #580]	; (8000f70 <main+0x2c0>)
 8000d2a:	f7ff fc07 	bl	800053c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_CIRCULAR);
 8000d2e:	2220      	movs	r2, #32
 8000d30:	2107      	movs	r1, #7
 8000d32:	488f      	ldr	r0, [pc, #572]	; (8000f70 <main+0x2c0>)
 8000d34:	f7ff fb14 	bl	8000360 <LL_DMA_SetMode>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, MUSIC_BUFFER_SIZE);
 8000d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	488c      	ldr	r0, [pc, #560]	; (8000f70 <main+0x2c0>)
 8000d40:	f7ff fbda 	bl	80004f8 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8000d44:	2107      	movs	r1, #7
 8000d46:	488a      	ldr	r0, [pc, #552]	; (8000f70 <main+0x2c0>)
 8000d48:	f7ff fca8 	bl	800069c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_7);
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	4888      	ldr	r0, [pc, #544]	; (8000f70 <main+0x2c0>)
 8000d50:	f7ff fcc2 	bl	80006d8 <LL_DMA_EnableIT_HT>
  LL_TIM_EnableDMAReq_UPDATE(TIM4);
 8000d54:	4882      	ldr	r0, [pc, #520]	; (8000f60 <main+0x2b0>)
 8000d56:	f7ff ff69 	bl	8000c2c <LL_TIM_EnableDMAReq_UPDATE>

  // Video Timer 3 and DMA stuff
  LL_TIM_ClearFlag_UPDATE(TIM3);
 8000d5a:	4882      	ldr	r0, [pc, #520]	; (8000f64 <main+0x2b4>)
 8000d5c:	f7ff ff59 	bl	8000c12 <LL_TIM_ClearFlag_UPDATE>
  LL_SPI_EnableDMAReq_TX(SPI1);
 8000d60:	4885      	ldr	r0, [pc, #532]	; (8000f78 <main+0x2c8>)
 8000d62:	f7ff fe11 	bl	8000988 <LL_SPI_EnableDMAReq_TX>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_3, &SPI1->DR);
 8000d66:	4a85      	ldr	r2, [pc, #532]	; (8000f7c <main+0x2cc>)
 8000d68:	2103      	movs	r1, #3
 8000d6a:	4881      	ldr	r0, [pc, #516]	; (8000f70 <main+0x2c0>)
 8000d6c:	f7ff fbfe 	bl	800056c <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer[0]);
 8000d70:	4b83      	ldr	r3, [pc, #524]	; (8000f80 <main+0x2d0>)
 8000d72:	461a      	mov	r2, r3
 8000d74:	2103      	movs	r1, #3
 8000d76:	487e      	ldr	r0, [pc, #504]	; (8000f70 <main+0x2c0>)
 8000d78:	f7ff fbe0 	bl	800053c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, VID_HALF_BUFFER_SIZE);
 8000d7c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000d80:	2103      	movs	r1, #3
 8000d82:	487b      	ldr	r0, [pc, #492]	; (8000f70 <main+0x2c0>)
 8000d84:	f7ff fbb8 	bl	80004f8 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 8000d88:	2103      	movs	r1, #3
 8000d8a:	4879      	ldr	r0, [pc, #484]	; (8000f70 <main+0x2c0>)
 8000d8c:	f7ff fc86 	bl	800069c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_3);
 8000d90:	2103      	movs	r1, #3
 8000d92:	4877      	ldr	r0, [pc, #476]	; (8000f70 <main+0x2c0>)
 8000d94:	f7ff fca0 	bl	80006d8 <LL_DMA_EnableIT_HT>

  LL_SPI_Enable(SPI1);
 8000d98:	4877      	ldr	r0, [pc, #476]	; (8000f78 <main+0x2c8>)
 8000d9a:	f7ff fdd7 	bl	800094c <LL_SPI_Enable>
  OLED_Driver_Device_Init();
 8000d9e:	f002 f8ab 	bl	8002ef8 <OLED_Driver_Device_Init>

  // Enable set DMA for SPI2 (for SD Card)
  LL_SPI_DisableDMAReq_RX(SPI2);
 8000da2:	4878      	ldr	r0, [pc, #480]	; (8000f84 <main+0x2d4>)
 8000da4:	f7ff fde1 	bl	800096a <LL_SPI_DisableDMAReq_RX>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_4, &SPI2->DR);
 8000da8:	4a77      	ldr	r2, [pc, #476]	; (8000f88 <main+0x2d8>)
 8000daa:	2104      	movs	r1, #4
 8000dac:	4870      	ldr	r0, [pc, #448]	; (8000f70 <main+0x2c0>)
 8000dae:	f7ff fbdd 	bl	800056c <LL_DMA_SetPeriphAddress>
  LL_SPI_Enable(SPI2);
 8000db2:	4874      	ldr	r0, [pc, #464]	; (8000f84 <main+0x2d4>)
 8000db4:	f7ff fdca 	bl	800094c <LL_SPI_Enable>

  // Start FATFS file handler
  FRESULT res = f_mount(&fatfs_handler, "", 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	4974      	ldr	r1, [pc, #464]	; (8000f8c <main+0x2dc>)
 8000dbc:	4874      	ldr	r0, [pc, #464]	; (8000f90 <main+0x2e0>)
 8000dbe:	f003 f935 	bl	800402c <f_mount>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if(res != FR_OK) {
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <main+0x120>
  	return 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e163      	b.n	8001098 <main+0x3e8>
  }
  delayMs(100);
 8000dd0:	2064      	movs	r0, #100	; 0x64
 8000dd2:	f001 fc95 	bl	8002700 <delayMs>

  // Create the audio file handler
  res = f_open(&audio_fil, MUSIC_FILE_NAME, FA_READ);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	496e      	ldr	r1, [pc, #440]	; (8000f94 <main+0x2e4>)
 8000dda:	486f      	ldr	r0, [pc, #444]	; (8000f98 <main+0x2e8>)
 8000ddc:	f003 f966 	bl	80040ac <f_open>
 8000de0:	4603      	mov	r3, r0
 8000de2:	71fb      	strb	r3, [r7, #7]
  if (res != FR_OK) {
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <main+0x13e>
    return 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e154      	b.n	8001098 <main+0x3e8>
  }
  // Read the first 44bytes to remove header (checked with HxD)
  unsigned int f_size = 0;		// Placeholder for size of array
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
  res = f_read(&audio_fil,musicBuffer,44,&f_size);	// Read part of file
 8000df2:	463b      	mov	r3, r7
 8000df4:	222c      	movs	r2, #44	; 0x2c
 8000df6:	495f      	ldr	r1, [pc, #380]	; (8000f74 <main+0x2c4>)
 8000df8:	4867      	ldr	r0, [pc, #412]	; (8000f98 <main+0x2e8>)
 8000dfa:	f003 f9cc 	bl	8004196 <f_read>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if(res != FR_OK){		// If not read correctly, return
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <main+0x15c>
    return 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e145      	b.n	8001098 <main+0x3e8>
  }
  // Fill up the buffer with data, so when the DMA1-7 interrupt initially triggers for half-full, it could fill
  // up the first half when its done with it
  music_bufferCount = 1;
 8000e0c:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <main+0x2ec>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
  res = f_read(&audio_fil,musicBuffer,MUSIC_BUFFER_SIZE,&f_size);
 8000e12:	463b      	mov	r3, r7
 8000e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e18:	4956      	ldr	r1, [pc, #344]	; (8000f74 <main+0x2c4>)
 8000e1a:	485f      	ldr	r0, [pc, #380]	; (8000f98 <main+0x2e8>)
 8000e1c:	f003 f9bb 	bl	8004196 <f_read>
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  if (res != FR_OK) {
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <main+0x17e>
	return 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e134      	b.n	8001098 <main+0x3e8>
	}


  res = f_open(&vid_fil, VIDEO_FILE_NAME, FA_READ);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	495b      	ldr	r1, [pc, #364]	; (8000fa0 <main+0x2f0>)
 8000e32:	485c      	ldr	r0, [pc, #368]	; (8000fa4 <main+0x2f4>)
 8000e34:	f003 f93a 	bl	80040ac <f_open>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if (res != FR_OK) {
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <main+0x196>
    return 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e128      	b.n	8001098 <main+0x3e8>
  }
	res = f_read(&vid_fil,vid_buffer,VID_BUFFER_SIZE,&f_size);
 8000e46:	463b      	mov	r3, r7
 8000e48:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000e4c:	494c      	ldr	r1, [pc, #304]	; (8000f80 <main+0x2d0>)
 8000e4e:	4855      	ldr	r0, [pc, #340]	; (8000fa4 <main+0x2f4>)
 8000e50:	f003 f9a1 	bl	8004196 <f_read>
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
	if (res != FR_OK) {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <main+0x1b2>
		return 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e11a      	b.n	8001098 <main+0x3e8>
	  }

  video_bufferCount = 1;
 8000e62:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <main+0x2f8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
  vid_number_of_send = VID_HALF_BUFFER_SIZE/2;
 8000e68:	4b50      	ldr	r3, [pc, #320]	; (8000fac <main+0x2fc>)
 8000e6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e6e:	601a      	str	r2, [r3, #0]

  end_of_music_file = 0;
 8000e70:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <main+0x300>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
  end_of_video_file = 0;
 8000e76:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <main+0x304>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
  last_music_file_size = 0;
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <main+0x308>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
  last_video_file_size = 0;
 8000e82:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <main+0x30c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

  OLED_Driver_CUSTOM_RAM_Address(OLED_Y_MIN, OLED_Y_MAX, 0, 127);
 8000e88:	237f      	movs	r3, #127	; 0x7f
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2171      	movs	r1, #113	; 0x71
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f001 ffbe 	bl	8002e10 <OLED_Driver_CUSTOM_RAM_Address>
  OLED_Driver_Write_Command(0x5C);
 8000e94:	205c      	movs	r0, #92	; 0x5c
 8000e96:	f001 ff3f 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_DC_1;
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <main+0x310>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <main+0x310>)
 8000ea0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	60d3      	str	r3, [r2, #12]


  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	482e      	ldr	r0, [pc, #184]	; (8000f68 <main+0x2b8>)
 8000eae:	f7ff fdb9 	bl	8000a24 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableAllOutputs(TIM1);
 8000eb2:	482d      	ldr	r0, [pc, #180]	; (8000f68 <main+0x2b8>)
 8000eb4:	f7ff fe9e 	bl	8000bf4 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8000eb8:	482b      	ldr	r0, [pc, #172]	; (8000f68 <main+0x2b8>)
 8000eba:	f7ff fd74 	bl	80009a6 <LL_TIM_EnableCounter>

  // Clear DMA1-7 flags just in case they were set to 1
  LL_DMA_ClearFlag_TC7(DMA1); LL_DMA_ClearFlag_HT7(DMA1);
 8000ebe:	482c      	ldr	r0, [pc, #176]	; (8000f70 <main+0x2c0>)
 8000ec0:	f7ff fbc5 	bl	800064e <LL_DMA_ClearFlag_TC7>
 8000ec4:	482a      	ldr	r0, [pc, #168]	; (8000f70 <main+0x2c0>)
 8000ec6:	f7ff fbdc 	bl	8000682 <LL_DMA_ClearFlag_HT7>
  LL_DMA_ClearFlag_TC3(DMA1); LL_DMA_ClearFlag_HT3(DMA1);
 8000eca:	4829      	ldr	r0, [pc, #164]	; (8000f70 <main+0x2c0>)
 8000ecc:	f7ff fbb2 	bl	8000634 <LL_DMA_ClearFlag_TC3>
 8000ed0:	4827      	ldr	r0, [pc, #156]	; (8000f70 <main+0x2c0>)
 8000ed2:	f7ff fbc9 	bl	8000668 <LL_DMA_ClearFlag_HT3>

  // Enable the DMA Channel and start the timer 4 counter
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000ed6:	2107      	movs	r1, #7
 8000ed8:	4825      	ldr	r0, [pc, #148]	; (8000f70 <main+0x2c0>)
 8000eda:	f7ff f9e1 	bl	80002a0 <LL_DMA_EnableChannel>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000ede:	2103      	movs	r1, #3
 8000ee0:	4823      	ldr	r0, [pc, #140]	; (8000f70 <main+0x2c0>)
 8000ee2:	f7ff f9dd 	bl	80002a0 <LL_DMA_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <main+0x2b4>)
 8000ee8:	f7ff fd5d 	bl	80009a6 <LL_TIM_EnableCounter>
  LL_TIM_EnableCounter(TIM4);
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <main+0x2b0>)
 8000eee:	f7ff fd5a 	bl	80009a6 <LL_TIM_EnableCounter>
  	 * let's the DMA continue for the circular audio DMA and restarts the DMA for the 'normal mode'
  	 * video DMA. It also makes the end_of_file flag a 2. After that, when the end_of_file flag
  	 * is 2, that means that we sent out everything we needed, thus it's OK now to end the DMA and
  	 * timers.
  	 */
	  if(end_of_music_file > 0){
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <main+0x300>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d07a      	beq.n	8000ff0 <main+0x340>
		  if(LL_DMA_IsActiveFlag_TC7(DMA1) || LL_DMA_IsActiveFlag_HT7(DMA1)){
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <main+0x2c0>)
 8000efc:	f7ff fb61 	bl	80005c2 <LL_DMA_IsActiveFlag_TC7>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d105      	bne.n	8000f12 <main+0x262>
 8000f06:	481a      	ldr	r0, [pc, #104]	; (8000f70 <main+0x2c0>)
 8000f08:	f7ff fb81 	bl	800060e <LL_DMA_IsActiveFlag_HT7>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06e      	beq.n	8000ff0 <main+0x340>
		  	LL_DMA_ClearFlag_TC7(DMA1); LL_DMA_ClearFlag_HT7(DMA1);
 8000f12:	4817      	ldr	r0, [pc, #92]	; (8000f70 <main+0x2c0>)
 8000f14:	f7ff fb9b 	bl	800064e <LL_DMA_ClearFlag_TC7>
 8000f18:	4815      	ldr	r0, [pc, #84]	; (8000f70 <main+0x2c0>)
 8000f1a:	f7ff fbb2 	bl	8000682 <LL_DMA_ClearFlag_HT7>
			  if(end_of_music_file == 1){
 8000f1e:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <main+0x300>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d14e      	bne.n	8000fc4 <main+0x314>
			  	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000f26:	2107      	movs	r1, #7
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <main+0x2c0>)
 8000f2a:	f7ff f9d7 	bl	80002dc <LL_DMA_DisableChannel>
			  	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, &musicBuffer[music_bufferCount*MUSIC_HALF_BUFFER_SIZE]);
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <main+0x2ec>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	02db      	lsls	r3, r3, #11
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <main+0x2c4>)
 8000f36:	4413      	add	r3, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <main+0x2c0>)
 8000f3e:	f7ff fafd 	bl	800053c <LL_DMA_SetMemoryAddress>
			  	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, last_music_file_size);
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <main+0x308>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	2107      	movs	r1, #7
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <main+0x2c0>)
 8000f4c:	f7ff fad4 	bl	80004f8 <LL_DMA_SetDataLength>
			  	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000f50:	2107      	movs	r1, #7
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <main+0x2c0>)
 8000f54:	f7ff f9a4 	bl	80002a0 <LL_DMA_EnableChannel>
			  	end_of_music_file = 2;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <main+0x300>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e047      	b.n	8000ff0 <main+0x340>
 8000f60:	40000800 	.word	0x40000800
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40012c00 	.word	0x40012c00
 8000f6c:	40012c34 	.word	0x40012c34
 8000f70:	40020000 	.word	0x40020000
 8000f74:	20000258 	.word	0x20000258
 8000f78:	40013000 	.word	0x40013000
 8000f7c:	4001300c 	.word	0x4001300c
 8000f80:	20001294 	.word	0x20001294
 8000f84:	40003800 	.word	0x40003800
 8000f88:	4000380c 	.word	0x4000380c
 8000f8c:	080043fc 	.word	0x080043fc
 8000f90:	200020b8 	.word	0x200020b8
 8000f94:	08004400 	.word	0x08004400
 8000f98:	20000034 	.word	0x20000034
 8000f9c:	200020b4 	.word	0x200020b4
 8000fa0:	0800440c 	.word	0x0800440c
 8000fa4:	20001e94 	.word	0x20001e94
 8000fa8:	2000128c 	.word	0x2000128c
 8000fac:	20000254 	.word	0x20000254
 8000fb0:	200022e0 	.word	0x200022e0
 8000fb4:	2000002c 	.word	0x2000002c
 8000fb8:	20000030 	.word	0x20000030
 8000fbc:	20001290 	.word	0x20001290
 8000fc0:	40010800 	.word	0x40010800
			  }
			  else if(end_of_music_file == 2){
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <main+0x3f0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d111      	bne.n	8000ff0 <main+0x340>
					LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000fcc:	2107      	movs	r1, #7
 8000fce:	4835      	ldr	r0, [pc, #212]	; (80010a4 <main+0x3f4>)
 8000fd0:	f7ff f984 	bl	80002dc <LL_DMA_DisableChannel>
					LL_TIM_DisableCounter(TIM4);
 8000fd4:	4834      	ldr	r0, [pc, #208]	; (80010a8 <main+0x3f8>)
 8000fd6:	f7ff fcf5 	bl	80009c4 <LL_TIM_DisableCounter>
					LL_TIM_OC_SetCompareCH1(TIM1, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4833      	ldr	r0, [pc, #204]	; (80010ac <main+0x3fc>)
 8000fde:	f7ff fdc7 	bl	8000b70 <LL_TIM_OC_SetCompareCH1>
					LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4831      	ldr	r0, [pc, #196]	; (80010ac <main+0x3fc>)
 8000fe6:	f7ff fd2d 	bl	8000a44 <LL_TIM_CC_DisableChannel>
					LL_TIM_DisableCounter(TIM1);
 8000fea:	4830      	ldr	r0, [pc, #192]	; (80010ac <main+0x3fc>)
 8000fec:	f7ff fcea 	bl	80009c4 <LL_TIM_DisableCounter>
			  }
		  }
	  }
	  if(end_of_video_file > 0){
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <main+0x400>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f43f af7c 	beq.w	8000ef2 <main+0x242>
	  	if(LL_DMA_IsActiveFlag_TC3(DMA1) || LL_DMA_IsActiveFlag_HT3(DMA1)){
 8000ffa:	482a      	ldr	r0, [pc, #168]	; (80010a4 <main+0x3f4>)
 8000ffc:	f7ff face 	bl	800059c <LL_DMA_IsActiveFlag_TC3>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <main+0x364>
 8001006:	4827      	ldr	r0, [pc, #156]	; (80010a4 <main+0x3f4>)
 8001008:	f7ff faee 	bl	80005e8 <LL_DMA_IsActiveFlag_HT3>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	f43f af6f 	beq.w	8000ef2 <main+0x242>
	  		LL_DMA_ClearFlag_TC3(DMA1); LL_DMA_ClearFlag_HT3(DMA1);
 8001014:	4823      	ldr	r0, [pc, #140]	; (80010a4 <main+0x3f4>)
 8001016:	f7ff fb0d 	bl	8000634 <LL_DMA_ClearFlag_TC3>
 800101a:	4822      	ldr	r0, [pc, #136]	; (80010a4 <main+0x3f4>)
 800101c:	f7ff fb24 	bl	8000668 <LL_DMA_ClearFlag_HT3>
	  		if(end_of_video_file == 1){
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <main+0x400>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d120      	bne.n	800106a <main+0x3ba>
	  			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001028:	2103      	movs	r1, #3
 800102a:	481e      	ldr	r0, [pc, #120]	; (80010a4 <main+0x3f4>)
 800102c:	f7ff f956 	bl	80002dc <LL_DMA_DisableChannel>
					LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE]);
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <main+0x404>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	025b      	lsls	r3, r3, #9
 800103c:	461a      	mov	r2, r3
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <main+0x408>)
 8001040:	4413      	add	r3, r2
 8001042:	461a      	mov	r2, r3
 8001044:	2103      	movs	r1, #3
 8001046:	4817      	ldr	r0, [pc, #92]	; (80010a4 <main+0x3f4>)
 8001048:	f7ff fa78 	bl	800053c <LL_DMA_SetMemoryAddress>
					LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, last_video_file_size);
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <main+0x40c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	2103      	movs	r1, #3
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <main+0x3f4>)
 8001056:	f7ff fa4f 	bl	80004f8 <LL_DMA_SetDataLength>
					LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800105a:	2103      	movs	r1, #3
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <main+0x3f4>)
 800105e:	f7ff f91f 	bl	80002a0 <LL_DMA_EnableChannel>
					end_of_video_file = 2;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <main+0x400>)
 8001064:	2202      	movs	r2, #2
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e743      	b.n	8000ef2 <main+0x242>
	  		}
	  		else if(end_of_video_file == 2){
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <main+0x400>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b02      	cmp	r3, #2
 8001070:	f47f af3f 	bne.w	8000ef2 <main+0x242>
	  			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001074:	2103      	movs	r1, #3
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <main+0x3f4>)
 8001078:	f7ff f930 	bl	80002dc <LL_DMA_DisableChannel>
					LL_TIM_DisableCounter(TIM3);
 800107c:	4810      	ldr	r0, [pc, #64]	; (80010c0 <main+0x410>)
 800107e:	f7ff fca1 	bl	80009c4 <LL_TIM_DisableCounter>
					OLED_CS_1;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <main+0x414>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <main+0x414>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001090:	60d3      	str	r3, [r2, #12]
					OLED_Driver_Clear_Screen();
 8001092:	f001 fefd 	bl	8002e90 <OLED_Driver_Clear_Screen>
	  if(end_of_music_file > 0){
 8001096:	e72c      	b.n	8000ef2 <main+0x242>
	  	}
	  }
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200022e0 	.word	0x200022e0
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40000800 	.word	0x40000800
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	2000002c 	.word	0x2000002c
 80010b4:	2000128c 	.word	0x2000128c
 80010b8:	20001294 	.word	0x20001294
 80010bc:	20001290 	.word	0x20001290
 80010c0:	40000400 	.word	0x40000400
 80010c4:	40010800 	.word	0x40010800

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f7ff fc1d 	bl	800090c <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80010d2:	f7ff fc2f 	bl	8000934 <LL_FLASH_GetLatency>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x18>
  {
    Error_Handler();  
 80010dc:	f000 faf8 	bl	80016d0 <Error_Handler>
  }
  LL_RCC_HSE_Enable();
 80010e0:	f7ff fb18 	bl	8000714 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80010e4:	bf00      	nop
 80010e6:	f7ff fb23 	bl	8000730 <LL_RCC_HSE_IsReady>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d1fa      	bne.n	80010e6 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80010f0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80010f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80010f8:	f7ff fba8 	bl	800084c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80010fc:	f7ff fb86 	bl	800080c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001100:	bf00      	nop
 8001102:	f7ff fb91 	bl	8000828 <LL_RCC_PLL_IsReady>
 8001106:	4603      	mov	r3, r0
 8001108:	2b01      	cmp	r3, #1
 800110a:	d1fa      	bne.n	8001102 <SystemClock_Config+0x3a>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fb41 	bl	8000794 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001112:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001116:	f7ff fb51 	bl	80007bc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fb62 	bl	80007e4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001120:	2002      	movs	r0, #2
 8001122:	f7ff fb17 	bl	8000754 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001126:	bf00      	nop
 8001128:	f7ff fb28 	bl	800077c <LL_RCC_GetSysClkSource>
 800112c:	4603      	mov	r3, r0
 800112e:	2b08      	cmp	r3, #8
 8001130:	d1fa      	bne.n	8001128 <SystemClock_Config+0x60>
  {
  
  }
  LL_Init1msTick(72000000);
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <SystemClock_Config+0x7c>)
 8001134:	f001 fa8c 	bl	8002650 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <SystemClock_Config+0x7c>)
 800113a:	f001 fa97 	bl	800266c <LL_SetSystemCoreClock>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	044aa200 	.word	0x044aa200

08001148 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b090      	sub	sp, #64	; 0x40
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	2228      	movs	r2, #40	; 0x28
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f003 f93c 	bl	80043d4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800116a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800116e:	f7ff fbb5 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001172:	2004      	movs	r0, #4
 8001174:	f7ff fbb2 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8001178:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 800117c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800117e:	2309      	movs	r3, #9
 8001180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <MX_SPI1_Init+0xd4>)
 8001190:	f000 fea1 	bl	8001ed6 <LL_GPIO_Init>

  /* SPI1 DMA Init */
  
  /* SPI1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001194:	2210      	movs	r2, #16
 8001196:	2103      	movs	r1, #3
 8001198:	4821      	ldr	r0, [pc, #132]	; (8001220 <MX_SPI1_Init+0xd8>)
 800119a:	f7ff f8bd 	bl	8000318 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800119e:	2200      	movs	r2, #0
 80011a0:	2103      	movs	r1, #3
 80011a2:	481f      	ldr	r0, [pc, #124]	; (8001220 <MX_SPI1_Init+0xd8>)
 80011a4:	f7ff f986 	bl	80004b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2103      	movs	r1, #3
 80011ac:	481c      	ldr	r0, [pc, #112]	; (8001220 <MX_SPI1_Init+0xd8>)
 80011ae:	f7ff f8d7 	bl	8000360 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2103      	movs	r1, #3
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <MX_SPI1_Init+0xd8>)
 80011b8:	f7ff f8f4 	bl	80003a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	2103      	movs	r1, #3
 80011c0:	4817      	ldr	r0, [pc, #92]	; (8001220 <MX_SPI1_Init+0xd8>)
 80011c2:	f7ff f911 	bl	80003e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2103      	movs	r1, #3
 80011ca:	4815      	ldr	r0, [pc, #84]	; (8001220 <MX_SPI1_Init+0xd8>)
 80011cc:	f7ff f92e 	bl	800042c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2103      	movs	r1, #3
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <MX_SPI1_Init+0xd8>)
 80011d6:	f7ff f94b 	bl	8000470 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011e2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80011f6:	2310      	movs	r3, #16
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001202:	230a      	movs	r3, #10
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_SPI1_Init+0xdc>)
 800120e:	f000 fee5 	bl	8001fdc <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3740      	adds	r7, #64	; 0x40
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800
 8001220:	40020000 	.word	0x40020000
 8001224:	40013000 	.word	0x40013000

08001228 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2228      	movs	r2, #40	; 0x28
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f003 f8cc 	bl	80043d4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800124a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800124e:	f7ff fb2d 	bl	80008ac <LL_APB1_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001252:	2008      	movs	r0, #8
 8001254:	f7ff fb42 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_15;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_SPI2_Init+0xe4>)
 800125a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800125c:	2309      	movs	r3, #9
 800125e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4828      	ldr	r0, [pc, #160]	; (8001310 <MX_SPI2_Init+0xe8>)
 800126e:	f000 fe32 	bl	8001ed6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_SPI2_Init+0xec>)
 8001274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001276:	2304      	movs	r3, #4
 8001278:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4824      	ldr	r0, [pc, #144]	; (8001310 <MX_SPI2_Init+0xe8>)
 8001280:	f000 fe29 	bl	8001ed6 <LL_GPIO_Init>

  /* SPI2 DMA Init */
  
  /* SPI2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001284:	2200      	movs	r2, #0
 8001286:	2104      	movs	r1, #4
 8001288:	4823      	ldr	r0, [pc, #140]	; (8001318 <MX_SPI2_Init+0xf0>)
 800128a:	f7ff f845 	bl	8000318 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 800128e:	2200      	movs	r2, #0
 8001290:	2104      	movs	r1, #4
 8001292:	4821      	ldr	r0, [pc, #132]	; (8001318 <MX_SPI2_Init+0xf0>)
 8001294:	f7ff f90e 	bl	80004b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8001298:	2200      	movs	r2, #0
 800129a:	2104      	movs	r1, #4
 800129c:	481e      	ldr	r0, [pc, #120]	; (8001318 <MX_SPI2_Init+0xf0>)
 800129e:	f7ff f85f 	bl	8000360 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2104      	movs	r1, #4
 80012a6:	481c      	ldr	r0, [pc, #112]	; (8001318 <MX_SPI2_Init+0xf0>)
 80012a8:	f7ff f87c 	bl	80003a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	2104      	movs	r1, #4
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_SPI2_Init+0xf0>)
 80012b2:	f7ff f899 	bl	80003e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2104      	movs	r1, #4
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <MX_SPI2_Init+0xf0>)
 80012bc:	f7ff f8b6 	bl	800042c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <MX_SPI2_Init+0xf0>)
 80012c6:	f7ff f8d3 	bl	8000470 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80012ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012d2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80012e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80012e6:	2300      	movs	r3, #0
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80012f2:	230a      	movs	r3, #10
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_SPI2_Init+0xf4>)
 80012fe:	f000 fe6d 	bl	8001fdc <LL_SPI_Init>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	04a000a0 	.word	0x04a000a0
 8001310:	40010c00 	.word	0x40010c00
 8001314:	04400040 	.word	0x04400040
 8001318:	40020000 	.word	0x40020000
 800131c:	40003800 	.word	0x40003800

08001320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b098      	sub	sp, #96	; 0x60
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001326:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133a:	2220      	movs	r2, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 f848 	bl	80043d4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001364:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001368:	f7ff fab8 	bl	80008dc <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001372:	2300      	movs	r3, #0
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 255;
 8001376:	23ff      	movs	r3, #255	; 0xff
 8001378:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001388:	4619      	mov	r1, r3
 800138a:	482d      	ldr	r0, [pc, #180]	; (8001440 <MX_TIM1_Init+0x120>)
 800138c:	f000 fedc 	bl	8002148 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <MX_TIM1_Init+0x120>)
 8001392:	f7ff fb38 	bl	8000a06 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001396:	2100      	movs	r1, #0
 8001398:	4829      	ldr	r0, [pc, #164]	; (8001440 <MX_TIM1_Init+0x120>)
 800139a:	f7ff fbf6 	bl	8000b8a <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800139e:	2101      	movs	r1, #1
 80013a0:	4827      	ldr	r0, [pc, #156]	; (8001440 <MX_TIM1_Init+0x120>)
 80013a2:	f7ff fba3 	bl	8000aec <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	; 0x60
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80013c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ca:	461a      	mov	r2, r3
 80013cc:	2101      	movs	r1, #1
 80013ce:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_TIM1_Init+0x120>)
 80013d0:	f000 ff18 	bl	8002204 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	481a      	ldr	r0, [pc, #104]	; (8001440 <MX_TIM1_Init+0x120>)
 80013d8:	f7ff fb46 	bl	8000a68 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80013dc:	2100      	movs	r1, #0
 80013de:	4818      	ldr	r0, [pc, #96]	; (8001440 <MX_TIM1_Init+0x120>)
 80013e0:	f7ff fbe7 	bl	8000bb2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <MX_TIM1_Init+0x120>)
 80013e6:	f7ff fbf6 	bl	8000bd6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <MX_TIM1_Init+0x120>)
 8001412:	f000 ff2f 	bl	8002274 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001416:	2004      	movs	r0, #4
 8001418:	f7ff fa60 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration  
  PA8   ------> TIM1_CH1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_TIM1_Init+0x124>)
 800141e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001420:	2309      	movs	r3, #9
 8001422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001424:	2302      	movs	r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM1_Init+0x128>)
 8001432:	f000 fd50 	bl	8001ed6 <LL_GPIO_Init>

}
 8001436:	bf00      	nop
 8001438:	3760      	adds	r7, #96	; 0x60
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012c00 	.word	0x40012c00
 8001444:	04010001 	.word	0x04010001
 8001448:	40010800 	.word	0x40010800

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fa23 	bl	80008ac <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 282;
 8001466:	f44f 738d 	mov.w	r3, #282	; 0x11a
 800146a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0x00FF;
 8001470:	23ff      	movs	r3, #255	; 0xff
 8001472:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001480:	f000 fe62 	bl	8002148 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001484:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001488:	f7ff fabd 	bl	8000a06 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800148c:	2100      	movs	r1, #0
 800148e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001492:	f7ff fb7a 	bl	8000b8a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001496:	2100      	movs	r1, #0
 8001498:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800149c:	f7ff fb89 	bl	8000bb2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80014a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014a4:	f7ff fb97 	bl	8000bd6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff f9f1 	bl	80008ac <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 3755;
 80014ca:	f640 63ab 	movw	r3, #3755	; 0xeab
 80014ce:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 0x02FF;
 80014d4:	f240 23ff 	movw	r3, #767	; 0x2ff
 80014d8:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <MX_TIM3_Init+0x5c>)
 80014e4:	f000 fe30 	bl	8002148 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <MX_TIM3_Init+0x5c>)
 80014ea:	f7ff fa8c 	bl	8000a06 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80014ee:	2100      	movs	r1, #0
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM3_Init+0x5c>)
 80014f2:	f7ff fb4a 	bl	8000b8a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80014f6:	2100      	movs	r1, #0
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_TIM3_Init+0x5c>)
 80014fa:	f7ff fb5a 	bl	8000bb2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM3_Init+0x5c>)
 8001500:	f7ff fb69 	bl	8000bd6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40000400 	.word	0x40000400

08001510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001524:	2004      	movs	r0, #4
 8001526:	f7ff f9c1 	bl	80008ac <LL_APB1_GRP1_EnableClock>

  /* TIM4 DMA Init */
  
  /* TIM4_UP Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800152a:	2210      	movs	r2, #16
 800152c:	2107      	movs	r1, #7
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001530:	f7fe fef2 	bl	8000318 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001534:	2200      	movs	r2, #0
 8001536:	2107      	movs	r1, #7
 8001538:	481e      	ldr	r0, [pc, #120]	; (80015b4 <MX_TIM4_Init+0xa4>)
 800153a:	f7fe ffbb 	bl	80004b4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_CIRCULAR);
 800153e:	2220      	movs	r2, #32
 8001540:	2107      	movs	r1, #7
 8001542:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001544:	f7fe ff0c 	bl	8000360 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001548:	2200      	movs	r2, #0
 800154a:	2107      	movs	r1, #7
 800154c:	4819      	ldr	r0, [pc, #100]	; (80015b4 <MX_TIM4_Init+0xa4>)
 800154e:	f7fe ff29 	bl	80003a4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	2107      	movs	r1, #7
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001558:	f7fe ff46 	bl	80003e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_HALFWORD);
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	2107      	movs	r1, #7
 8001562:	4814      	ldr	r0, [pc, #80]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001564:	f7fe ff62 	bl	800042c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001568:	2200      	movs	r2, #0
 800156a:	2107      	movs	r1, #7
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_TIM4_Init+0xa4>)
 800156e:	f7fe ff7f 	bl	8000470 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1800;
 800157a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800157e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <MX_TIM4_Init+0xa8>)
 800158a:	f000 fddd 	bl	8002148 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <MX_TIM4_Init+0xa8>)
 8001590:	f7ff fa39 	bl	8000a06 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001594:	2100      	movs	r1, #0
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <MX_TIM4_Init+0xa8>)
 8001598:	f7ff faf7 	bl	8000b8a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800159c:	2100      	movs	r1, #0
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_TIM4_Init+0xa8>)
 80015a0:	f7ff fb07 	bl	8000bb2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_TIM4_Init+0xa8>)
 80015a6:	f7ff fb16 	bl	8000bd6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40000800 	.word	0x40000800

080015bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff f95b 	bl	800087c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80015c6:	f7fe fde5 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe33 	bl	800023c <NVIC_EncodePriority>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4619      	mov	r1, r3
 80015da:	200d      	movs	r0, #13
 80015dc:	f7fe fe04 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015e0:	200d      	movs	r0, #13
 80015e2:	f7fe fde5 	bl	80001b0 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015e6:	f7fe fdd5 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe fe23 	bl	800023c <NVIC_EncodePriority>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4619      	mov	r1, r3
 80015fa:	2011      	movs	r0, #17
 80015fc:	f7fe fdf4 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001600:	2011      	movs	r0, #17
 8001602:	f7fe fdd5 	bl	80001b0 <__NVIC_EnableIRQ>

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001620:	2020      	movs	r0, #32
 8001622:	f7ff f95b 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001626:	2004      	movs	r0, #4
 8001628:	f7ff f958 	bl	80008dc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800162c:	2008      	movs	r0, #8
 800162e:	f7ff f955 	bl	80008dc <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, OLED_RES_Pin|OLED_DC_Pin);
 8001632:	f641 0118 	movw	r1, #6168	; 0x1818
 8001636:	4823      	ldr	r0, [pc, #140]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001638:	f7ff fb16 	bl	8000c68 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(OLED_CS_GPIO_Port, OLED_CS_Pin);
 800163c:	f244 0140 	movw	r1, #16448	; 0x4040
 8001640:	4820      	ldr	r0, [pc, #128]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001642:	f7ff fb02 	bl	8000c4a <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin);
 8001646:	4920      	ldr	r1, [pc, #128]	; (80016c8 <MX_GPIO_Init+0xbc>)
 8001648:	4820      	ldr	r0, [pc, #128]	; (80016cc <MX_GPIO_Init+0xc0>)
 800164a:	f7ff fafe 	bl	8000c4a <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 800164e:	f640 0308 	movw	r3, #2056	; 0x808
 8001652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001654:	2301      	movs	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001658:	2302      	movs	r3, #2
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001666:	f000 fc36 	bl	8001ed6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 800166a:	f241 0310 	movw	r3, #4112	; 0x1010
 800166e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001670:	2301      	movs	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4810      	ldr	r0, [pc, #64]	; (80016c4 <MX_GPIO_Init+0xb8>)
 8001682:	f000 fc28 	bl	8001ed6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001686:	f244 0340 	movw	r3, #16448	; 0x4040
 800168a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800168c:	2301      	movs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001690:	2301      	movs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <MX_GPIO_Init+0xb8>)
 800169e:	f000 fc1a 	bl	8001ed6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDCARD_CS_Pin;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_GPIO_Init+0xbc>)
 80016a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016aa:	2302      	movs	r3, #2
 80016ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SDCARD_CS_GPIO_Port, &GPIO_InitStruct);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_GPIO_Init+0xc0>)
 80016b8:	f000 fc0d 	bl	8001ed6 <LL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40010800 	.word	0x40010800
 80016c8:	04100010 	.word	0x04100010
 80016cc:	40010c00 	.word	0x40010c00

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <__NVIC_EnableIRQ>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4906      	ldr	r1, [pc, #24]	; (8001710 <__NVIC_EnableIRQ+0x34>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_DisableIRQ>:
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db10      	blt.n	8001748 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4909      	ldr	r1, [pc, #36]	; (8001754 <__NVIC_DisableIRQ+0x40>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	3320      	adds	r3, #32
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001740:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001744:	f3bf 8f6f 	isb	sy
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <LL_DMA_EnableChannel>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	3b01      	subs	r3, #1
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LL_DMA_EnableChannel+0x38>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	3a01      	subs	r2, #1
 8001776:	4906      	ldr	r1, [pc, #24]	; (8001790 <LL_DMA_EnableChannel+0x38>)
 8001778:	5c8a      	ldrb	r2, [r1, r2]
 800177a:	4611      	mov	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	440a      	add	r2, r1
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	08004448 	.word	0x08004448

08001794 <LL_DMA_DisableChannel>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LL_DMA_DisableChannel+0x38>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	3a01      	subs	r2, #1
 80017b2:	4906      	ldr	r1, [pc, #24]	; (80017cc <LL_DMA_DisableChannel+0x38>)
 80017b4:	5c8a      	ldrb	r2, [r1, r2]
 80017b6:	4611      	mov	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	440a      	add	r2, r1
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	08004448 	.word	0x08004448

080017d0 <LL_DMA_SetMode>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3b01      	subs	r3, #1
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LL_DMA_SetMode+0x40>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	461a      	mov	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 0220 	bic.w	r2, r3, #32
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <LL_DMA_SetMode+0x40>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	4619      	mov	r1, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	440b      	add	r3, r1
 80017fe:	4619      	mov	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	08004448 	.word	0x08004448

08001814 <LL_DMA_SetDataLength>:
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <LL_DMA_SetDataLength+0x40>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	3a01      	subs	r2, #1
 8001838:	4906      	ldr	r1, [pc, #24]	; (8001854 <LL_DMA_SetDataLength+0x40>)
 800183a:	5c8a      	ldrb	r2, [r1, r2]
 800183c:	4611      	mov	r1, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	440a      	add	r2, r1
 8001842:	4611      	mov	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	08004448 	.word	0x08004448

08001858 <LL_DMA_SetMemoryAddress>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3b01      	subs	r3, #1
 8001868:	4a06      	ldr	r2, [pc, #24]	; (8001884 <LL_DMA_SetMemoryAddress+0x2c>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	461a      	mov	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	08004448 	.word	0x08004448

08001888 <LL_DMA_ClearFlag_TC3>:
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001896:	605a      	str	r2, [r3, #4]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <LL_DMA_ClearFlag_TC7>:
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b0:	605a      	str	r2, [r3, #4]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <LL_DMA_ClearFlag_HT3>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ca:	605a      	str	r2, [r3, #4]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <LL_DMA_ClearFlag_HT7>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018e4:	605a      	str	r2, [r3, #4]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <LL_DMA_DisableIT_TC+0x38>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	3a01      	subs	r2, #1
 800190e:	4906      	ldr	r1, [pc, #24]	; (8001928 <LL_DMA_DisableIT_TC+0x38>)
 8001910:	5c8a      	ldrb	r2, [r1, r2]
 8001912:	4611      	mov	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	440a      	add	r2, r1
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	08004448 	.word	0x08004448

0800192c <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <LL_DMA_DisableIT_HT+0x38>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	3a01      	subs	r2, #1
 800194a:	4906      	ldr	r1, [pc, #24]	; (8001964 <LL_DMA_DisableIT_HT+0x38>)
 800194c:	5c8a      	ldrb	r2, [r1, r2]
 800194e:	4611      	mov	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	440a      	add	r2, r1
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6013      	str	r3, [r2, #0]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	08004448 	.word	0x08004448

08001968 <LL_TIM_EnableCounter>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	601a      	str	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <LL_TIM_DisableCounter>:
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0201 	bic.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <LL_TIM_SetCounter>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <LL_TIM_ClearFlag_UPDATE>:
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f06f 0201 	mvn.w	r2, #1
 80019cc:	611a      	str	r2, [r3, #16]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <HardFault_Handler+0x4>

08001a0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <MemManage_Handler+0x4>

08001a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <BusFault_Handler+0x4>

08001a1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <UsageFault_Handler+0x4>

08001a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	// Clear both the half and full transfer flags, at it can be both that activated this buffer
	LL_DMA_ClearFlag_TC3(DMA1);
 8001a56:	485a      	ldr	r0, [pc, #360]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001a58:	f7ff ff16 	bl	8001888 <LL_DMA_ClearFlag_TC3>
	LL_DMA_ClearFlag_HT3(DMA1);
 8001a5c:	4858      	ldr	r0, [pc, #352]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001a5e:	f7ff ff2d 	bl	80018bc <LL_DMA_ClearFlag_HT3>
	// If the number if pixels sent is greater or equal to the frame's number of pixels, that
	// means it's time to wait for the sync timer and update the OLED.
	if(vid_number_of_send >= VID_FRAME_SIZE){
 8001a62:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <DMA1_Channel3_IRQHandler+0x174>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a6a:	db2f      	blt.n	8001acc <DMA1_Channel3_IRQHandler+0x7c>
		OLED_CS_1; // End communication to the OLED display
 8001a6c:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <DMA1_Channel3_IRQHandler+0x178>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <DMA1_Channel3_IRQHandler+0x178>)
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7a:	60d3      	str	r3, [r2, #12]
		while(LL_TIM_IsActiveFlag_UPDATE(TIM3) == 0x00); // Wait until the sync timer is done
 8001a7c:	bf00      	nop
 8001a7e:	4853      	ldr	r0, [pc, #332]	; (8001bcc <DMA1_Channel3_IRQHandler+0x17c>)
 8001a80:	f7ff ffaa 	bl	80019d8 <LL_TIM_IsActiveFlag_UPDATE>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f9      	beq.n	8001a7e <DMA1_Channel3_IRQHandler+0x2e>
		// Reset the timer and restart it
		LL_TIM_DisableCounter(TIM3);
 8001a8a:	4850      	ldr	r0, [pc, #320]	; (8001bcc <DMA1_Channel3_IRQHandler+0x17c>)
 8001a8c:	f7ff ff7b 	bl	8001986 <LL_TIM_DisableCounter>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 8001a90:	484e      	ldr	r0, [pc, #312]	; (8001bcc <DMA1_Channel3_IRQHandler+0x17c>)
 8001a92:	f7ff ff94 	bl	80019be <LL_TIM_ClearFlag_UPDATE>
		LL_TIM_SetCounter(TIM3, 0);
 8001a96:	2100      	movs	r1, #0
 8001a98:	484c      	ldr	r0, [pc, #304]	; (8001bcc <DMA1_Channel3_IRQHandler+0x17c>)
 8001a9a:	f7ff ff83 	bl	80019a4 <LL_TIM_SetCounter>
		LL_TIM_EnableCounter(TIM3);
 8001a9e:	484b      	ldr	r0, [pc, #300]	; (8001bcc <DMA1_Channel3_IRQHandler+0x17c>)
 8001aa0:	f7ff ff62 	bl	8001968 <LL_TIM_EnableCounter>

		vid_number_of_send = 0; // Reset the number of pixels sent to 0
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <DMA1_Channel3_IRQHandler+0x174>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
		// Restart a new OLED write command
		OLED_Driver_CUSTOM_RAM_Address(OLED_Y_MIN, OLED_Y_MAX, 0, 127);
 8001aaa:	237f      	movs	r3, #127	; 0x7f
 8001aac:	2200      	movs	r2, #0
 8001aae:	2171      	movs	r1, #113	; 0x71
 8001ab0:	200f      	movs	r0, #15
 8001ab2:	f001 f9ad 	bl	8002e10 <OLED_Driver_CUSTOM_RAM_Address>
		OLED_Driver_Write_Command(0x5C);
 8001ab6:	205c      	movs	r0, #92	; 0x5c
 8001ab8:	f001 f92e 	bl	8002d18 <OLED_Driver_Write_Command>
		OLED_DC_1;
 8001abc:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <DMA1_Channel3_IRQHandler+0x178>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <DMA1_Channel3_IRQHandler+0x178>)
 8001ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac6:	f043 0310 	orr.w	r3, r3, #16
 8001aca:	60d3      	str	r3, [r2, #12]
	}
	// Disable the DMA, update it with the new array's address and size, then enable it
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001acc:	2103      	movs	r1, #3
 8001ace:	483c      	ldr	r0, [pc, #240]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001ad0:	f7ff fe60 	bl	8001794 <LL_DMA_DisableChannel>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE]);
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <DMA1_Channel3_IRQHandler+0x180>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	025b      	lsls	r3, r3, #9
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <DMA1_Channel3_IRQHandler+0x184>)
 8001ae4:	4413      	add	r3, r2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2103      	movs	r1, #3
 8001aea:	4835      	ldr	r0, [pc, #212]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001aec:	f7ff feb4 	bl	8001858 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, VID_HALF_BUFFER_SIZE);
 8001af0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001af4:	2103      	movs	r1, #3
 8001af6:	4832      	ldr	r0, [pc, #200]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001af8:	f7ff fe8c 	bl	8001814 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001afc:	2103      	movs	r1, #3
 8001afe:	4830      	ldr	r0, [pc, #192]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001b00:	f7ff fe2a 	bl	8001758 <LL_DMA_EnableChannel>
	// Increment the buffer count variable. If it's equal to the total allocations (2), then set it to 0
	video_bufferCount++;
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <DMA1_Channel3_IRQHandler+0x180>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <DMA1_Channel3_IRQHandler+0x180>)
 8001b0c:	6013      	str	r3, [r2, #0]
	if(video_bufferCount == VID_NUMB_BUFFER){
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <DMA1_Channel3_IRQHandler+0x180>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d102      	bne.n	8001b1c <DMA1_Channel3_IRQHandler+0xcc>
		video_bufferCount = 0;
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <DMA1_Channel3_IRQHandler+0x180>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
	}
	// Add to the number of pixels sent what is to be sent out by the DMA (each pixel contains 2 byte)
	vid_number_of_send += VID_HALF_BUFFER_SIZE/2;
 8001b1c:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <DMA1_Channel3_IRQHandler+0x174>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <DMA1_Channel3_IRQHandler+0x174>)
 8001b26:	6013      	str	r3, [r2, #0]

	unsigned int f_size = 0;    // Placeholder for size of array written by FatFs
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
	// Disable channel 7's interupt to prevent both this and that interupt trying to read from FatFs at the
	// same time, read the data, then re-enable the interupt
	NVIC_DisableIRQ(DMA1_Channel7_IRQn);
 8001b2c:	2011      	movs	r0, #17
 8001b2e:	f7ff fdf1 	bl	8001714 <__NVIC_DisableIRQ>
	FRESULT res = f_read(&vid_fil,&vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE],VID_HALF_BUFFER_SIZE,&f_size); // Read part of file
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <DMA1_Channel3_IRQHandler+0x180>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <DMA1_Channel3_IRQHandler+0x184>)
 8001b42:	18d1      	adds	r1, r2, r3
 8001b44:	463b      	mov	r3, r7
 8001b46:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001b4a:	4823      	ldr	r0, [pc, #140]	; (8001bd8 <DMA1_Channel3_IRQHandler+0x188>)
 8001b4c:	f002 fb23 	bl	8004196 <f_read>
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001b54:	2011      	movs	r0, #17
 8001b56:	f7ff fdc1 	bl	80016dc <__NVIC_EnableIRQ>
	// If the file didn't read currently, just exit while turning off all interupts
	if(res != FR_OK){
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <DMA1_Channel3_IRQHandler+0x12a>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001b60:	2103      	movs	r1, #3
 8001b62:	4817      	ldr	r0, [pc, #92]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001b64:	f7ff fe16 	bl	8001794 <LL_DMA_DisableChannel>
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 8001b68:	2103      	movs	r1, #3
 8001b6a:	4815      	ldr	r0, [pc, #84]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001b6c:	f7ff fec0 	bl	80018f0 <LL_DMA_DisableIT_TC>
		LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_3);
 8001b70:	2103      	movs	r1, #3
 8001b72:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001b74:	f7ff feda 	bl	800192c <LL_DMA_DisableIT_HT>
		return;
 8001b78:	e01e      	b.n	8001bb8 <DMA1_Channel3_IRQHandler+0x168>
	}
	// If the FatFs written size is not what we expect or 0, that means it's the end of file
	if(f_size == 0 || f_size != VID_HALF_BUFFER_SIZE){
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <DMA1_Channel3_IRQHandler+0x138>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b86:	d017      	beq.n	8001bb8 <DMA1_Channel3_IRQHandler+0x168>
		end_of_video_file = 1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <DMA1_Channel3_IRQHandler+0x18c>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
		last_video_file_size = f_size;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <DMA1_Channel3_IRQHandler+0x190>)
 8001b94:	601a      	str	r2, [r3, #0]
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001b96:	2103      	movs	r1, #3
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001b9a:	f7ff fdfb 	bl	8001794 <LL_DMA_DisableChannel>
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001ba2:	f7ff fea5 	bl	80018f0 <LL_DMA_DisableIT_TC>
		LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_3);
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001baa:	f7ff febf 	bl	800192c <LL_DMA_DisableIT_HT>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8001bae:	2103      	movs	r1, #3
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <DMA1_Channel3_IRQHandler+0x170>)
 8001bb2:	f7ff fdd1 	bl	8001758 <LL_DMA_EnableChannel>
		return;
 8001bb6:	bf00      	nop
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	20000254 	.word	0x20000254
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	2000128c 	.word	0x2000128c
 8001bd4:	20001294 	.word	0x20001294
 8001bd8:	20001e94 	.word	0x20001e94
 8001bdc:	2000002c 	.word	0x2000002c
 8001be0:	20001290 	.word	0x20001290

08001be4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	// Clear both the half and full transfer flags, at it can be both that activated this buffer
  LL_DMA_ClearFlag_TC7(DMA1);
 8001bea:	482c      	ldr	r0, [pc, #176]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001bec:	f7ff fe59 	bl	80018a2 <LL_DMA_ClearFlag_TC7>
  LL_DMA_ClearFlag_HT7(DMA1);
 8001bf0:	482a      	ldr	r0, [pc, #168]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001bf2:	f7ff fe70 	bl	80018d6 <LL_DMA_ClearFlag_HT7>
  // Increment the buffer count variable. If it's equal to the total allocations (2), then set it to 0
  music_bufferCount++;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <DMA1_Channel7_IRQHandler+0xbc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <DMA1_Channel7_IRQHandler+0xbc>)
 8001bfe:	6013      	str	r3, [r2, #0]
	if(music_bufferCount == MUSIC_NUMB_BUFFER){
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <DMA1_Channel7_IRQHandler+0xbc>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d102      	bne.n	8001c0e <DMA1_Channel7_IRQHandler+0x2a>
		music_bufferCount = 0;
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <DMA1_Channel7_IRQHandler+0xbc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
	}

  unsigned int f_size = 0;    // Placeholder for size of array written by FatFs
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
  // Read and fill part of the audio buffer
  FRESULT res = f_read(&audio_fil,&musicBuffer[music_bufferCount*MUSIC_HALF_BUFFER_SIZE],MUSIC_HALF_BUFFER_SIZE,&f_size);
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <DMA1_Channel7_IRQHandler+0xbc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	02db      	lsls	r3, r3, #11
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <DMA1_Channel7_IRQHandler+0xc0>)
 8001c1a:	1899      	adds	r1, r3, r2
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c22:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <DMA1_Channel7_IRQHandler+0xc4>)
 8001c24:	f002 fab7 	bl	8004196 <f_read>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  // If the file didn't read currently, just exit while turning off all interupts
  if(res != FR_OK){
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <DMA1_Channel7_IRQHandler+0x68>
  	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001c32:	2107      	movs	r1, #7
 8001c34:	4819      	ldr	r0, [pc, #100]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c36:	f7ff fdad 	bl	8001794 <LL_DMA_DisableChannel>
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001c3a:	2107      	movs	r1, #7
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c3e:	f7ff fe57 	bl	80018f0 <LL_DMA_DisableIT_TC>
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_7);
 8001c42:	2107      	movs	r1, #7
 8001c44:	4815      	ldr	r0, [pc, #84]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c46:	f7ff fe71 	bl	800192c <LL_DMA_DisableIT_HT>
    return;
 8001c4a:	e023      	b.n	8001c94 <DMA1_Channel7_IRQHandler+0xb0>
  }
  // If the FatFs written size is not what we expect or 0, that means it's the end of file
  if(f_size == 0 || f_size != MUSIC_HALF_BUFFER_SIZE){
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <DMA1_Channel7_IRQHandler+0x76>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c58:	d01c      	beq.n	8001c94 <DMA1_Channel7_IRQHandler+0xb0>
    end_of_music_file = 1;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <DMA1_Channel7_IRQHandler+0xc8>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
    last_music_file_size = f_size;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <DMA1_Channel7_IRQHandler+0xcc>)
 8001c66:	601a      	str	r2, [r3, #0]
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001c68:	2107      	movs	r1, #7
 8001c6a:	480c      	ldr	r0, [pc, #48]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c6c:	f7ff fd92 	bl	8001794 <LL_DMA_DisableChannel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2107      	movs	r1, #7
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c76:	f7ff fdab 	bl	80017d0 <LL_DMA_SetMode>
    LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8001c7a:	2107      	movs	r1, #7
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c7e:	f7ff fe37 	bl	80018f0 <LL_DMA_DisableIT_TC>
    LL_DMA_DisableIT_HT(DMA1, LL_DMA_CHANNEL_7);
 8001c82:	2107      	movs	r1, #7
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c86:	f7ff fe51 	bl	800192c <LL_DMA_DisableIT_HT>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001c8a:	2107      	movs	r1, #7
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <DMA1_Channel7_IRQHandler+0xb8>)
 8001c8e:	f7ff fd63 	bl	8001758 <LL_DMA_EnableChannel>
    return;
 8001c92:	bf00      	nop
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	200020b4 	.word	0x200020b4
 8001ca4:	20000258 	.word	0x20000258
 8001ca8:	20000034 	.word	0x20000034
 8001cac:	200022e0 	.word	0x200022e0
 8001cb0:	20000030 	.word	0x20000030

08001cb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <SystemInit+0x5c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <SystemInit+0x5c>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <SystemInit+0x5c>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4911      	ldr	r1, [pc, #68]	; (8001d10 <SystemInit+0x5c>)
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <SystemInit+0x60>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <SystemInit+0x5c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <SystemInit+0x5c>)
 8001cd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <SystemInit+0x5c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SystemInit+0x5c>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <SystemInit+0x5c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <SystemInit+0x5c>)
 8001cf2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cf6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SystemInit+0x5c>)
 8001cfa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cfe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SystemInit+0x64>)
 8001d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d06:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	f8ff0000 	.word	0xf8ff0000
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d42:	f7ff ffb7 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f002 fb21 	bl	800438c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7fe ffb1 	bl	8000cb0 <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r3, =_sidata
 8001d50:	080044e0 	.word	0x080044e0
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d58:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001d5c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001d60:	200022f8 	.word	0x200022f8

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>

08001d66 <LL_GPIO_SetPinMode>:
{
 8001d66:	b490      	push	{r4, r7}
 8001d68:	b088      	sub	sp, #32
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	0e1b      	lsrs	r3, r3, #24
 8001d7a:	4413      	add	r3, r2
 8001d7c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	210f      	movs	r1, #15
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	61bb      	str	r3, [r7, #24]
  return result;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	6023      	str	r3, [r4, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc90      	pop	{r4, r7}
 8001dc8:	4770      	bx	lr

08001dca <LL_GPIO_SetPinSpeed>:
{
 8001dca:	b490      	push	{r4, r7}
 8001dcc:	b088      	sub	sp, #32
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0e1b      	lsrs	r3, r3, #24
 8001dde:	4413      	add	r3, r2
 8001de0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	613b      	str	r3, [r7, #16]
  return result;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	6023      	str	r3, [r4, #0]
}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc90      	pop	{r4, r7}
 8001e2c:	4770      	bx	lr

08001e2e <LL_GPIO_SetPinOutputType>:
{
 8001e2e:	b490      	push	{r4, r7}
 8001e30:	b088      	sub	sp, #32
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0e1b      	lsrs	r3, r3, #24
 8001e42:	4413      	add	r3, r2
 8001e44:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	613b      	str	r3, [r7, #16]
  return result;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	2104      	movs	r1, #4
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	61bb      	str	r3, [r7, #24]
  return result;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	6023      	str	r3, [r4, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc90      	pop	{r4, r7}
 8001e90:	4770      	bx	lr

08001e92 <LL_GPIO_SetPinPull>:
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	613b      	str	r3, [r7, #16]
  return result;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	60da      	str	r2, [r3, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b088      	sub	sp, #32
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	60fb      	str	r3, [r7, #12]
  return result;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001f00:	e040      	b.n	8001f84 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001f02:	2201      	movs	r2, #1
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	409a      	lsls	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d036      	beq.n	8001f7e <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b07      	cmp	r3, #7
 8001f14:	d806      	bhi.n	8001f24 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001f16:	f240 1201 	movw	r2, #257	; 0x101
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	e008      	b.n	8001f36 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3b08      	subs	r3, #8
 8001f28:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f34:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	69b9      	ldr	r1, [r7, #24]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff11 	bl	8001d66 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffa0 	bl	8001e92 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d003      	beq.n	8001f62 <LL_GPIO_Init+0x8c>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	d10d      	bne.n	8001f7e <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	461a      	mov	r2, r3
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff2d 	bl	8001dca <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	461a      	mov	r2, r3
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff58 	bl	8001e2e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1b8      	bne.n	8001f02 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <LL_SPI_IsEnabled>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d101      	bne.n	8001fb2 <LL_SPI_IsEnabled+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_SPI_IsEnabled+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <LL_SPI_SetCRCPolynomial>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffd5 	bl	8001f9a <LL_SPI_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d139      	bne.n	800206a <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffe:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6811      	ldr	r1, [r2, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	6852      	ldr	r2, [r2, #4]
 800200a:	4311      	orrs	r1, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	6892      	ldr	r2, [r2, #8]
 8002010:	4311      	orrs	r1, r2
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	4311      	orrs	r1, r2
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6912      	ldr	r2, [r2, #16]
 800201c:	4311      	orrs	r1, r2
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	6952      	ldr	r2, [r2, #20]
 8002022:	4311      	orrs	r1, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	6992      	ldr	r2, [r2, #24]
 8002028:	4311      	orrs	r1, r2
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	69d2      	ldr	r2, [r2, #28]
 800202e:	4311      	orrs	r1, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6a12      	ldr	r2, [r2, #32]
 8002034:	430a      	orrs	r2, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 0204 	bic.w	r2, r3, #4
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002058:	d105      	bne.n	8002066 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffac 	bl	8001fbe <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <LL_TIM_SetPrescaler>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <LL_TIM_SetAutoReload>:
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <LL_TIM_SetRepetitionCounter>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <LL_TIM_OC_SetCompareCH1>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <LL_TIM_OC_SetCompareCH2>:
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <LL_TIM_OC_SetCompareCH3>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <LL_TIM_OC_SetCompareCH4>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	615a      	str	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <LL_TIM_Init+0xb0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <LL_TIM_Init+0x30>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d007      	beq.n	8002178 <LL_TIM_Init+0x30>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <LL_TIM_Init+0xb4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <LL_TIM_Init+0x30>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <LL_TIM_Init+0xb8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <LL_TIM_Init+0xb0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <LL_TIM_Init+0x5e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d007      	beq.n	80021a6 <LL_TIM_Init+0x5e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <LL_TIM_Init+0xb4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <LL_TIM_Init+0x5e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <LL_TIM_Init+0xb8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d106      	bne.n	80021b4 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff64 	bl	800208e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff51 	bl	8002074 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <LL_TIM_Init+0xb0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d105      	bne.n	80021e6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	7c1b      	ldrb	r3, [r3, #16]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff61 	bl	80020a8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff9f 	bl	800212a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800

08002204 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d012      	beq.n	8002240 <LL_TIM_OC_Init+0x3c>
 800221a:	2b10      	cmp	r3, #16
 800221c:	d802      	bhi.n	8002224 <LL_TIM_OC_Init+0x20>
 800221e:	2b01      	cmp	r3, #1
 8002220:	d007      	beq.n	8002232 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002222:	e022      	b.n	800226a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002228:	d011      	beq.n	800224e <LL_TIM_OC_Init+0x4a>
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222e:	d015      	beq.n	800225c <LL_TIM_OC_Init+0x58>
      break;
 8002230:	e01b      	b.n	800226a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f865 	bl	8002304 <OC1Config>
 800223a:	4603      	mov	r3, r0
 800223c:	75fb      	strb	r3, [r7, #23]
      break;
 800223e:	e014      	b.n	800226a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8c4 	bl	80023d0 <OC2Config>
 8002248:	4603      	mov	r3, r0
 800224a:	75fb      	strb	r3, [r7, #23]
      break;
 800224c:	e00d      	b.n	800226a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f927 	bl	80024a4 <OC3Config>
 8002256:	4603      	mov	r3, r0
 8002258:	75fb      	strb	r3, [r7, #23]
      break;
 800225a:	e006      	b.n	800226a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f98a 	bl	8002578 <OC4Config>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]
      break;
 8002268:	bf00      	nop
  }

  return result;
 800226a:	7dfb      	ldrb	r3, [r7, #23]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	7b12      	ldrb	r2, [r2, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	89d2      	ldrh	r2, [r2, #14]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	f023 0201 	bic.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f023 0202 	bic.w	r2, r3, #2
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f023 0201 	bic.w	r2, r3, #1
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <OC1Config+0xc8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d11e      	bne.n	80023a4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f023 0208 	bic.w	r2, r3, #8
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f023 0204 	bic.w	r2, r3, #4
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fe83 	bl	80020c2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40012c00 	.word	0x40012c00

080023d0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0210 	bic.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0220 	bic.w	r2, r3, #32
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0210 	bic.w	r2, r3, #16
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <OC2Config+0xd0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d11f      	bne.n	8002478 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	019b      	lsls	r3, r3, #6
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	019b      	lsls	r3, r3, #6
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fe26 	bl	80020dc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <OC3Config+0xd0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11f      	bne.n	800254a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	015b      	lsls	r3, r3, #5
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff fdca 	bl	80020f6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40012c00 	.word	0x40012c00

08002578 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	031b      	lsls	r3, r3, #12
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <OC4Config+0xa0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d107      	bne.n	80025f0 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	019b      	lsls	r3, r3, #6
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fd84 	bl	8002110 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40012c00 	.word	0x40012c00

0800261c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <LL_InitTick+0x30>)
 8002630:	3b01      	subs	r3, #1
 8002632:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <LL_InitTick+0x30>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <LL_InitTick+0x30>)
 800263c:	2205      	movs	r2, #5
 800263e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e010 	.word	0xe000e010

08002650 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002658:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ffdd 	bl	800261c <LL_InitTick>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002674:	4a03      	ldr	r2, [pc, #12]	; (8002684 <LL_SetSystemCoreClock+0x18>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000

08002688 <LL_TIM_EnableCounter>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <LL_TIM_SetPrescaler>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <LL_TIM_SetAutoReload>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <initDelay>:
#include "delay.h"

void initDelay(void){ // Function to initialize delay(Using TIMER2 in this case)
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
	TIM2->CR1 |= (1<<2); // Set so only overflow/underflow generates event
	TIM2->CR1 &= ~(1<<3); //Turn off one-pulse mode
	TIM2->ARR = 0x00FF; // Set count value to 256
	TIM2->PSC = 282; // Set prescaler to 1mS
	TIM2->EGR |= (1<<0);// Update register*/
	LL_TIM_SetAutoReload(TIM2, 0x00FF);
 80026de:	21ff      	movs	r1, #255	; 0xff
 80026e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026e4:	f7ff ffec 	bl	80026c0 <LL_TIM_SetAutoReload>
	LL_TIM_SetPrescaler(TIM2, 282);
 80026e8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80026ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026f0:	f7ff ffd9 	bl	80026a6 <LL_TIM_SetPrescaler>
	LL_TIM_EnableCounter(TIM2);
 80026f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80026f8:	f7ff ffc6 	bl	8002688 <LL_TIM_EnableCounter>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <delayMs>:
void delayMs(volatile int ms){
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0x00; // Clear the timer
 8002708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= (1<<0); // Enable Counter
 8002710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]
	while(ms != 0){
 8002720:	e00e      	b.n	8002740 <delayMs+0x40>
		while((TIM2->SR & 0x01) == 0x00){
 8002722:	bf00      	nop
 8002724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f8      	beq.n	8002724 <delayMs+0x24>

		} // Wait until update
		ms--;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3b01      	subs	r3, #1
 8002736:	607b      	str	r3, [r7, #4]
		TIM2->SR = 0x00; // Clear statue
 8002738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
	while(ms != 0){
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1ed      	bne.n	8002722 <delayMs+0x22>
	}
	TIM2->SR = 0x00; // Clear statue
 8002746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
	TIM2->CR1 &= ~(1<<0); // Disable Counter
 800274e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6013      	str	r3, [r2, #0]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <LL_DMA_EnableChannel>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	3b01      	subs	r3, #1
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <LL_DMA_EnableChannel+0x38>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	461a      	mov	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	3a01      	subs	r2, #1
 8002786:	4906      	ldr	r1, [pc, #24]	; (80027a0 <LL_DMA_EnableChannel+0x38>)
 8002788:	5c8a      	ldrb	r2, [r1, r2]
 800278a:	4611      	mov	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	440a      	add	r2, r1
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6013      	str	r3, [r2, #0]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	08004450 	.word	0x08004450

080027a4 <LL_DMA_DisableChannel>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <LL_DMA_DisableChannel+0x38>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	3a01      	subs	r2, #1
 80027c2:	4906      	ldr	r1, [pc, #24]	; (80027dc <LL_DMA_DisableChannel+0x38>)
 80027c4:	5c8a      	ldrb	r2, [r1, r2]
 80027c6:	4611      	mov	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	440a      	add	r2, r1
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6013      	str	r3, [r2, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	08004450 	.word	0x08004450

080027e0 <LL_DMA_SetDataLength>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <LL_DMA_SetDataLength+0x40>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	461a      	mov	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	3a01      	subs	r2, #1
 8002804:	4906      	ldr	r1, [pc, #24]	; (8002820 <LL_DMA_SetDataLength+0x40>)
 8002806:	5c8a      	ldrb	r2, [r1, r2]
 8002808:	4611      	mov	r1, r2
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	440a      	add	r2, r1
 800280e:	4611      	mov	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	08004450 	.word	0x08004450

08002824 <LL_DMA_SetMemoryAddress>:
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3b01      	subs	r3, #1
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <LL_DMA_SetMemoryAddress+0x2c>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	08004450 	.word	0x08004450

08002854 <LL_DMA_IsActiveFlag_TC4>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <LL_DMA_ClearFlag_TC4>:
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002888:	605a      	str	r2, [r3, #4]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <LL_SPI_EnableDMAReq_RX>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	605a      	str	r2, [r3, #4]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <LL_SPI_DisableDMAReq_RX>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 0201 	bic.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	605a      	str	r2, [r3, #4]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <LL_GPIO_SetOutputPin>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_GPIO_ResetOutputPin>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	615a      	str	r2, [r3, #20]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <spiTransfer>:
void sendcommandanddummy(volatile uint8_t command, volatile int arguments, volatile uint8_t numberofresponse);
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

uint8_t spiTransfer(volatile uint8_t data){
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
	SPI2->DR = data; // Write data into the data register
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <spiTransfer+0x30>)
 800291c:	60da      	str	r2, [r3, #12]
	//while( (SPI2->SR & (1<<1)) == 0){} // Wait until the TXE register is empty
	while( (SPI2->SR & (1<<0)) == 0);
 800291e:	bf00      	nop
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <spiTransfer+0x30>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f9      	beq.n	8002920 <spiTransfer+0x14>
	//while( (SPI2->SR & (1<<7)) != 0){}
	return SPI2->DR;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <spiTransfer+0x30>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	b2db      	uxtb	r3, r3

//	LL_SPI_TransmitData8(SPI2, data);
//	while(LL_SPI_IsActiveFlag_RXNE(SPI2) == 0);
//	while( (SPI2->SR & (1<<0)) == 0);
//	return LL_SPI_ReceiveData8(SPI2);
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40003800 	.word	0x40003800

08002940 <sendcommandanddummy>:

void sendcommandanddummy(uint8_t command, int arguments, uint8_t numberofresponse){
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	71bb      	strb	r3, [r7, #6]
	uint8_t datatosend[6];

	//Dummy Clock
	//spiTransfer(0xFF);

	datatosend[0] = 0x40 | command;
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002956:	b2db      	uxtb	r3, r3
 8002958:	733b      	strb	r3, [r7, #12]
	for(int i=0;i<4;i++){
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e014      	b.n	800298a <sendcommandanddummy+0x4a>
		datatosend[4-i] = ( arguments & ( 0xFF<<(i*8) ) ) >> (i*8);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	409a      	lsls	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	401a      	ands	r2, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	411a      	asrs	r2, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f1c3 0304 	rsb	r3, r3, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f107 0120 	add.w	r1, r7, #32
 800297e:	440b      	add	r3, r1
 8002980:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(int i=0;i<4;i++){
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b03      	cmp	r3, #3
 800298e:	dde7      	ble.n	8002960 <sendcommandanddummy+0x20>
	}
	datatosend[5] = crcvalue; //Suppose to be CRC check, but this software is not using it
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <sendcommandanddummy+0xb4>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	747b      	strb	r3, [r7, #17]

	for(uint8_t i=0;i<6;i++){
 8002998:	2300      	movs	r3, #0
 800299a:	76fb      	strb	r3, [r7, #27]
 800299c:	e00b      	b.n	80029b6 <sendcommandanddummy+0x76>
		spiTransfer( datatosend[i]); // Write data into the data register
 800299e:	7efb      	ldrb	r3, [r7, #27]
 80029a0:	f107 0220 	add.w	r2, r7, #32
 80029a4:	4413      	add	r3, r2
 80029a6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ffae 	bl	800290c <spiTransfer>
	for(uint8_t i=0;i<6;i++){
 80029b0:	7efb      	ldrb	r3, [r7, #27]
 80029b2:	3301      	adds	r3, #1
 80029b4:	76fb      	strb	r3, [r7, #27]
 80029b6:	7efb      	ldrb	r3, [r7, #27]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d9f0      	bls.n	800299e <sendcommandanddummy+0x5e>
	}

	//Dummy Clock
	spiTransfer(0xFF);
 80029bc:	20ff      	movs	r0, #255	; 0xff
 80029be:	f7ff ffa5 	bl	800290c <spiTransfer>
	for(int i=0;i<numberofresponse;i++){
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e00c      	b.n	80029e2 <sendcommandanddummy+0xa2>
		returneddata[i] = spiTransfer(0xFF);
 80029c8:	20ff      	movs	r0, #255	; 0xff
 80029ca:	f7ff ff9f 	bl	800290c <spiTransfer>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <sendcommandanddummy+0xb8>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	4413      	add	r3, r2
 80029d8:	460a      	mov	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<numberofresponse;i++){
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3301      	adds	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	79bb      	ldrb	r3, [r7, #6]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	dbee      	blt.n	80029c8 <sendcommandanddummy+0x88>
	}
}
 80029ea:	bf00      	nop
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000020 	.word	0x20000020
 80029f8:	200022e4 	.word	0x200022e4

080029fc <disk_status>:


DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
	return 0;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive number to identify the drive */
)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
	SPI2->CR1 &= ~(0b111<<3); // Set baud rate to MAX4
 8002a1e:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <disk_initialize+0x1ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <disk_initialize+0x1ac>)
 8002a24:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002a28:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (0b110<<3); // Set baud rate to 250Khz (to start up the SD card)
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <disk_initialize+0x1ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a64      	ldr	r2, [pc, #400]	; (8002bc0 <disk_initialize+0x1ac>)
 8002a30:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a34:	6013      	str	r3, [r2, #0]
	//Pulse the SD card 74+ time to wake it up
	SS_HIGH //SS pin HIGH
 8002a36:	4963      	ldr	r1, [pc, #396]	; (8002bc4 <disk_initialize+0x1b0>)
 8002a38:	4863      	ldr	r0, [pc, #396]	; (8002bc8 <disk_initialize+0x1b4>)
 8002a3a:	f7ff ff49 	bl	80028d0 <LL_GPIO_SetOutputPin>

	for(uint8_t i=0;i<20;i++){ //Keep clocking the SD card until it wakes up
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]
 8002a42:	e005      	b.n	8002a50 <disk_initialize+0x3c>
		spiTransfer(0xFF);
 8002a44:	20ff      	movs	r0, #255	; 0xff
 8002a46:	f7ff ff61 	bl	800290c <spiTransfer>
	for(uint8_t i=0;i<20;i++){ //Keep clocking the SD card until it wakes up
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	75fb      	strb	r3, [r7, #23]
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b13      	cmp	r3, #19
 8002a54:	d9f6      	bls.n	8002a44 <disk_initialize+0x30>
	}
	//Send CMD0 to reset the SDcard
	crcvalue = 0x95;
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <disk_initialize+0x1b8>)
 8002a58:	2295      	movs	r2, #149	; 0x95
 8002a5a:	701a      	strb	r2, [r3, #0]
	SS_LOW //SS pin LOW
 8002a5c:	4959      	ldr	r1, [pc, #356]	; (8002bc4 <disk_initialize+0x1b0>)
 8002a5e:	485a      	ldr	r0, [pc, #360]	; (8002bc8 <disk_initialize+0x1b4>)
 8002a60:	f7ff ff45 	bl	80028ee <LL_GPIO_ResetOutputPin>
	sendcommandanddummy(0, 0, 1);
 8002a64:	2201      	movs	r2, #1
 8002a66:	2100      	movs	r1, #0
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff ff69 	bl	8002940 <sendcommandanddummy>
	if(returneddata[0] != 1){
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <disk_initialize+0x1bc>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d014      	beq.n	8002aa2 <disk_initialize+0x8e>
	  uint8_t temp;
	  for(int i=0;i<20;i++){
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	e00a      	b.n	8002a94 <disk_initialize+0x80>
	    temp = spiTransfer(0xFF);
 8002a7e:	20ff      	movs	r0, #255	; 0xff
 8002a80:	f7ff ff44 	bl	800290c <spiTransfer>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]
	    if(temp == 0x01){break;}
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d006      	beq.n	8002a9c <disk_initialize+0x88>
	  for(int i=0;i<20;i++){
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3301      	adds	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b13      	cmp	r3, #19
 8002a98:	ddf1      	ble.n	8002a7e <disk_initialize+0x6a>
 8002a9a:	e000      	b.n	8002a9e <disk_initialize+0x8a>
	    if(temp == 0x01){break;}
 8002a9c:	bf00      	nop
	  }
	  return 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e08a      	b.n	8002bb8 <disk_initialize+0x1a4>
	}
	while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8002aa2:	bf00      	nop
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <disk_initialize+0x1ac>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <disk_initialize+0x90>
	SS_HIGH //SS pin HIGH
 8002ab0:	4944      	ldr	r1, [pc, #272]	; (8002bc4 <disk_initialize+0x1b0>)
 8002ab2:	4845      	ldr	r0, [pc, #276]	; (8002bc8 <disk_initialize+0x1b4>)
 8002ab4:	f7ff ff0c 	bl	80028d0 <LL_GPIO_SetOutputPin>
//	if(returneddata[0] != 0x01){
//	  return 0;
//	}

	//Send CMD8
	crcvalue = 0x87;
 8002ab8:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <disk_initialize+0x1b8>)
 8002aba:	2287      	movs	r2, #135	; 0x87
 8002abc:	701a      	strb	r2, [r3, #0]
	SS_LOW //SS pin LOW
 8002abe:	4941      	ldr	r1, [pc, #260]	; (8002bc4 <disk_initialize+0x1b0>)
 8002ac0:	4841      	ldr	r0, [pc, #260]	; (8002bc8 <disk_initialize+0x1b4>)
 8002ac2:	f7ff ff14 	bl	80028ee <LL_GPIO_ResetOutputPin>
	sendcommandanddummy(8, 0x1AA, 5);
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002acc:	2008      	movs	r0, #8
 8002ace:	f7ff ff37 	bl	8002940 <sendcommandanddummy>
	while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8002ad2:	bf00      	nop
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <disk_initialize+0x1ac>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f9      	bne.n	8002ad4 <disk_initialize+0xc0>
	SS_HIGH //SS pin HIGH
 8002ae0:	4938      	ldr	r1, [pc, #224]	; (8002bc4 <disk_initialize+0x1b0>)
 8002ae2:	4839      	ldr	r0, [pc, #228]	; (8002bc8 <disk_initialize+0x1b4>)
 8002ae4:	f7ff fef4 	bl	80028d0 <LL_GPIO_SetOutputPin>

	crcvalue = 0x01;
 8002ae8:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <disk_initialize+0x1b8>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
	//Send ACMD41 (So CMD55 + CMD41) and wait until it recieves 0x00
	SS_LOW //SS pin LOW
 8002aee:	4935      	ldr	r1, [pc, #212]	; (8002bc4 <disk_initialize+0x1b0>)
 8002af0:	4835      	ldr	r0, [pc, #212]	; (8002bc8 <disk_initialize+0x1b4>)
 8002af2:	f7ff fefc 	bl	80028ee <LL_GPIO_ResetOutputPin>
	sendcommandanddummy(55, 0, 1);
 8002af6:	2201      	movs	r2, #1
 8002af8:	2100      	movs	r1, #0
 8002afa:	2037      	movs	r0, #55	; 0x37
 8002afc:	f7ff ff20 	bl	8002940 <sendcommandanddummy>
	if(returneddata[0] == 0x05){
 8002b00:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <disk_initialize+0x1bc>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d11a      	bne.n	8002b40 <disk_initialize+0x12c>
	    sendcommandanddummy(1, 0, 1);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7ff ff16 	bl	8002940 <sendcommandanddummy>
	    while(returneddata[0] != 0x00){
 8002b14:	e00e      	b.n	8002b34 <disk_initialize+0x120>
	      delayMs(20);
 8002b16:	2014      	movs	r0, #20
 8002b18:	f7ff fdf2 	bl	8002700 <delayMs>
	      sendcommandanddummy(1, 0, 1);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2100      	movs	r1, #0
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7ff ff0d 	bl	8002940 <sendcommandanddummy>
	      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8002b26:	bf00      	nop
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <disk_initialize+0x1ac>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <disk_initialize+0x114>
	    while(returneddata[0] != 0x00){
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <disk_initialize+0x1bc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1eb      	bne.n	8002b16 <disk_initialize+0x102>
 8002b3e:	e020      	b.n	8002b82 <disk_initialize+0x16e>
	    }
  }
	else{
	  sendcommandanddummy(41, 0x40000000, 1);
 8002b40:	2201      	movs	r2, #1
 8002b42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b46:	2029      	movs	r0, #41	; 0x29
 8002b48:	f7ff fefa 	bl	8002940 <sendcommandanddummy>
    while(returneddata[0] != 0x00){
 8002b4c:	e014      	b.n	8002b78 <disk_initialize+0x164>
      delayMs(20);
 8002b4e:	2014      	movs	r0, #20
 8002b50:	f7ff fdd6 	bl	8002700 <delayMs>
      sendcommandanddummy(55, 0, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	2100      	movs	r1, #0
 8002b58:	2037      	movs	r0, #55	; 0x37
 8002b5a:	f7ff fef1 	bl	8002940 <sendcommandanddummy>
      sendcommandanddummy(41, 0x40000000, 1);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b64:	2029      	movs	r0, #41	; 0x29
 8002b66:	f7ff feeb 	bl	8002940 <sendcommandanddummy>
      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8002b6a:	bf00      	nop
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <disk_initialize+0x1ac>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f9      	bne.n	8002b6c <disk_initialize+0x158>
    while(returneddata[0] != 0x00){
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <disk_initialize+0x1bc>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <disk_initialize+0x13a>
    }
	}
	crcvalue = 0xFF;
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <disk_initialize+0x1b8>)
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	701a      	strb	r2, [r3, #0]
	sendcommandanddummy(16,512,1); //Set blocks to 512 bytes
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8e:	2010      	movs	r0, #16
 8002b90:	f7ff fed6 	bl	8002940 <sendcommandanddummy>

	while( (SPI2->SR & (1<<7)) != 0); //Wait until bus is cleared
 8002b94:	bf00      	nop
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <disk_initialize+0x1ac>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f9      	bne.n	8002b96 <disk_initialize+0x182>
	SS_HIGH //SS pin HIGH
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <disk_initialize+0x1b0>)
 8002ba4:	4808      	ldr	r0, [pc, #32]	; (8002bc8 <disk_initialize+0x1b4>)
 8002ba6:	f7ff fe93 	bl	80028d0 <LL_GPIO_SetOutputPin>
	SPI2->CR1 &= ~(0b111<<3); // Set baud rate to MAX4
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <disk_initialize+0x1ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <disk_initialize+0x1ac>)
 8002bb0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002bb4:	6013      	str	r3, [r2, #0]
	//SPI2->CR1 |= (0b110<<3);
	return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40003800 	.word	0x40003800
 8002bc4:	04100010 	.word	0x04100010
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	20000020 	.word	0x20000020
 8002bd0:	200022e4 	.word	0x200022e4

08002bd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]
	SS_LOW
 8002be4:	4948      	ldr	r1, [pc, #288]	; (8002d08 <disk_read+0x134>)
 8002be6:	4849      	ldr	r0, [pc, #292]	; (8002d0c <disk_read+0x138>)
 8002be8:	f7ff fe81 	bl	80028ee <LL_GPIO_ResetOutputPin>

  sendcommandanddummy(23,count,1);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	2017      	movs	r0, #23
 8002bf4:	f7ff fea4 	bl	8002940 <sendcommandanddummy>

	sendcommandanddummy(18,sector*512,1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	025b      	lsls	r3, r3, #9
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4619      	mov	r1, r3
 8002c00:	2012      	movs	r0, #18
 8002c02:	f7ff fe9d 	bl	8002940 <sendcommandanddummy>
	//Dummy Clock
	spiTransfer(0xFF);
 8002c06:	20ff      	movs	r0, #255	; 0xff
 8002c08:	f7ff fe80 	bl	800290c <spiTransfer>
	//SPI2->DR = 0xFF;

	for(volatile int j=0;j<count;j++){
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e057      	b.n	8002cc2 <disk_read+0xee>

		while( spiTransfer(0xFF) != 0xFE); //Wait until data token is recieved
 8002c12:	bf00      	nop
 8002c14:	20ff      	movs	r0, #255	; 0xff
 8002c16:	f7ff fe79 	bl	800290c <spiTransfer>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2bfe      	cmp	r3, #254	; 0xfe
 8002c1e:	d1f9      	bne.n	8002c14 <disk_read+0x40>

		while( (SPI2->SR & (1<<7)) != 0);
 8002c20:	bf00      	nop
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <disk_read+0x13c>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f9      	bne.n	8002c22 <disk_read+0x4e>

		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_4, buff+(512U*j));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	025b      	lsls	r3, r3, #9
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4413      	add	r3, r2
 8002c36:	461a      	mov	r2, r3
 8002c38:	2104      	movs	r1, #4
 8002c3a:	4836      	ldr	r0, [pc, #216]	; (8002d14 <disk_read+0x140>)
 8002c3c:	f7ff fdf2 	bl	8002824 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, 512);
 8002c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c44:	2104      	movs	r1, #4
 8002c46:	4833      	ldr	r0, [pc, #204]	; (8002d14 <disk_read+0x140>)
 8002c48:	f7ff fdca 	bl	80027e0 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	4831      	ldr	r0, [pc, #196]	; (8002d14 <disk_read+0x140>)
 8002c50:	f7ff fd8a 	bl	8002768 <LL_DMA_EnableChannel>
		LL_SPI_EnableDMAReq_RX(SPI2);
 8002c54:	482e      	ldr	r0, [pc, #184]	; (8002d10 <disk_read+0x13c>)
 8002c56:	f7ff fe1d 	bl	8002894 <LL_SPI_EnableDMAReq_RX>

		for(int i=0;i<512;i++){
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e00c      	b.n	8002c7a <disk_read+0xa6>
			SPI2->DR = 0xFF; // Write data into the data register
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <disk_read+0x13c>)
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	60da      	str	r2, [r3, #12]
			while( (SPI2->SR & (1<<1)) == 0); // Wait until the TXE register is empty
 8002c66:	bf00      	nop
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <disk_read+0x13c>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f9      	beq.n	8002c68 <disk_read+0x94>
		for(int i=0;i<512;i++){
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c80:	dbee      	blt.n	8002c60 <disk_read+0x8c>
		}
		while(1){		// Check if DMA is still doing thing from last request
			if(LL_DMA_IsActiveFlag_TC4(DMA1) != 0){
 8002c82:	4824      	ldr	r0, [pc, #144]	; (8002d14 <disk_read+0x140>)
 8002c84:	f7ff fde6 	bl	8002854 <LL_DMA_IsActiveFlag_TC4>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f9      	beq.n	8002c82 <disk_read+0xae>
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 8002c8e:	2104      	movs	r1, #4
 8002c90:	4820      	ldr	r0, [pc, #128]	; (8002d14 <disk_read+0x140>)
 8002c92:	f7ff fd87 	bl	80027a4 <LL_DMA_DisableChannel>
				LL_DMA_ClearFlag_TC4(DMA1);
 8002c96:	481f      	ldr	r0, [pc, #124]	; (8002d14 <disk_read+0x140>)
 8002c98:	f7ff fdef 	bl	800287a <LL_DMA_ClearFlag_TC4>
				break;
 8002c9c:	bf00      	nop
			}
		}

		LL_SPI_DisableDMAReq_RX(SPI2);
 8002c9e:	481c      	ldr	r0, [pc, #112]	; (8002d10 <disk_read+0x13c>)
 8002ca0:	f7ff fe07 	bl	80028b2 <LL_SPI_DisableDMAReq_RX>

		//while( (SPI2->SR & (1<<7)) != 0);
		//To get CRC, which we will not use
		for(int i=0;i<2;i++){
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e005      	b.n	8002cb6 <disk_read+0xe2>
			spiTransfer(0xFF);
 8002caa:	20ff      	movs	r0, #255	; 0xff
 8002cac:	f7ff fe2e 	bl	800290c <spiTransfer>
		for(int i=0;i<2;i++){
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	ddf6      	ble.n	8002caa <disk_read+0xd6>
	for(volatile int j=0;j<count;j++){
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d8a2      	bhi.n	8002c12 <disk_read+0x3e>
		}
	}
	sendcommandanddummy(12,sector,0); // Stop the multiple block read
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	200c      	movs	r0, #12
 8002cd4:	f7ff fe34 	bl	8002940 <sendcommandanddummy>
	while( spiTransfer(0xFF) == 0x00 ){} //Wait until data token is recieved
 8002cd8:	bf00      	nop
 8002cda:	20ff      	movs	r0, #255	; 0xff
 8002cdc:	f7ff fe16 	bl	800290c <spiTransfer>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f9      	beq.n	8002cda <disk_read+0x106>
	while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8002ce6:	bf00      	nop
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <disk_read+0x13c>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <disk_read+0x114>
	SS_HIGH
 8002cf4:	4904      	ldr	r1, [pc, #16]	; (8002d08 <disk_read+0x134>)
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <disk_read+0x138>)
 8002cf8:	f7ff fdea 	bl	80028d0 <LL_GPIO_SetOutputPin>
	return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	04100010 	.word	0x04100010
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	40003800 	.word	0x40003800
 8002d14:	40020000 	.word	0x40020000

08002d18 <OLED_Driver_Write_Command>:
#include "display.h"

volatile uint8_t color_byte[2],color_fill_byte[2];


void OLED_Driver_Write_Command(volatile uint8_t cmd)  {
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]

  OLED_CS_0;
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <OLED_Driver_Write_Command+0x4c>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <OLED_Driver_Write_Command+0x4c>)
 8002d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d30:	60d3      	str	r3, [r2, #12]
  OLED_DC_0;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <OLED_Driver_Write_Command+0x4c>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <OLED_Driver_Write_Command+0x4c>)
 8002d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	60d3      	str	r3, [r2, #12]
  SPI_Write_Byte(cmd);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <OLED_Driver_Write_Command+0x50>)
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	bf00      	nop
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <OLED_Driver_Write_Command+0x50>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f9      	bne.n	8002d4c <OLED_Driver_Write_Command+0x34>

}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40010800 	.word	0x40010800
 8002d68:	40013000 	.word	0x40013000

08002d6c <OLED_Driver_Write_Data>:

void OLED_Driver_Write_Data(volatile uint8_t dat) {
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]

  OLED_CS_0;
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <OLED_Driver_Write_Data+0x4c>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <OLED_Driver_Write_Data+0x4c>)
 8002d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d84:	60d3      	str	r3, [r2, #12]
  OLED_DC_1;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <OLED_Driver_Write_Data+0x4c>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <OLED_Driver_Write_Data+0x4c>)
 8002d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	60d3      	str	r3, [r2, #12]
  SPI_Write_Byte(dat);
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <OLED_Driver_Write_Data+0x50>)
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	bf00      	nop
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <OLED_Driver_Write_Data+0x50>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f9      	bne.n	8002da0 <OLED_Driver_Write_Data+0x34>

}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010800 	.word	0x40010800
 8002dbc:	40013000 	.word	0x40013000

08002dc0 <OLED_Driver_RAM_Address>:
void OLED_Driver_Set_FillColor(volatile uint16_t color)  {
  color_fill_byte[0] = (uint8_t)(color >> 8);
  color_fill_byte[1] = (uint8_t)(color & 0x00ff);
}

void OLED_Driver_RAM_Address(void)  {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0

  OLED_Driver_Write_Command(0x15);
 8002dc4:	2015      	movs	r0, #21
 8002dc6:	f7ff ffa7 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff ffce 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f);
 8002dd0:	207f      	movs	r0, #127	; 0x7f
 8002dd2:	f7ff ffcb 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <OLED_Driver_RAM_Address+0x4c>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	4a0c      	ldr	r2, [pc, #48]	; (8002e0c <OLED_Driver_RAM_Address+0x4c>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de4:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0x75);
 8002de6:	2075      	movs	r0, #117	; 0x75
 8002de8:	f7ff ff96 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7ff ffbd 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f);
 8002df2:	207f      	movs	r0, #127	; 0x7f
 8002df4:	f7ff ffba 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <OLED_Driver_RAM_Address+0x4c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <OLED_Driver_RAM_Address+0x4c>)
 8002dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40010800 	.word	0x40010800

08002e10 <OLED_Driver_CUSTOM_RAM_Address>:

void OLED_Driver_CUSTOM_RAM_Address(volatile uint8_t s_row, volatile uint8_t e_row, volatile uint8_t s_col, volatile uint8_t e_col)  {
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4604      	mov	r4, r0
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	4603      	mov	r3, r0
 8002e24:	71bb      	strb	r3, [r7, #6]
 8002e26:	460b      	mov	r3, r1
 8002e28:	717b      	strb	r3, [r7, #5]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	713b      	strb	r3, [r7, #4]

  OLED_Driver_Write_Command(0x15);
 8002e2e:	2015      	movs	r0, #21
 8002e30:	f7ff ff72 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(s_col);
 8002e34:	797b      	ldrb	r3, [r7, #5]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff97 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(e_col);
 8002e3e:	793b      	ldrb	r3, [r7, #4]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff92 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <OLED_Driver_CUSTOM_RAM_Address+0x7c>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <OLED_Driver_CUSTOM_RAM_Address+0x7c>)
 8002e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e56:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0x75);
 8002e58:	2075      	movs	r0, #117	; 0x75
 8002e5a:	f7ff ff5d 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(s_row);
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff82 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(e_row);
 8002e68:	79bb      	ldrb	r3, [r7, #6]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff7d 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <OLED_Driver_CUSTOM_RAM_Address+0x7c>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <OLED_Driver_CUSTOM_RAM_Address+0x7c>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e80:	60d3      	str	r3, [r2, #12]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010800 	.word	0x40010800

08002e90 <OLED_Driver_Clear_Screen>:

void OLED_Driver_Clear_Screen(void)  {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0

  int i,j;

  uint8_t clear_byte[] = {0x00, 0x00};
 8002e96:	2300      	movs	r3, #0
 8002e98:	713b      	strb	r3, [r7, #4]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	717b      	strb	r3, [r7, #5]
  OLED_Driver_RAM_Address();
 8002e9e:	f7ff ff8f 	bl	8002dc0 <OLED_Driver_RAM_Address>
  OLED_Driver_Write_Command(0x5C);
 8002ea2:	205c      	movs	r0, #92	; 0x5c
 8002ea4:	f7ff ff38 	bl	8002d18 <OLED_Driver_Write_Command>
  for(i=0;i<128;i++)  {
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e013      	b.n	8002ed6 <OLED_Driver_Clear_Screen+0x46>
    for(j=0;j<128;j++)  {
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	e00a      	b.n	8002eca <OLED_Driver_Clear_Screen+0x3a>
      OLED_Driver_Write_Data(clear_byte[0]);
 8002eb4:	793b      	ldrb	r3, [r7, #4]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff58 	bl	8002d6c <OLED_Driver_Write_Data>
      OLED_Driver_Write_Data(clear_byte[1]);
 8002ebc:	797b      	ldrb	r3, [r7, #5]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff54 	bl	8002d6c <OLED_Driver_Write_Data>
    for(j=0;j<128;j++)  {
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ece:	ddf1      	ble.n	8002eb4 <OLED_Driver_Clear_Screen+0x24>
  for(i=0;i<128;i++)  {
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8002eda:	dde8      	ble.n	8002eae <OLED_Driver_Clear_Screen+0x1e>
    }
  }
  OLED_CS_1;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <OLED_Driver_Clear_Screen+0x64>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <OLED_Driver_Clear_Screen+0x64>)
 8002ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40010800 	.word	0x40010800

08002ef8 <OLED_Driver_Device_Init>:
  OLED_Driver_Write_Data(color_byte[1]);

  OLED_CS_1;
}

void OLED_Driver_Device_Init(void) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0

  OLED_DC_0;
 8002efc:	4bbc      	ldr	r3, [pc, #752]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4abb      	ldr	r2, [pc, #748]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	60d3      	str	r3, [r2, #12]
  OLED_CS_1;
 8002f0c:	4bb8      	ldr	r3, [pc, #736]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4ab7      	ldr	r2, [pc, #732]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1a:	60d3      	str	r3, [r2, #12]


  OLED_RST_0;
 8002f1c:	4bb4      	ldr	r3, [pc, #720]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4ab3      	ldr	r2, [pc, #716]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f26:	f023 0308 	bic.w	r3, r3, #8
 8002f2a:	60d3      	str	r3, [r2, #12]
  delayMs(500);
 8002f2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f30:	f7ff fbe6 	bl	8002700 <delayMs>
  OLED_RST_1;
 8002f34:	4bae      	ldr	r3, [pc, #696]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4aad      	ldr	r2, [pc, #692]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	60d3      	str	r3, [r2, #12]
  delayMs(500);
 8002f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f48:	f7ff fbda 	bl	8002700 <delayMs>


  OLED_Driver_Write_Command(0xfd);  // command lock
 8002f4c:	20fd      	movs	r0, #253	; 0xfd
 8002f4e:	f7ff fee3 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x12);
 8002f52:	2012      	movs	r0, #18
 8002f54:	f7ff ff0a 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002f58:	4ba5      	ldr	r3, [pc, #660]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4aa4      	ldr	r2, [pc, #656]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f66:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xfd);  // command lock
 8002f68:	20fd      	movs	r0, #253	; 0xfd
 8002f6a:	f7ff fed5 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xB1);
 8002f6e:	20b1      	movs	r0, #177	; 0xb1
 8002f70:	f7ff fefc 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002f74:	4b9e      	ldr	r3, [pc, #632]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a9d      	ldr	r2, [pc, #628]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f82:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xae);  // display off
 8002f84:	20ae      	movs	r0, #174	; 0xae
 8002f86:	f7ff fec7 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_CS_1;
 8002f8a:	4b99      	ldr	r3, [pc, #612]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a98      	ldr	r2, [pc, #608]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f98:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xa4);  // Normal Display mode
 8002f9a:	20a4      	movs	r0, #164	; 0xa4
 8002f9c:	f7ff febc 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_CS_1;
 8002fa0:	4b93      	ldr	r3, [pc, #588]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a92      	ldr	r2, [pc, #584]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fae:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0x15);  //set column address
 8002fb0:	2015      	movs	r0, #21
 8002fb2:	f7ff feb1 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00); //column address start 00
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7ff fed8 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f); //column address end 127
 8002fbc:	207f      	movs	r0, #127	; 0x7f
 8002fbe:	f7ff fed5 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a8a      	ldr	r2, [pc, #552]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd0:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0x75);  //set row address
 8002fd2:	2075      	movs	r0, #117	; 0x75
 8002fd4:	f7ff fea0 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00); //row address start 00
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7ff fec7 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f); //row address end 127
 8002fde:	207f      	movs	r0, #127	; 0x7f
 8002fe0:	f7ff fec4 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8002fe4:	4b82      	ldr	r3, [pc, #520]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a81      	ldr	r2, [pc, #516]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8002fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff2:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xB3);
 8002ff4:	20b3      	movs	r0, #179	; 0xb3
 8002ff6:	f7ff fe8f 	bl	8002d18 <OLED_Driver_Write_Command>
  //OLED_Driver_Write_Data(0xF1);
  OLED_Driver_Write_Data(0xF0);
 8002ffa:	20f0      	movs	r0, #240	; 0xf0
 8002ffc:	f7ff feb6 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003000:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a7a      	ldr	r2, [pc, #488]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800300e:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xCA);
 8003010:	20ca      	movs	r0, #202	; 0xca
 8003012:	f7ff fe81 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x7F);
 8003016:	207f      	movs	r0, #127	; 0x7f
 8003018:	f7ff fea8 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 800301c:	4b74      	ldr	r3, [pc, #464]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a73      	ldr	r2, [pc, #460]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302a:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xa0);  //set re-map & data format
 800302c:	20a0      	movs	r0, #160	; 0xa0
 800302e:	f7ff fe73 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x74); //Horizontal address increment
 8003032:	2074      	movs	r0, #116	; 0x74
 8003034:	f7ff fe9a 	bl	8002d6c <OLED_Driver_Write_Data>
//  OLED_Driver_Write_Data(0b10110100); //Horizontal address increment
  OLED_CS_1;
 8003038:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a6c      	ldr	r2, [pc, #432]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800303e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003046:	60d3      	str	r3, [r2, #12]
            //74
  OLED_Driver_Write_Command(0xa1);  //set display start line
 8003048:	20a1      	movs	r0, #161	; 0xa1
 800304a:	f7ff fe65 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00); //start 00 line
 800304e:	2000      	movs	r0, #0
 8003050:	f7ff fe8c 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003054:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a65      	ldr	r2, [pc, #404]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800305a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xa2);  //set display offset
 8003064:	20a2      	movs	r0, #162	; 0xa2
 8003066:	f7ff fe57 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff fe7e 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003070:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a5e      	ldr	r2, [pc, #376]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307e:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xAB);
 8003080:	20ab      	movs	r0, #171	; 0xab
 8003082:	f7ff fe49 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x01);
 8003086:	2001      	movs	r0, #1
 8003088:	f7ff fe70 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 800308c:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309a:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xB4);
 800309c:	20b4      	movs	r0, #180	; 0xb4
 800309e:	f7ff fe3b 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xA0);
 80030a2:	20a0      	movs	r0, #160	; 0xa0
 80030a4:	f7ff fe62 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0xB5);
 80030a8:	20b5      	movs	r0, #181	; 0xb5
 80030aa:	f7ff fe5f 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x55);
 80030ae:	2055      	movs	r0, #85	; 0x55
 80030b0:	f7ff fe5c 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 80030b4:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80030ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c2:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xC1);
 80030c4:	20c1      	movs	r0, #193	; 0xc1
 80030c6:	f7ff fe27 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xC8);
 80030ca:	20c8      	movs	r0, #200	; 0xc8
 80030cc:	f7ff fe4e 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x80);
 80030d0:	2080      	movs	r0, #128	; 0x80
 80030d2:	f7ff fe4b 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0xC0);
 80030d6:	20c0      	movs	r0, #192	; 0xc0
 80030d8:	f7ff fe48 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 80030dc:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a43      	ldr	r2, [pc, #268]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80030e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ea:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xC7);
 80030ec:	20c7      	movs	r0, #199	; 0xc7
 80030ee:	f7ff fe13 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x0F);
 80030f2:	200f      	movs	r0, #15
 80030f4:	f7ff fe3a 	bl	8002d6c <OLED_Driver_Write_Data>
  //OLED_Driver_Write_Data(0x05);
  OLED_CS_1;
 80030f8:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a3c      	ldr	r2, [pc, #240]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80030fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003106:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xB1);
 8003108:	20b1      	movs	r0, #177	; 0xb1
 800310a:	f7ff fe05 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x32);
 800310e:	2032      	movs	r0, #50	; 0x32
 8003110:	f7ff fe2c 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003114:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a35      	ldr	r2, [pc, #212]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800311a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800311e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003122:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xB2);
 8003124:	20b2      	movs	r0, #178	; 0xb2
 8003126:	f7ff fdf7 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xA4);
 800312a:	20a4      	movs	r0, #164	; 0xa4
 800312c:	f7ff fe1e 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7ff fe1b 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7ff fe18 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800314a:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xBB);
 800314c:	20bb      	movs	r0, #187	; 0xbb
 800314e:	f7ff fde3 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x17);
 8003152:	2017      	movs	r0, #23
 8003154:	f7ff fe0a 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800315e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003166:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xb5); // Set GPIO 0 to 1  turn on DC/DC
 8003168:	20b5      	movs	r0, #181	; 0xb5
 800316a:	f7ff fdd5 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x0b);
 800316e:	200b      	movs	r0, #11
 8003170:	f7ff fdfc 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 800317a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003182:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xB6);
 8003184:	20b6      	movs	r0, #182	; 0xb6
 8003186:	f7ff fdc7 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x01);
 800318a:	2001      	movs	r0, #1
 800318c:	f7ff fdee 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 8003196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319e:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xBE);
 80031a0:	20be      	movs	r0, #190	; 0xbe
 80031a2:	f7ff fdb9 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x05);
 80031a6:	2005      	movs	r0, #5
 80031a8:	f7ff fde0 	bl	8002d6c <OLED_Driver_Write_Data>
  OLED_CS_1;
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a0f      	ldr	r2, [pc, #60]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80031b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ba:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Write_Command(0xA6);
 80031bc:	20a6      	movs	r0, #166	; 0xa6
 80031be:	f7ff fdab 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_CS_1;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d0:	60d3      	str	r3, [r2, #12]

  OLED_Driver_Clear_Screen();
 80031d2:	f7ff fe5d 	bl	8002e90 <OLED_Driver_Clear_Screen>
  OLED_Driver_Write_Command(0xaf);   //display on
 80031d6:	20af      	movs	r0, #175	; 0xaf
 80031d8:	f7ff fd9e 	bl	8002d18 <OLED_Driver_Write_Command>
  OLED_CS_1;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <OLED_Driver_Device_Init+0x2f8>)
 80031e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40010800 	.word	0x40010800

080031f4 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b21b      	sxth	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b21b      	sxth	r3, r3
 8003214:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003216:	89fb      	ldrh	r3, [r7, #14]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3303      	adds	r3, #3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	3202      	adds	r2, #2
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	3201      	adds	r2, #1
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
	return rv;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	1c53      	adds	r3, r2, #1
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	6179      	str	r1, [r7, #20]
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f1      	bne.n	8003280 <mem_cpy+0x1a>
	}
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	617a      	str	r2, [r7, #20]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f3      	bne.n	80032b6 <mem_set+0x10>
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	61fa      	str	r2, [r7, #28]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4619      	mov	r1, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	61ba      	str	r2, [r7, #24]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	1acb      	subs	r3, r1, r3
 8003304:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3b01      	subs	r3, #1
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <mem_cmp+0x40>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0eb      	beq.n	80032f0 <mem_cmp+0x18>

	return r;
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800332e:	e002      	b.n	8003336 <chk_chr+0x12>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <chk_chr+0x26>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4293      	cmp	r3, r2
 8003348:	d1f2      	bne.n	8003330 <chk_chr+0xc>
	return *str;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	781b      	ldrb	r3, [r3, #0]
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <dbc_1st+0x14>
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <dbc_1st+0x16>
#endif
	return 0;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <dbc_2nd+0x14>
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <dbc_2nd+0x16>
#endif
	return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d016      	beq.n	80033de <move_window+0x46>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d113      	bne.n	80033de <move_window+0x46>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7858      	ldrb	r0, [r3, #1]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80033c0:	2301      	movs	r3, #1
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	f7ff fc06 	bl	8002bd4 <disk_read>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <move_window+0x40>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	return res;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	3b02      	subs	r3, #2
 80033f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	3b02      	subs	r3, #2
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d301      	bcc.n	8003408 <clst2sect+0x20>
 8003404:	2300      	movs	r3, #0
 8003406:	e008      	b.n	800341a <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	895b      	ldrh	r3, [r3, #10]
 8003410:	4619      	mov	r1, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	fb03 f301 	mul.w	r3, r3, r1
 8003418:	4413      	add	r3, r2
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d904      	bls.n	8003444 <get_fat+0x20>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d302      	bcc.n	800344a <get_fat+0x26>
		val = 1;	/* Internal error */
 8003444:	2301      	movs	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e08c      	b.n	8003564 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800344a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800344e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d045      	beq.n	80034e4 <get_fat+0xc0>
 8003458:	2b03      	cmp	r3, #3
 800345a:	d05d      	beq.n	8003518 <get_fat+0xf4>
 800345c:	2b01      	cmp	r3, #1
 800345e:	d177      	bne.n	8003550 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	4413      	add	r3, r2
 8003478:	4619      	mov	r1, r3
 800347a:	6938      	ldr	r0, [r7, #16]
 800347c:	f7ff ff8c 	bl	8003398 <move_window>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d167      	bne.n	8003556 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	60fa      	str	r2, [r7, #12]
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003498:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	0a5b      	lsrs	r3, r3, #9
 80034a2:	4413      	add	r3, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	6938      	ldr	r0, [r7, #16]
 80034a8:	f7ff ff76 	bl	8003398 <move_window>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d153      	bne.n	800355a <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <get_fat+0xb6>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	e002      	b.n	80034e0 <get_fat+0xbc>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	617b      	str	r3, [r7, #20]
			break;
 80034e2:	e03f      	b.n	8003564 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	699a      	ldr	r2, [r3, #24]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	4413      	add	r3, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6938      	ldr	r0, [r7, #16]
 80034f2:	f7ff ff51 	bl	8003398 <move_window>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d130      	bne.n	800355e <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800350a:	4413      	add	r3, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fe71 	bl	80031f4 <ld_word>
 8003512:	4603      	mov	r3, r0
 8003514:	617b      	str	r3, [r7, #20]
			break;
 8003516:	e025      	b.n	8003564 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	09db      	lsrs	r3, r3, #7
 8003520:	4413      	add	r3, r2
 8003522:	4619      	mov	r1, r3
 8003524:	6938      	ldr	r0, [r7, #16]
 8003526:	f7ff ff37 	bl	8003398 <move_window>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d118      	bne.n	8003562 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800353e:	4413      	add	r3, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe6e 	bl	8003222 <ld_dword>
 8003546:	4603      	mov	r3, r0
 8003548:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800354c:	617b      	str	r3, [r7, #20]
			break;
 800354e:	e009      	b.n	8003564 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e006      	b.n	8003564 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003562:	bf00      	nop
		}
	}

	return val;
 8003564:	697b      	ldr	r3, [r7, #20]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003584:	d204      	bcs.n	8003590 <dir_sdi+0x22>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003590:	2302      	movs	r3, #2
 8003592:	e063      	b.n	800365c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <dir_sdi+0x46>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d902      	bls.n	80035b4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	8912      	ldrh	r2, [r2, #8]
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d301      	bcc.n	80035ca <dir_sdi+0x5c>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e048      	b.n	800365c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
 80035d2:	e029      	b.n	8003628 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	895b      	ldrh	r3, [r3, #10]
 80035d8:	025b      	lsls	r3, r3, #9
 80035da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80035dc:	e019      	b.n	8003612 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6979      	ldr	r1, [r7, #20]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff1e 	bl	8003424 <get_fat>
 80035e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f0:	d101      	bne.n	80035f6 <dir_sdi+0x88>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e032      	b.n	800365c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d904      	bls.n	8003606 <dir_sdi+0x98>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	429a      	cmp	r2, r3
 8003604:	d301      	bcc.n	800360a <dir_sdi+0x9c>
 8003606:	2302      	movs	r3, #2
 8003608:	e028      	b.n	800365c <dir_sdi+0xee>
			ofs -= csz;
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	429a      	cmp	r2, r3
 8003618:	d2e1      	bcs.n	80035de <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	6938      	ldr	r0, [r7, #16]
 800361e:	f7ff fee3 	bl	80033e8 <clst2sect>
 8003622:	4602      	mov	r2, r0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <dir_sdi+0xcc>
 8003636:	2302      	movs	r3, #2
 8003638:	e010      	b.n	800365c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	0a5b      	lsrs	r3, r3, #9
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	3320      	adds	r3, #32
 800367a:	613b      	str	r3, [r7, #16]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003682:	d302      	bcc.n	800368a <dir_next+0x26>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <dir_next+0x32>
 8003692:	2304      	movs	r3, #4
 8003694:	e05a      	b.n	800374c <dir_next+0xe8>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	2b00      	cmp	r3, #0
 800369e:	d148      	bne.n	8003732 <dir_next+0xce>
		dp->sect++;				/* Next sector */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	8912      	ldrh	r2, [r2, #8]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d339      	bcc.n	8003732 <dir_next+0xce>
				dp->sect = 0; return FR_NO_FILE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
 80036c4:	2304      	movs	r3, #4
 80036c6:	e041      	b.n	800374c <dir_next+0xe8>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	8952      	ldrh	r2, [r2, #10]
 80036d0:	3a01      	subs	r2, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d12c      	bne.n	8003732 <dir_next+0xce>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f7ff fe9f 	bl	8003424 <get_fat>
 80036e6:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d801      	bhi.n	80036f2 <dir_next+0x8e>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e02c      	b.n	800374c <dir_next+0xe8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f8:	d101      	bne.n	80036fe <dir_next+0x9a>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e026      	b.n	800374c <dir_next+0xe8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d30a      	bcc.n	800371e <dir_next+0xba>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <dir_next+0xb0>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	619a      	str	r2, [r3, #24]
 800371a:	2304      	movs	r3, #4
 800371c:	e016      	b.n	800374c <dir_next+0xe8>
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff fe5e 	bl	80033e8 <clst2sect>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	331a      	adds	r3, #26
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fd46 	bl	80031f4 <ld_word>
 8003768:	4603      	mov	r3, r0
 800376a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d109      	bne.n	8003788 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fd3b 	bl	80031f4 <ld_word>
 800377e:	4603      	mov	r3, r0
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003788:	68fb      	ldr	r3, [r7, #12]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80037a0:	2100      	movs	r1, #0
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fee3 	bl	800356e <dir_sdi>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <dir_find+0x24>
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	e03e      	b.n	8003834 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	4619      	mov	r1, r3
 80037bc:	6938      	ldr	r0, [r7, #16]
 80037be:	f7ff fdeb 	bl	8003398 <move_window>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d12f      	bne.n	800382c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <dir_find+0x4e>
 80037da:	2304      	movs	r3, #4
 80037dc:	75fb      	strb	r3, [r7, #23]
 80037de:	e028      	b.n	8003832 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	330b      	adds	r3, #11
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	330b      	adds	r3, #11
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <dir_find+0x86>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69d8      	ldr	r0, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3320      	adds	r3, #32
 800380a:	220b      	movs	r2, #11
 800380c:	4619      	mov	r1, r3
 800380e:	f7ff fd63 	bl	80032d8 <mem_cmp>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003818:	2100      	movs	r1, #0
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff22 	bl	8003664 <dir_next>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0c5      	beq.n	80037b6 <dir_find+0x24>
 800382a:	e002      	b.n	8003832 <dir_find+0xa0>
		if (res != FR_OK) break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003830:	bf00      	nop

	return res;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3320      	adds	r3, #32
 8003850:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8003852:	220b      	movs	r2, #11
 8003854:	2120      	movs	r1, #32
 8003856:	6938      	ldr	r0, [r7, #16]
 8003858:	f7ff fd25 	bl	80032a6 <mem_set>
	si = i = 0; ni = 8;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	61fa      	str	r2, [r7, #28]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4413      	add	r3, r2
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800387c:	2b20      	cmp	r3, #32
 800387e:	f240 8089 	bls.w	8003994 <create_name+0x158>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003886:	2b2f      	cmp	r3, #47	; 0x2f
 8003888:	d007      	beq.n	800389a <create_name+0x5e>
 800388a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388e:	2b5c      	cmp	r3, #92	; 0x5c
 8003890:	d110      	bne.n	80038b4 <create_name+0x78>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003892:	e002      	b.n	800389a <create_name+0x5e>
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	3301      	adds	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b2f      	cmp	r3, #47	; 0x2f
 80038a4:	d0f6      	beq.n	8003894 <create_name+0x58>
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b5c      	cmp	r3, #92	; 0x5c
 80038b0:	d0f0      	beq.n	8003894 <create_name+0x58>
			break;
 80038b2:	e070      	b.n	8003996 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80038b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b8:	2b2e      	cmp	r3, #46	; 0x2e
 80038ba:	d003      	beq.n	80038c4 <create_name+0x88>
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d30d      	bcc.n	80038e0 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b0b      	cmp	r3, #11
 80038c8:	d003      	beq.n	80038d2 <create_name+0x96>
 80038ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038ce:	2b2e      	cmp	r3, #46	; 0x2e
 80038d0:	d001      	beq.n	80038d6 <create_name+0x9a>
 80038d2:	2306      	movs	r3, #6
 80038d4:	e07b      	b.n	80039ce <create_name+0x192>
			i = 8; ni = 11;				/* Enter file extension field */
 80038d6:	2308      	movs	r3, #8
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	230b      	movs	r3, #11
 80038dc:	623b      	str	r3, [r7, #32]
			continue;
 80038de:	e058      	b.n	8003992 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 80038e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da07      	bge.n	80038f8 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 80038e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f0:	4a39      	ldr	r2, [pc, #228]	; (80039d8 <create_name+0x19c>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 80038f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fd2b 	bl	8003358 <dbc_1st>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d024      	beq.n	8003952 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	61fa      	str	r2, [r7, #28]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4413      	add	r3, r2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fd2d 	bl	8003378 <dbc_2nd>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <create_name+0xf2>
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	3b01      	subs	r3, #1
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	429a      	cmp	r2, r3
 800392c:	d301      	bcc.n	8003932 <create_name+0xf6>
 800392e:	2306      	movs	r3, #6
 8003930:	e04d      	b.n	80039ce <create_name+0x192>
			sfn[i++] = c;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	61ba      	str	r2, [r7, #24]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003940:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	61ba      	str	r2, [r7, #24]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4413      	add	r3, r2
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e78a      	b.n	8003868 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003956:	4619      	mov	r1, r3
 8003958:	4820      	ldr	r0, [pc, #128]	; (80039dc <create_name+0x1a0>)
 800395a:	f7ff fce3 	bl	8003324 <chk_chr>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <create_name+0x12c>
 8003964:	2306      	movs	r3, #6
 8003966:	e032      	b.n	80039ce <create_name+0x192>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d908      	bls.n	8003982 <create_name+0x146>
 8003970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003974:	2b7a      	cmp	r3, #122	; 0x7a
 8003976:	d804      	bhi.n	8003982 <create_name+0x146>
 8003978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800397c:	3b20      	subs	r3, #32
 800397e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	61ba      	str	r2, [r7, #24]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003990:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8003992:	e769      	b.n	8003868 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003994:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	441a      	add	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <create_name+0x16e>
 80039a6:	2306      	movs	r3, #6
 80039a8:	e011      	b.n	80039ce <create_name+0x192>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2be5      	cmp	r3, #229	; 0xe5
 80039b0:	d102      	bne.n	80039b8 <create_name+0x17c>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2205      	movs	r2, #5
 80039b6:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d801      	bhi.n	80039c4 <create_name+0x188>
 80039c0:	2204      	movs	r2, #4
 80039c2:	e000      	b.n	80039c6 <create_name+0x18a>
 80039c4:	2200      	movs	r2, #0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	330b      	adds	r3, #11
 80039ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80039cc:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08004458 	.word	0x08004458
 80039dc:	08004414 	.word	0x08004414

080039e0 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80039f0:	e002      	b.n	80039f8 <follow_path+0x18>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b2f      	cmp	r3, #47	; 0x2f
 80039fe:	d0f8      	beq.n	80039f2 <follow_path+0x12>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b5c      	cmp	r3, #92	; 0x5c
 8003a06:	d0f4      	beq.n	80039f2 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b1f      	cmp	r3, #31
 8003a14:	d80a      	bhi.n	8003a2c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fda4 	bl	800356e <dir_sdi>
 8003a26:	4603      	mov	r3, r0
 8003a28:	75fb      	strb	r3, [r7, #23]
 8003a2a:	e043      	b.n	8003ab4 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff03 	bl	800383c <create_name>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d134      	bne.n	8003aaa <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fea6 	bl	8003792 <dir_find>
 8003a46:	4603      	mov	r3, r0
 8003a48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003a50:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d127      	bne.n	8003aae <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d122      	bne.n	8003aae <follow_path+0xce>
 8003a68:	2305      	movs	r3, #5
 8003a6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003a6c:	e01f      	b.n	8003aae <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11c      	bne.n	8003ab2 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	799b      	ldrb	r3, [r3, #6]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8003a84:	2305      	movs	r3, #5
 8003a86:	75fb      	strb	r3, [r7, #23]
 8003a88:	e014      	b.n	8003ab4 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	4413      	add	r3, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6938      	ldr	r0, [r7, #16]
 8003a9e:	f7ff fe59 	bl	8003754 <ld_clust>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003aa8:	e7c0      	b.n	8003a2c <follow_path+0x4c>
			if (res != FR_OK) break;
 8003aaa:	bf00      	nop
 8003aac:	e002      	b.n	8003ab4 <follow_path+0xd4>
				break;
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003ab2:	bf00      	nop
			}
		}
	}

	return res;
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b089      	sub	sp, #36	; 0x24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aca:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <get_ldnumber+0x22>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	e02d      	b.n	8003b3c <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	61fa      	str	r2, [r7, #28]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d902      	bls.n	8003af6 <get_ldnumber+0x38>
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b3a      	cmp	r3, #58	; 0x3a
 8003af4:	d1f4      	bne.n	8003ae0 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b3a      	cmp	r3, #58	; 0x3a
 8003afa:	d11c      	bne.n	8003b36 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8003afc:	2301      	movs	r3, #1
 8003afe:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b2f      	cmp	r3, #47	; 0x2f
 8003b06:	d90c      	bls.n	8003b22 <get_ldnumber+0x64>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b39      	cmp	r3, #57	; 0x39
 8003b0e:	d808      	bhi.n	8003b22 <get_ldnumber+0x64>
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3302      	adds	r3, #2
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d103      	bne.n	8003b22 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	3b30      	subs	r3, #48	; 0x30
 8003b20:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	dc04      	bgt.n	8003b32 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	e002      	b.n	8003b3c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3724      	adds	r7, #36	; 0x24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
	...

08003b48 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	70da      	strb	r2, [r3, #3]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fc18 	bl	8003398 <move_window>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <check_fs+0x2a>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e038      	b.n	8003be4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3328      	adds	r3, #40	; 0x28
 8003b76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fb3a 	bl	80031f4 <ld_word>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <check_fs+0x48>
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e029      	b.n	8003be4 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b96:	2be9      	cmp	r3, #233	; 0xe9
 8003b98:	d009      	beq.n	8003bae <check_fs+0x66>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba0:	2beb      	cmp	r3, #235	; 0xeb
 8003ba2:	d004      	beq.n	8003bae <check_fs+0x66>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003baa:	2be8      	cmp	r3, #232	; 0xe8
 8003bac:	d119      	bne.n	8003be2 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3328      	adds	r3, #40	; 0x28
 8003bb2:	3336      	adds	r3, #54	; 0x36
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	490d      	ldr	r1, [pc, #52]	; (8003bec <check_fs+0xa4>)
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fb8d 	bl	80032d8 <mem_cmp>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <check_fs+0x80>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e00d      	b.n	8003be4 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3328      	adds	r3, #40	; 0x28
 8003bcc:	3352      	adds	r3, #82	; 0x52
 8003bce:	2205      	movs	r2, #5
 8003bd0:	4907      	ldr	r1, [pc, #28]	; (8003bf0 <check_fs+0xa8>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fb80 	bl	80032d8 <mem_cmp>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <check_fs+0x9a>
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8003be2:	2302      	movs	r3, #2
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08004424 	.word	0x08004424
 8003bf0:	08004428 	.word	0x08004428

08003bf4 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b096      	sub	sp, #88	; 0x58
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff ff58 	bl	8003abe <get_ldnumber>
 8003c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da01      	bge.n	8003c1a <find_volume+0x26>
 8003c16:	230b      	movs	r3, #11
 8003c18:	e1cb      	b.n	8003fb2 <find_volume+0x3be>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8003c1a:	4aad      	ldr	r2, [pc, #692]	; (8003ed0 <find_volume+0x2dc>)
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <find_volume+0x3a>
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	e1c1      	b.n	8003fb2 <find_volume+0x3be>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <find_volume+0x70>
		stat = disk_status(fs->pdrv);
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe fed7 	bl	80029fc <disk_status>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <find_volume+0x70>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is valid */
 8003c60:	2300      	movs	r3, #0
 8003c62:	e1a6      	b.n	8003fb2 <find_volume+0x3be>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fecc 	bl	8002a14 <disk_initialize>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003c82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <find_volume+0x9e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e18f      	b.n	8003fb2 <find_volume+0x3be>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003c96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c9a:	f7ff ff55 	bl	8003b48 <check_fs>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d14b      	bne.n	8003d44 <find_volume+0x150>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003cac:	2300      	movs	r3, #0
 8003cae:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb0:	e01f      	b.n	8003cf2 <find_volume+0xfe>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003cc0:	4413      	add	r3, r2
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <find_volume+0xe8>
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff faa5 	bl	8003222 <ld_dword>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	e000      	b.n	8003cde <find_volume+0xea>
 8003cdc:	2200      	movs	r2, #0
 8003cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cee:	3301      	adds	r3, #1
 8003cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d9dc      	bls.n	8003cb2 <find_volume+0xbe>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8003cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <find_volume+0x114>
 8003d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d04:	3b01      	subs	r3, #1
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003d10:	4413      	add	r3, r2
 8003d12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003d16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <find_volume+0x136>
 8003d1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d22:	f7ff ff11 	bl	8003b48 <check_fs>
 8003d26:	4603      	mov	r3, r0
 8003d28:	e000      	b.n	8003d2c <find_volume+0x138>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d905      	bls.n	8003d44 <find_volume+0x150>
 8003d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d9e1      	bls.n	8003d08 <find_volume+0x114>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d101      	bne.n	8003d50 <find_volume+0x15c>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e130      	b.n	8003fb2 <find_volume+0x3be>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d901      	bls.n	8003d5c <find_volume+0x168>
 8003d58:	230d      	movs	r3, #13
 8003d5a:	e12a      	b.n	8003fb2 <find_volume+0x3be>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	3328      	adds	r3, #40	; 0x28
 8003d60:	330b      	adds	r3, #11
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fa46 	bl	80031f4 <ld_word>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6e:	d001      	beq.n	8003d74 <find_volume+0x180>
 8003d70:	230d      	movs	r3, #13
 8003d72:	e11e      	b.n	8003fb2 <find_volume+0x3be>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	3328      	adds	r3, #40	; 0x28
 8003d78:	3316      	adds	r3, #22
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fa3a 	bl	80031f4 <ld_word>
 8003d80:	4603      	mov	r3, r0
 8003d82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <find_volume+0x1a4>
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	3328      	adds	r3, #40	; 0x28
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fa46 	bl	8003222 <ld_dword>
 8003d96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d9c:	611a      	str	r2, [r3, #16]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	789b      	ldrb	r3, [r3, #2]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d005      	beq.n	8003dbc <find_volume+0x1c8>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	789b      	ldrb	r3, [r3, #2]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d001      	beq.n	8003dbc <find_volume+0x1c8>
 8003db8:	230d      	movs	r3, #13
 8003dba:	e0fa      	b.n	8003fb2 <find_volume+0x3be>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	789b      	ldrb	r3, [r3, #2]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	895b      	ldrh	r3, [r3, #10]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <find_volume+0x1fc>
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	895b      	ldrh	r3, [r3, #10]
 8003de2:	461a      	mov	r2, r3
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	895b      	ldrh	r3, [r3, #10]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <find_volume+0x200>
 8003df0:	230d      	movs	r3, #13
 8003df2:	e0de      	b.n	8003fb2 <find_volume+0x3be>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	3328      	adds	r3, #40	; 0x28
 8003df8:	3311      	adds	r3, #17
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f9fa 	bl	80031f4 <ld_word>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	891b      	ldrh	r3, [r3, #8]
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <find_volume+0x226>
 8003e16:	230d      	movs	r3, #13
 8003e18:	e0cb      	b.n	8003fb2 <find_volume+0x3be>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	3328      	adds	r3, #40	; 0x28
 8003e1e:	3313      	adds	r3, #19
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff f9e7 	bl	80031f4 <ld_word>
 8003e26:	4603      	mov	r3, r0
 8003e28:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <find_volume+0x24a>
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	3328      	adds	r3, #40	; 0x28
 8003e34:	3320      	adds	r3, #32
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff f9f3 	bl	8003222 <ld_dword>
 8003e3c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	3328      	adds	r3, #40	; 0x28
 8003e42:	330e      	adds	r3, #14
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff f9d5 	bl	80031f4 <ld_word>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <find_volume+0x264>
 8003e54:	230d      	movs	r3, #13
 8003e56:	e0ac      	b.n	8003fb2 <find_volume+0x3be>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003e58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	4413      	add	r3, r2
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	8912      	ldrh	r2, [r2, #8]
 8003e62:	0912      	lsrs	r2, r2, #4
 8003e64:	b292      	uxth	r2, r2
 8003e66:	4413      	add	r3, r2
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d201      	bcs.n	8003e76 <find_volume+0x282>
 8003e72:	230d      	movs	r3, #13
 8003e74:	e09d      	b.n	8003fb2 <find_volume+0x3be>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7e:	8952      	ldrh	r2, [r2, #10]
 8003e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <find_volume+0x29c>
 8003e8c:	230d      	movs	r3, #13
 8003e8e:	e090      	b.n	8003fb2 <find_volume+0x3be>
		fmt = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	4a0e      	ldr	r2, [pc, #56]	; (8003ed4 <find_volume+0x2e0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d802      	bhi.n	8003ea4 <find_volume+0x2b0>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d802      	bhi.n	8003eb4 <find_volume+0x2c0>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d802      	bhi.n	8003ec4 <find_volume+0x2d0>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8003ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <find_volume+0x2e4>
 8003ecc:	230d      	movs	r3, #13
 8003ece:	e070      	b.n	8003fb2 <find_volume+0x3be>
 8003ed0:	20000024 	.word	0x20000024
 8003ed4:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	60da      	str	r2, [r3, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ee4:	615a      	str	r2, [r3, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003ee6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eea:	441a      	add	r2, r3
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	619a      	str	r2, [r3, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8003ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	441a      	add	r2, r3
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	621a      	str	r2, [r3, #32]
		if (fmt == FS_FAT32) {
 8003efa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d11e      	bne.n	8003f40 <find_volume+0x34c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	3328      	adds	r3, #40	; 0x28
 8003f06:	332a      	adds	r3, #42	; 0x2a
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f973 	bl	80031f4 <ld_word>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <find_volume+0x324>
 8003f14:	230d      	movs	r3, #13
 8003f16:	e04c      	b.n	8003fb2 <find_volume+0x3be>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	891b      	ldrh	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <find_volume+0x330>
 8003f20:	230d      	movs	r3, #13
 8003f22:	e046      	b.n	8003fb2 <find_volume+0x3be>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	3328      	adds	r3, #40	; 0x28
 8003f28:	332c      	adds	r3, #44	; 0x2c
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f979 	bl	8003222 <ld_dword>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	61da      	str	r2, [r3, #28]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3e:	e01f      	b.n	8003f80 <find_volume+0x38c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	891b      	ldrh	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <find_volume+0x358>
 8003f48:	230d      	movs	r3, #13
 8003f4a:	e032      	b.n	8003fb2 <find_volume+0x3be>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	441a      	add	r2, r3
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	61da      	str	r2, [r3, #28]
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d103      	bne.n	8003f68 <find_volume+0x374>
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	e00a      	b.n	8003f7e <find_volume+0x38a>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	085a      	lsrs	r2, r3, #1
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003f7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f8a:	0a5b      	lsrs	r3, r3, #9
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d201      	bcs.n	8003f94 <find_volume+0x3a0>
 8003f90:	230d      	movs	r3, #13
 8003f92:	e00e      	b.n	8003fb2 <find_volume+0x3be>
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003f9a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <find_volume+0x3c8>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <find_volume+0x3c8>)
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <find_volume+0x3c8>)
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3758      	adds	r7, #88	; 0x58
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000028 	.word	0x20000028

08003fc0 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003fca:	2309      	movs	r3, #9
 8003fcc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01c      	beq.n	800400e <validate+0x4e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d018      	beq.n	800400e <validate+0x4e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d013      	beq.n	800400e <validate+0x4e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	889a      	ldrh	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	88db      	ldrh	r3, [r3, #6]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d10c      	bne.n	800400e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fcfe 	bl	80029fc <disk_status>
 8004000:	4603      	mov	r3, r0
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <validate+0x4e>
			res = FR_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <validate+0x5a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	e000      	b.n	800401c <validate+0x5c>
 800401a:	2300      	movs	r3, #0
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	6013      	str	r3, [r2, #0]
	return res;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800403e:	f107 0310 	add.w	r3, r7, #16
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fd3b 	bl	8003abe <get_ldnumber>
 8004048:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	da01      	bge.n	8004054 <f_mount+0x28>
 8004050:	230b      	movs	r3, #11
 8004052:	e025      	b.n	80040a0 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <f_mount+0x7c>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	490b      	ldr	r1, [pc, #44]	; (80040a8 <f_mount+0x7c>)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <f_mount+0x5e>
 8004086:	2300      	movs	r3, #0
 8004088:	e00a      	b.n	80040a0 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800408a:	f107 010c 	add.w	r1, r7, #12
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	2200      	movs	r2, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff fdad 	bl	8003bf4 <find_volume>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000024 	.word	0x20000024

080040ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b092      	sub	sp, #72	; 0x48
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <f_open+0x18>
 80040c0:	2309      	movs	r3, #9
 80040c2:	e064      	b.n	800418e <f_open+0xe2>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80040cc:	79fa      	ldrb	r2, [r7, #7]
 80040ce:	f107 0110 	add.w	r1, r7, #16
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fd8c 	bl	8003bf4 <find_volume>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80040e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d148      	bne.n	800417c <f_open+0xd0>
		dj.obj.fs = fs;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fc72 	bl	80039e0 <follow_path>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
			if (fp->obj.lockid == 0) res = FR_INT_ERR;
#endif
		}
#else		/* R/O configuration */
		if (res == FR_OK) {
 8004102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004106:	2b00      	cmp	r3, #0
 8004108:	d110      	bne.n	800412c <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
 800410a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800410e:	b25b      	sxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	da03      	bge.n	800411c <f_open+0x70>
				res = FR_INVALID_NAME;
 8004114:	2306      	movs	r3, #6
 8004116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800411a:	e007      	b.n	800412c <f_open+0x80>
			} else {
				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
 800411c:	7ebb      	ldrb	r3, [r7, #26]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <f_open+0x80>
					res = FR_NO_FILE;
 8004126:	2304      	movs	r3, #4
 8004128:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
#endif

		if (res == FR_OK) {
 800412c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004130:	2b00      	cmp	r3, #0
 8004132:	d123      	bne.n	800417c <f_open+0xd0>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fb0a 	bl	8003754 <ld_clust>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	331c      	adds	r3, #28
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f869 	bl	8003222 <ld_dword>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	88da      	ldrh	r2, [r3, #6]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	79fa      	ldrb	r2, [r7, #7]
 8004168:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800417c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <f_open+0xde>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800418a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800418e:	4618      	mov	r0, r3
 8004190:	3748      	adds	r7, #72	; 0x48
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08e      	sub	sp, #56	; 0x38
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f107 0214 	add.w	r2, r7, #20
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff02 	bl	8003fc0 <validate>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80041c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <f_read+0x44>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	7c5b      	ldrb	r3, [r3, #17]
 80041ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80041d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <f_read+0x4a>
 80041da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041de:	e0d1      	b.n	8004384 <f_read+0x1ee>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	7c1b      	ldrb	r3, [r3, #16]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <f_read+0x5a>
 80041ec:	2307      	movs	r3, #7
 80041ee:	e0c9      	b.n	8004384 <f_read+0x1ee>
	remain = fp->obj.objsize - fp->fptr;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	429a      	cmp	r2, r3
 8004202:	f240 80ba 	bls.w	800437a <f_read+0x1e4>
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 800420a:	e0b6      	b.n	800437a <f_read+0x1e4>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8082 	bne.w	800431e <f_read+0x188>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	0a5b      	lsrs	r3, r3, #9
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	8952      	ldrh	r2, [r2, #10]
 8004224:	3a01      	subs	r2, #1
 8004226:	4013      	ands	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d123      	bne.n	8004278 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	633b      	str	r3, [r7, #48]	; 0x30
 800423e:	e007      	b.n	8004250 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7ff f8eb 	bl	8003424 <get_fat>
 800424e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2b01      	cmp	r3, #1
 8004254:	d804      	bhi.n	8004260 <f_read+0xca>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2202      	movs	r2, #2
 800425a:	745a      	strb	r2, [r3, #17]
 800425c:	2302      	movs	r3, #2
 800425e:	e091      	b.n	8004384 <f_read+0x1ee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004266:	d104      	bne.n	8004272 <f_read+0xdc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	745a      	strb	r2, [r3, #17]
 800426e:	2301      	movs	r3, #1
 8004270:	e088      	b.n	8004384 <f_read+0x1ee>
				fp->clust = clst;				/* Update current cluster */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004276:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7ff f8b1 	bl	80033e8 <clst2sect>
 8004286:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <f_read+0x102>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2202      	movs	r2, #2
 8004292:	745a      	strb	r2, [r3, #17]
 8004294:	2302      	movs	r3, #2
 8004296:	e075      	b.n	8004384 <f_read+0x1ee>
			sect += csect;
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0a5b      	lsrs	r3, r3, #9
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01f      	beq.n	80042ec <f_read+0x156>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	4413      	add	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	8952      	ldrh	r2, [r2, #10]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d905      	bls.n	80042c6 <f_read+0x130>
					cc = fs->csize - csect;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	895b      	ldrh	r3, [r3, #10]
 80042be:	461a      	mov	r2, r3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	7858      	ldrb	r0, [r3, #1]
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042d0:	f7fe fc80 	bl	8002bd4 <disk_read>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <f_read+0x14e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	745a      	strb	r2, [r3, #17]
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04f      	b.n	8004384 <f_read+0x1ee>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80042ea:	e032      	b.n	8004352 <f_read+0x1bc>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d010      	beq.n	8004318 <f_read+0x182>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	7858      	ldrb	r0, [r3, #1]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f103 0120 	add.w	r1, r3, #32
 8004300:	2301      	movs	r3, #1
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	f7fe fc66 	bl	8002bd4 <disk_read>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <f_read+0x182>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	745a      	strb	r2, [r3, #17]
 8004314:	2301      	movs	r3, #1
 8004316:	e035      	b.n	8004384 <f_read+0x1ee>
			}
#endif
			fp->sect = sect;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800432c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d901      	bls.n	8004338 <f_read+0x1a2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f103 0220 	add.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	4413      	add	r3, r2
 8004348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434a:	4619      	mov	r1, r3
 800434c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800434e:	f7fe ff8a 	bl	8003266 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	441a      	add	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	4413      	add	r3, r2
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	441a      	add	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af45 	bne.w	800420c <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3738      	adds	r7, #56	; 0x38
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <__libc_init_array>:
 800438c:	b570      	push	{r4, r5, r6, lr}
 800438e:	2500      	movs	r5, #0
 8004390:	4e0c      	ldr	r6, [pc, #48]	; (80043c4 <__libc_init_array+0x38>)
 8004392:	4c0d      	ldr	r4, [pc, #52]	; (80043c8 <__libc_init_array+0x3c>)
 8004394:	1ba4      	subs	r4, r4, r6
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	42a5      	cmp	r5, r4
 800439a:	d109      	bne.n	80043b0 <__libc_init_array+0x24>
 800439c:	f000 f822 	bl	80043e4 <_init>
 80043a0:	2500      	movs	r5, #0
 80043a2:	4e0a      	ldr	r6, [pc, #40]	; (80043cc <__libc_init_array+0x40>)
 80043a4:	4c0a      	ldr	r4, [pc, #40]	; (80043d0 <__libc_init_array+0x44>)
 80043a6:	1ba4      	subs	r4, r4, r6
 80043a8:	10a4      	asrs	r4, r4, #2
 80043aa:	42a5      	cmp	r5, r4
 80043ac:	d105      	bne.n	80043ba <__libc_init_array+0x2e>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043b4:	4798      	blx	r3
 80043b6:	3501      	adds	r5, #1
 80043b8:	e7ee      	b.n	8004398 <__libc_init_array+0xc>
 80043ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043be:	4798      	blx	r3
 80043c0:	3501      	adds	r5, #1
 80043c2:	e7f2      	b.n	80043aa <__libc_init_array+0x1e>
 80043c4:	080044d8 	.word	0x080044d8
 80043c8:	080044d8 	.word	0x080044d8
 80043cc:	080044d8 	.word	0x080044d8
 80043d0:	080044dc 	.word	0x080044dc

080043d4 <memset>:
 80043d4:	4603      	mov	r3, r0
 80043d6:	4402      	add	r2, r0
 80043d8:	4293      	cmp	r3, r2
 80043da:	d100      	bne.n	80043de <memset+0xa>
 80043dc:	4770      	bx	lr
 80043de:	f803 1b01 	strb.w	r1, [r3], #1
 80043e2:	e7f9      	b.n	80043d8 <memset+0x4>

080043e4 <_init>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr

080043f0 <_fini>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr
