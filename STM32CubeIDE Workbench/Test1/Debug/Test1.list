
Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023c4  080023c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080023c4  080023c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023c4  080023c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c8  080023c8  000123c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080023cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022ec  20000004  080023d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022f0  080023d0  000222f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b27b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a25  00000000  00000000  0002b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005927  00000000  00000000  0002cccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000003a8  00000000  00000000  000325f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000510  00000000  00000000  000329a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00013db4  00000000  00000000  00032eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004dcb  00000000  00000000  00046c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000680a6  00000000  00000000  0004ba2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b3ad5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008e8  00000000  00000000  000b3b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080022f8 	.word	0x080022f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080022f8 	.word	0x080022f8

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800014e:	4a22      	ldr	r2, [pc, #136]	; (80001d8 <SystemClock_Config+0x8c>)
 8000150:	6813      	ldr	r3, [r2, #0]
 8000152:	f023 0307 	bic.w	r3, r3, #7
 8000156:	f043 0302 	orr.w	r3, r3, #2
 800015a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800015c:	6813      	ldr	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800015e:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8000162:	6813      	ldr	r3, [r2, #0]
 8000164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000168:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800016a:	6813      	ldr	r3, [r2, #0]
    Error_Handler();  
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800016c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000170:	d0fb      	beq.n	800016a <SystemClock_Config+0x1e>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000172:	4a1a      	ldr	r2, [pc, #104]	; (80001dc <SystemClock_Config+0x90>)
 8000174:	6853      	ldr	r3, [r2, #4]
 8000176:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800017a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800017e:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000180:	6813      	ldr	r3, [r2, #0]
 8000182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000186:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000188:	6813      	ldr	r3, [r2, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800018a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800018e:	d0fb      	beq.n	8000188 <SystemClock_Config+0x3c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <SystemClock_Config+0x90>)
 8000192:	685a      	ldr	r2, [r3, #4]
 8000194:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000198:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800019a:	685a      	ldr	r2, [r3, #4]
 800019c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80001a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80001a4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80001a6:	685a      	ldr	r2, [r3, #4]
 80001a8:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80001ac:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001ae:	685a      	ldr	r2, [r3, #4]
 80001b0:	f022 0203 	bic.w	r2, r2, #3
 80001b4:	f042 0202 	orr.w	r2, r2, #2
 80001b8:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80001ba:	461a      	mov	r2, r3
 80001bc:	6853      	ldr	r3, [r2, #4]
 80001be:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80001c2:	2b08      	cmp	r3, #8
 80001c4:	d1fa      	bne.n	80001bc <SystemClock_Config+0x70>
  {
  
  }
  LL_Init1msTick(72000000);
 80001c6:	4c06      	ldr	r4, [pc, #24]	; (80001e0 <SystemClock_Config+0x94>)
 80001c8:	4620      	mov	r0, r4
 80001ca:	f000 ffc7 	bl	800115c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80001ce:	4620      	mov	r0, r4
 80001d0:	f000 ffd4 	bl	800117c <LL_SetSystemCoreClock>
}
 80001d4:	bd10      	pop	{r4, pc}
 80001d6:	bf00      	nop
 80001d8:	40022000 	.word	0x40022000
 80001dc:	40021000 	.word	0x40021000
 80001e0:	044aa200 	.word	0x044aa200

080001e4 <main>:
{
 80001e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001e8:	b0a9      	sub	sp, #164	; 0xa4
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001ea:	4cb9      	ldr	r4, [pc, #740]	; (80004d0 <main+0x2ec>)
 80001ec:	69a3      	ldr	r3, [r4, #24]
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	61a3      	str	r3, [r4, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001f4:	69a3      	ldr	r3, [r4, #24]
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80001fc:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->APB1ENR, Periphs);
 80001fe:	69e3      	ldr	r3, [r4, #28]
 8000200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000204:	61e3      	str	r3, [r4, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000206:	69e3      	ldr	r3, [r4, #28]
 8000208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800020c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800020e:	9b01      	ldr	r3, [sp, #4]
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80004e8 <main+0x304>
 8000214:	f8d8 200c 	ldr.w	r2, [r8, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000218:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800021c:	0412      	lsls	r2, r2, #16
 800021e:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 8000220:	4bac      	ldr	r3, [pc, #688]	; (80004d4 <main+0x2f0>)
 8000222:	4313      	orrs	r3, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8000224:	f8c8 300c 	str.w	r3, [r8, #12]
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000228:	4bab      	ldr	r3, [pc, #684]	; (80004d8 <main+0x2f4>)
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000230:	605a      	str	r2, [r3, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000232:	685a      	ldr	r2, [r3, #4]
 8000234:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000238:	605a      	str	r2, [r3, #4]
  SystemClock_Config();
 800023a:	f7ff ff87 	bl	800014c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	2500      	movs	r5, #0
 8000240:	9520      	str	r5, [sp, #128]	; 0x80
 8000242:	9521      	str	r5, [sp, #132]	; 0x84
  SET_BIT(RCC->APB2ENR, Periphs);
 8000244:	69a3      	ldr	r3, [r4, #24]
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800024c:	69a3      	ldr	r3, [r4, #24]
 800024e:	f003 0320 	and.w	r3, r3, #32
 8000252:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 8000254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  SET_BIT(RCC->APB2ENR, Periphs);
 8000256:	69a3      	ldr	r3, [r4, #24]
 8000258:	f043 0304 	orr.w	r3, r3, #4
 800025c:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800025e:	69a3      	ldr	r3, [r4, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 8000266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  SET_BIT(RCC->APB2ENR, Periphs);
 8000268:	69a3      	ldr	r3, [r4, #24]
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	61a3      	str	r3, [r4, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000270:	69a3      	ldr	r3, [r4, #24]
 8000272:	f003 0308 	and.w	r3, r3, #8
 8000276:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8000278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800027a:	4f98      	ldr	r7, [pc, #608]	; (80004dc <main+0x2f8>)
 800027c:	2318      	movs	r3, #24
 800027e:	617b      	str	r3, [r7, #20]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000280:	2340      	movs	r3, #64	; 0x40
 8000282:	613b      	str	r3, [r7, #16]
 8000284:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80004fc <main+0x318>
 8000288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028c:	f8c9 3010 	str.w	r3, [r9, #16]

  /**/
  LL_GPIO_SetOutputPin(SDCARD_CS_GPIO_Port, SDCARD_CS_Pin);

  /**/
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 8000290:	f640 0308 	movw	r3, #2056	; 0x808
 8000294:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000296:	2601      	movs	r6, #1
 8000298:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800029a:	f04f 0a02 	mov.w	sl, #2
 800029e:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 80002a2:	a91d      	add	r1, sp, #116	; 0x74
 80002a4:	4638      	mov	r0, r7
 80002a6:	f000 fd78 	bl	8000d9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80002aa:	f241 0310 	movw	r3, #4112	; 0x1010
 80002ae:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002b0:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80002b2:	2303      	movs	r3, #3
 80002b4:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002b6:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80002b8:	a91d      	add	r1, sp, #116	; 0x74
 80002ba:	4638      	mov	r0, r7
 80002bc:	f000 fd6d 	bl	8000d9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80002c0:	f244 0340 	movw	r3, #16448	; 0x4040
 80002c4:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002c6:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80002c8:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002ca:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80002cc:	a91d      	add	r1, sp, #116	; 0x74
 80002ce:	4638      	mov	r0, r7
 80002d0:	f000 fd63 	bl	8000d9a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDCARD_CS_Pin;
 80002d4:	4b82      	ldr	r3, [pc, #520]	; (80004e0 <main+0x2fc>)
 80002d6:	931d      	str	r3, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002d8:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002da:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002de:	9520      	str	r5, [sp, #128]	; 0x80
  LL_GPIO_Init(SDCARD_CS_GPIO_Port, &GPIO_InitStruct);
 80002e0:	a91d      	add	r1, sp, #116	; 0x74
 80002e2:	4648      	mov	r0, r9
 80002e4:	f000 fd59 	bl	8000d9a <LL_GPIO_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 80002e8:	6963      	ldr	r3, [r4, #20]
 80002ea:	4333      	orrs	r3, r6
 80002ec:	6163      	str	r3, [r4, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002ee:	6963      	ldr	r3, [r4, #20]
 80002f0:	4033      	ands	r3, r6
 80002f2:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 80002f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80002fa:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002fe:	f1c2 0107 	rsb	r1, r2, #7
 8000302:	2904      	cmp	r1, #4
 8000304:	bf28      	it	cs
 8000306:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000308:	1d13      	adds	r3, r2, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	bf8c      	ite	hi
 800030e:	3a03      	subhi	r2, #3
 8000310:	2200      	movls	r2, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000316:	408b      	lsls	r3, r1
 8000318:	43db      	mvns	r3, r3
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	011b      	lsls	r3, r3, #4
 8000322:	b2db      	uxtb	r3, r3
 8000324:	4a6f      	ldr	r2, [pc, #444]	; (80004e4 <main+0x300>)
 8000326:	f882 330d 	strb.w	r3, [r2, #781]	; 0x30d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032e:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000330:	4b6d      	ldr	r3, [pc, #436]	; (80004e8 <main+0x304>)
 8000332:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	2400      	movs	r4, #0
 8000336:	f882 4311 	strb.w	r4, [r2, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800033e:	6013      	str	r3, [r2, #0]
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000340:	2228      	movs	r2, #40	; 0x28
 8000342:	4621      	mov	r1, r4
 8000344:	a81d      	add	r0, sp, #116	; 0x74
 8000346:	f001 ffcf 	bl	80022e8 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	941a      	str	r4, [sp, #104]	; 0x68
 800034c:	941b      	str	r4, [sp, #108]	; 0x6c
  SET_BIT(RCC->APB2ENR, Periphs);
 800034e:	4d60      	ldr	r5, [pc, #384]	; (80004d0 <main+0x2ec>)
 8000350:	69ab      	ldr	r3, [r5, #24]
 8000352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000356:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000358:	69ab      	ldr	r3, [r5, #24]
 800035a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800035e:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 8000360:	9b07      	ldr	r3, [sp, #28]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000362:	69ab      	ldr	r3, [r5, #24]
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800036a:	69ab      	ldr	r3, [r5, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8000372:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8000374:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8000378:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800037a:	f04f 0a09 	mov.w	sl, #9
 800037e:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000382:	f04f 0903 	mov.w	r9, #3
 8000386:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	a917      	add	r1, sp, #92	; 0x5c
 800038c:	4853      	ldr	r0, [pc, #332]	; (80004dc <main+0x2f8>)
 800038e:	f000 fd04 	bl	8000d9a <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000392:	4f56      	ldr	r7, [pc, #344]	; (80004ec <main+0x308>)
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800039a:	f023 0310 	bic.w	r3, r3, #16
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	603b      	str	r3, [r7, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003aa:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f023 0320 	bic.w	r3, r3, #32
 80003b2:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ba:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c2:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003ca:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003d2:	603b      	str	r3, [r7, #0]
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80003d4:	941d      	str	r4, [sp, #116]	; 0x74
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80003d6:	f44f 7882 	mov.w	r8, #260	; 0x104
 80003da:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80003de:	941f      	str	r4, [sp, #124]	; 0x7c
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80003e0:	9420      	str	r4, [sp, #128]	; 0x80
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80003e2:	9421      	str	r4, [sp, #132]	; 0x84
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80003e4:	f44f 7600 	mov.w	r6, #512	; 0x200
 80003e8:	9622      	str	r6, [sp, #136]	; 0x88
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80003ea:	2310      	movs	r3, #16
 80003ec:	9323      	str	r3, [sp, #140]	; 0x8c
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80003ee:	9424      	str	r4, [sp, #144]	; 0x90
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80003f0:	9425      	str	r4, [sp, #148]	; 0x94
  SPI_InitStruct.CRCPoly = 10;
 80003f2:	f04f 0b0a 	mov.w	fp, #10
 80003f6:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80003fa:	a91d      	add	r1, sp, #116	; 0x74
 80003fc:	483c      	ldr	r0, [pc, #240]	; (80004f0 <main+0x30c>)
 80003fe:	f000 fd4d 	bl	8000e9c <LL_SPI_Init>
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	4621      	mov	r1, r4
 8000406:	a81d      	add	r0, sp, #116	; 0x74
 8000408:	f001 ff6e 	bl	80022e8 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	941a      	str	r4, [sp, #104]	; 0x68
 800040e:	941b      	str	r4, [sp, #108]	; 0x6c
  SET_BIT(RCC->APB1ENR, Periphs);
 8000410:	69eb      	ldr	r3, [r5, #28]
 8000412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000416:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000418:	69eb      	ldr	r3, [r5, #28]
 800041a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800041e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000420:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000422:	69ab      	ldr	r3, [r5, #24]
 8000424:	f043 0308 	orr.w	r3, r3, #8
 8000428:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800042a:	69ab      	ldr	r3, [r5, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8000432:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_15;
 8000434:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <main+0x310>)
 8000436:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000438:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800043c:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000440:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80004fc <main+0x318>
 8000444:	a917      	add	r1, sp, #92	; 0x5c
 8000446:	4648      	mov	r0, r9
 8000448:	f000 fca7 	bl	8000d9a <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <main+0x314>)
 800044e:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000450:	2304      	movs	r3, #4
 8000452:	9318      	str	r3, [sp, #96]	; 0x60
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000454:	a917      	add	r1, sp, #92	; 0x5c
 8000456:	4648      	mov	r0, r9
 8000458:	f000 fc9f 	bl	8000d9a <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800045c:	f509 4974 	add.w	r9, r9, #62464	; 0xf400
 8000460:	f109 0944 	add.w	r9, r9, #68	; 0x44
 8000464:	f8d9 3000 	ldr.w	r3, [r9]
 8000468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800046c:	f023 0310 	bic.w	r3, r3, #16
 8000470:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000474:	f8d9 3000 	ldr.w	r3, [r9]
 8000478:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800047c:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000480:	f8d9 3000 	ldr.w	r3, [r9]
 8000484:	f023 0320 	bic.w	r3, r3, #32
 8000488:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800048c:	f8d9 3000 	ldr.w	r3, [r9]
 8000490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000494:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000498:	f8d9 3000 	ldr.w	r3, [r9]
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80004a4:	f8d9 3000 	ldr.w	r3, [r9]
 80004a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ac:	f8c9 3000 	str.w	r3, [r9]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80004b0:	f8d9 3000 	ldr.w	r3, [r9]
 80004b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80004b8:	f8c9 3000 	str.w	r3, [r9]
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80004bc:	941d      	str	r4, [sp, #116]	; 0x74
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80004be:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80004c2:	941f      	str	r4, [sp, #124]	; 0x7c
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80004c4:	9420      	str	r4, [sp, #128]	; 0x80
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80004c6:	9421      	str	r4, [sp, #132]	; 0x84
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80004c8:	9622      	str	r6, [sp, #136]	; 0x88
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80004ca:	9423      	str	r4, [sp, #140]	; 0x8c
 80004cc:	e018      	b.n	8000500 <main+0x31c>
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	05fa0300 	.word	0x05fa0300
 80004d8:	40010000 	.word	0x40010000
 80004dc:	40010800 	.word	0x40010800
 80004e0:	04100010 	.word	0x04100010
 80004e4:	e000e100 	.word	0xe000e100
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	40020030 	.word	0x40020030
 80004f0:	40013000 	.word	0x40013000
 80004f4:	04a000a0 	.word	0x04a000a0
 80004f8:	04400040 	.word	0x04400040
 80004fc:	40010c00 	.word	0x40010c00
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000500:	9424      	str	r4, [sp, #144]	; 0x90
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000502:	9425      	str	r4, [sp, #148]	; 0x94
  SPI_InitStruct.CRCPoly = 10;
 8000504:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000508:	a91d      	add	r1, sp, #116	; 0x74
 800050a:	48c0      	ldr	r0, [pc, #768]	; (800080c <main+0x628>)
 800050c:	f000 fcc6 	bl	8000e9c <LL_SPI_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000510:	940d      	str	r4, [sp, #52]	; 0x34
 8000512:	940e      	str	r4, [sp, #56]	; 0x38
 8000514:	940f      	str	r4, [sp, #60]	; 0x3c
 8000516:	9410      	str	r4, [sp, #64]	; 0x40
 8000518:	9411      	str	r4, [sp, #68]	; 0x44
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800051a:	2220      	movs	r2, #32
 800051c:	4621      	mov	r1, r4
 800051e:	a81d      	add	r0, sp, #116	; 0x74
 8000520:	f001 fee2 	bl	80022e8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000524:	9417      	str	r4, [sp, #92]	; 0x5c
 8000526:	9418      	str	r4, [sp, #96]	; 0x60
 8000528:	9419      	str	r4, [sp, #100]	; 0x64
 800052a:	941a      	str	r4, [sp, #104]	; 0x68
 800052c:	941b      	str	r4, [sp, #108]	; 0x6c
 800052e:	941c      	str	r4, [sp, #112]	; 0x70
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	9412      	str	r4, [sp, #72]	; 0x48
 8000532:	9413      	str	r4, [sp, #76]	; 0x4c
 8000534:	9414      	str	r4, [sp, #80]	; 0x50
 8000536:	9415      	str	r4, [sp, #84]	; 0x54
 8000538:	9416      	str	r4, [sp, #88]	; 0x58
  SET_BIT(RCC->APB2ENR, Periphs);
 800053a:	69ab      	ldr	r3, [r5, #24]
 800053c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000540:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000542:	69ab      	ldr	r3, [r5, #24]
 8000544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000548:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800054a:	9b03      	ldr	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 255;
 800054c:	26ff      	movs	r6, #255	; 0xff
 800054e:	960f      	str	r6, [sp, #60]	; 0x3c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000550:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8000830 <main+0x64c>
 8000554:	a90d      	add	r1, sp, #52	; 0x34
 8000556:	4640      	mov	r0, r8
 8000558:	f000 fcd0 	bl	8000efc <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800055c:	f8d8 3000 	ldr.w	r3, [r8]
 8000560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000564:	f8c8 3000 	str.w	r3, [r8]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000568:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800056c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000570:	f023 0307 	bic.w	r3, r3, #7
 8000574:	f8c8 3008 	str.w	r3, [r8, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000578:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	f8c8 3018 	str.w	r3, [r8, #24]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	931d      	str	r3, [sp, #116]	; 0x74
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000588:	941e      	str	r4, [sp, #120]	; 0x78
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800058a:	941f      	str	r4, [sp, #124]	; 0x7c
  TIM_OC_InitStruct.CompareValue = 0;
 800058c:	9420      	str	r4, [sp, #128]	; 0x80
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800058e:	9421      	str	r4, [sp, #132]	; 0x84
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000590:	9422      	str	r4, [sp, #136]	; 0x88
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000592:	9423      	str	r4, [sp, #140]	; 0x8c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000594:	9424      	str	r4, [sp, #144]	; 0x90
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000596:	aa1d      	add	r2, sp, #116	; 0x74
 8000598:	2101      	movs	r1, #1
 800059a:	4640      	mov	r0, r8
 800059c:	f000 fcee 	bl	8000f7c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80005a0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80005a4:	f023 0304 	bic.w	r3, r3, #4
 80005a8:	f8c8 3018 	str.w	r3, [r8, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80005ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80005b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005b4:	f8c8 3004 	str.w	r3, [r8, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80005b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80005bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005c0:	f8c8 3008 	str.w	r3, [r8, #8]
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80005c4:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80005c6:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80005c8:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_BDTRInitStruct.DeadTime = 0;
 80005ca:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80005ce:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	931b      	str	r3, [sp, #108]	; 0x6c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80005d8:	941c      	str	r4, [sp, #112]	; 0x70
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80005da:	a917      	add	r1, sp, #92	; 0x5c
 80005dc:	4640      	mov	r0, r8
 80005de:	f000 fda3 	bl	8001128 <LL_TIM_BDTR_Init>
  SET_BIT(RCC->APB2ENR, Periphs);
 80005e2:	69ab      	ldr	r3, [r5, #24]
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005ea:	69ab      	ldr	r3, [r5, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80005f2:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80005f4:	4b86      	ldr	r3, [pc, #536]	; (8000810 <main+0x62c>)
 80005f6:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80005f8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000600:	9415      	str	r4, [sp, #84]	; 0x54
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	a912      	add	r1, sp, #72	; 0x48
 8000604:	4883      	ldr	r0, [pc, #524]	; (8000814 <main+0x630>)
 8000606:	f000 fbc8 	bl	8000d9a <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800060a:	f8cd 4076 	str.w	r4, [sp, #118]	; 0x76
 800060e:	f8cd 407a 	str.w	r4, [sp, #122]	; 0x7a
 8000612:	f8cd 407e 	str.w	r4, [sp, #126]	; 0x7e
 8000616:	f8cd 4082 	str.w	r4, [sp, #130]	; 0x82
 800061a:	f8ad 4086 	strh.w	r4, [sp, #134]	; 0x86
  SET_BIT(RCC->APB1ENR, Periphs);
 800061e:	69eb      	ldr	r3, [r5, #28]
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000626:	69eb      	ldr	r3, [r5, #28]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	9317      	str	r3, [sp, #92]	; 0x5c
  (void)tmpreg;
 800062e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  TIM_InitStruct.Prescaler = 282;
 8000630:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8000634:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  TIM_InitStruct.Autoreload = 0x00FF;
 8000638:	961f      	str	r6, [sp, #124]	; 0x7c
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800063a:	a91d      	add	r1, sp, #116	; 0x74
 800063c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000640:	f000 fc5c 	bl	8000efc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000644:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 8000648:	f8db 3000 	ldr.w	r3, [fp]
 800064c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000650:	f8cb 3000 	str.w	r3, [fp]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000654:	f8db 3008 	ldr.w	r3, [fp, #8]
 8000658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800065c:	f023 0307 	bic.w	r3, r3, #7
 8000660:	f8cb 3008 	str.w	r3, [fp, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000664:	f8db 3004 	ldr.w	r3, [fp, #4]
 8000668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800066c:	f8cb 3004 	str.w	r3, [fp, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000670:	f8db 3008 	ldr.w	r3, [fp, #8]
 8000674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000678:	f8cb 3008 	str.w	r3, [fp, #8]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800067c:	941d      	str	r4, [sp, #116]	; 0x74
 800067e:	941e      	str	r4, [sp, #120]	; 0x78
 8000680:	941f      	str	r4, [sp, #124]	; 0x7c
 8000682:	9420      	str	r4, [sp, #128]	; 0x80
 8000684:	9421      	str	r4, [sp, #132]	; 0x84
  SET_BIT(RCC->APB1ENR, Periphs);
 8000686:	69eb      	ldr	r3, [r5, #28]
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800068e:	69eb      	ldr	r3, [r5, #28]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	9312      	str	r3, [sp, #72]	; 0x48
  (void)tmpreg;
 8000696:	9b12      	ldr	r3, [sp, #72]	; 0x48
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000698:	4e5f      	ldr	r6, [pc, #380]	; (8000818 <main+0x634>)
 800069a:	6833      	ldr	r3, [r6, #0]
 800069c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006a0:	f023 0310 	bic.w	r3, r3, #16
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80006aa:	6833      	ldr	r3, [r6, #0]
 80006ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006b0:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80006b2:	6833      	ldr	r3, [r6, #0]
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80006ba:	6833      	ldr	r3, [r6, #0]
 80006bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006c0:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80006c2:	6833      	ldr	r3, [r6, #0]
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80006ca:	6833      	ldr	r3, [r6, #0]
 80006cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d4:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80006d6:	6833      	ldr	r3, [r6, #0]
 80006d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80006dc:	6033      	str	r3, [r6, #0]
  TIM_InitStruct.Prescaler = 0;
 80006de:	f8ad 4074 	strh.w	r4, [sp, #116]	; 0x74
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80006e2:	941e      	str	r4, [sp, #120]	; 0x78
  TIM_InitStruct.Autoreload = 1800;
 80006e4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80006e8:	931f      	str	r3, [sp, #124]	; 0x7c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80006ea:	9420      	str	r4, [sp, #128]	; 0x80
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80006ec:	f8df a144 	ldr.w	sl, [pc, #324]	; 8000834 <main+0x650>
 80006f0:	a91d      	add	r1, sp, #116	; 0x74
 80006f2:	4650      	mov	r0, sl
 80006f4:	f000 fc02 	bl	8000efc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80006f8:	f8da 3000 	ldr.w	r3, [sl]
 80006fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000700:	f8ca 3000 	str.w	r3, [sl]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000704:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800070c:	f023 0307 	bic.w	r3, r3, #7
 8000710:	f8ca 3008 	str.w	r3, [sl, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000714:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800071c:	f8ca 3004 	str.w	r3, [sl, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000720:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000728:	f8ca 3008 	str.w	r3, [sl, #8]
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800072c:	f8cd 4076 	str.w	r4, [sp, #118]	; 0x76
 8000730:	f8cd 407a 	str.w	r4, [sp, #122]	; 0x7a
 8000734:	f8cd 407e 	str.w	r4, [sp, #126]	; 0x7e
 8000738:	f8cd 4082 	str.w	r4, [sp, #130]	; 0x82
 800073c:	f8ad 4086 	strh.w	r4, [sp, #134]	; 0x86
  SET_BIT(RCC->APB1ENR, Periphs);
 8000740:	69eb      	ldr	r3, [r5, #28]
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000748:	69eb      	ldr	r3, [r5, #28]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	930d      	str	r3, [sp, #52]	; 0x34
  (void)tmpreg;
 8000750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  TIM_InitStruct.Prescaler = 3755;
 8000752:	f640 63ab 	movw	r3, #3755	; 0xeab
 8000756:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  TIM_InitStruct.Autoreload = 0x02FF;
 800075a:	f240 23ff 	movw	r3, #767	; 0x2ff
 800075e:	931f      	str	r3, [sp, #124]	; 0x7c
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000760:	4c2e      	ldr	r4, [pc, #184]	; (800081c <main+0x638>)
 8000762:	a91d      	add	r1, sp, #116	; 0x74
 8000764:	4620      	mov	r0, r4
 8000766:	f000 fbc9 	bl	8000efc <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000770:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000772:	68a3      	ldr	r3, [r4, #8]
 8000774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800077e:	6863      	ldr	r3, [r4, #4]
 8000780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000784:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000786:	68a3      	ldr	r3, [r4, #8]
 8000788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800078c:	60a3      	str	r3, [r4, #8]
  initDelay();
 800078e:	f000 fcfb 	bl	8001188 <initDelay>
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000792:	f8da 3000 	ldr.w	r3, [sl]
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	f8ca 3000 	str.w	r3, [sl]
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6023      	str	r3, [r4, #0]
 80007a6:	f8db 3000 	ldr.w	r3, [fp]
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	f8cb 3000 	str.w	r3, [fp]
 80007b2:	f8d8 3000 	ldr.w	r3, [r8]
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	f8c8 3000 	str.w	r3, [r8]
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <main+0x63c>)
 80007c0:	60b3      	str	r3, [r6, #8]
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, &musicBuffer);
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <main+0x640>)
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80007c4:	60f3      	str	r3, [r6, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80007c6:	6833      	ldr	r3, [r6, #0]
 80007c8:	f043 0320 	orr.w	r3, r3, #32
 80007cc:	6033      	str	r3, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80007ce:	6873      	ldr	r3, [r6, #4]
 80007d0:	0c1b      	lsrs	r3, r3, #16
 80007d2:	041b      	lsls	r3, r3, #16
 80007d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d8:	6073      	str	r3, [r6, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80007da:	6833      	ldr	r3, [r6, #0]
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6033      	str	r3, [r6, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80007e2:	6833      	ldr	r3, [r6, #0]
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6033      	str	r3, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UDE);
 80007ea:	f8da 300c 	ldr.w	r3, [sl, #12]
 80007ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f2:	f8ca 300c 	str.w	r3, [sl, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007f6:	f06f 0301 	mvn.w	r3, #1
 80007fa:	6123      	str	r3, [r4, #16]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <main+0x644>)
 80007fe:	6853      	ldr	r3, [r2, #4]
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6053      	str	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <main+0x648>)
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	e015      	b.n	8000838 <main+0x654>
 800080c:	40003800 	.word	0x40003800
 8000810:	04010001 	.word	0x04010001
 8000814:	40010800 	.word	0x40010800
 8000818:	40020080 	.word	0x40020080
 800081c:	40000400 	.word	0x40000400
 8000820:	40012c34 	.word	0x40012c34
 8000824:	20000254 	.word	0x20000254
 8000828:	40013000 	.word	0x40013000
 800082c:	4001300c 	.word	0x4001300c
 8000830:	40012c00 	.word	0x40012c00
 8000834:	40000800 	.word	0x40000800
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer[0]);
 8000838:	4b8e      	ldr	r3, [pc, #568]	; (8000a74 <main+0x890>)
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800083a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	041b      	lsls	r3, r3, #16
 8000842:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000846:	607b      	str	r3, [r7, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	603b      	str	r3, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	603b      	str	r3, [r7, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085e:	6013      	str	r3, [r2, #0]
  OLED_Driver_Device_Init();
 8000860:	f000 feec 	bl	800163c <OLED_Driver_Device_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8000864:	4a84      	ldr	r2, [pc, #528]	; (8000a78 <main+0x894>)
 8000866:	6853      	ldr	r3, [r2, #4]
 8000868:	f023 0301 	bic.w	r3, r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800086e:	4b83      	ldr	r3, [pc, #524]	; (8000a7c <main+0x898>)
 8000870:	f8c9 3008 	str.w	r3, [r9, #8]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087a:	6013      	str	r3, [r2, #0]
  FRESULT res = f_mount(&fatfs_handler, "", 1);
 800087c:	2201      	movs	r2, #1
 800087e:	4980      	ldr	r1, [pc, #512]	; (8000a80 <main+0x89c>)
 8000880:	4880      	ldr	r0, [pc, #512]	; (8000a84 <main+0x8a0>)
 8000882:	f001 fab1 	bl	8001de8 <f_mount>
  if(res != FR_OK) {
 8000886:	b118      	cbz	r0, 8000890 <main+0x6ac>
}
 8000888:	2001      	movs	r0, #1
 800088a:	b029      	add	sp, #164	; 0xa4
 800088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  delayMs(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fc85 	bl	80011a0 <delayMs>
  res = f_open(&audio_fil, MUSIC_FILE_NAME, FA_READ);
 8000896:	2201      	movs	r2, #1
 8000898:	497b      	ldr	r1, [pc, #492]	; (8000a88 <main+0x8a4>)
 800089a:	487c      	ldr	r0, [pc, #496]	; (8000a8c <main+0x8a8>)
 800089c:	f001 facc 	bl	8001e38 <f_open>
  if (res != FR_OK) {
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d1f1      	bne.n	8000888 <main+0x6a4>
  unsigned int f_size = 0;		// Placeholder for size of array
 80008a4:	ab28      	add	r3, sp, #160	; 0xa0
 80008a6:	2200      	movs	r2, #0
 80008a8:	f843 2d04 	str.w	r2, [r3, #-4]!
  res = f_read(&audio_fil,musicBuffer,44,&f_size);	// Read part of file
 80008ac:	222c      	movs	r2, #44	; 0x2c
 80008ae:	4978      	ldr	r1, [pc, #480]	; (8000a90 <main+0x8ac>)
 80008b0:	4876      	ldr	r0, [pc, #472]	; (8000a8c <main+0x8a8>)
 80008b2:	f001 fc47 	bl	8002144 <f_read>
  if(res != FR_OK){		// If not read correctly, return
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d1e6      	bne.n	8000888 <main+0x6a4>
  music_bufferCount = 1;
 80008ba:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <main+0x8b0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
  res = f_read(&audio_fil,musicBuffer,MUSIC_BUFFER_SIZE,&f_size);
 80008c0:	ab27      	add	r3, sp, #156	; 0x9c
 80008c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008c6:	4972      	ldr	r1, [pc, #456]	; (8000a90 <main+0x8ac>)
 80008c8:	4870      	ldr	r0, [pc, #448]	; (8000a8c <main+0x8a8>)
 80008ca:	f001 fc3b 	bl	8002144 <f_read>
  if (res != FR_OK) {
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d1da      	bne.n	8000888 <main+0x6a4>
  res = f_open(&vid_fil, VIDEO_FILE_NAME, FA_READ);
 80008d2:	2201      	movs	r2, #1
 80008d4:	4970      	ldr	r1, [pc, #448]	; (8000a98 <main+0x8b4>)
 80008d6:	4871      	ldr	r0, [pc, #452]	; (8000a9c <main+0x8b8>)
 80008d8:	f001 faae 	bl	8001e38 <f_open>
  if (res != FR_OK) {
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1d3      	bne.n	8000888 <main+0x6a4>
	res = f_read(&vid_fil,vid_buffer,VID_BUFFER_SIZE,&f_size);
 80008e0:	ab27      	add	r3, sp, #156	; 0x9c
 80008e2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008e6:	4963      	ldr	r1, [pc, #396]	; (8000a74 <main+0x890>)
 80008e8:	486c      	ldr	r0, [pc, #432]	; (8000a9c <main+0x8b8>)
 80008ea:	f001 fc2b 	bl	8002144 <f_read>
	if (res != FR_OK) {
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d1ca      	bne.n	8000888 <main+0x6a4>
  video_bufferCount = 1;
 80008f2:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <main+0x8bc>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
  vid_number_of_send = VID_HALF_BUFFER_SIZE/2;
 80008f8:	4b6a      	ldr	r3, [pc, #424]	; (8000aa4 <main+0x8c0>)
 80008fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008fe:	601a      	str	r2, [r3, #0]
  end_of_music_file = 0;
 8000900:	2200      	movs	r2, #0
 8000902:	4b69      	ldr	r3, [pc, #420]	; (8000aa8 <main+0x8c4>)
 8000904:	701a      	strb	r2, [r3, #0]
  end_of_video_file = 0;
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <main+0x8c8>)
 8000908:	701a      	strb	r2, [r3, #0]
  OLED_Driver_CUSTOM_RAM_Address(OLED_Y_MIN, OLED_Y_MAX, 0, 127);
 800090a:	237f      	movs	r3, #127	; 0x7f
 800090c:	2171      	movs	r1, #113	; 0x71
 800090e:	200f      	movs	r0, #15
 8000910:	f000 fe48 	bl	80015a4 <OLED_Driver_CUSTOM_RAM_Address>
  OLED_Driver_Write_Command(0x5C);
 8000914:	205c      	movs	r0, #92	; 0x5c
 8000916:	f000 fde9 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_DC_1;
 800091a:	4a65      	ldr	r2, [pc, #404]	; (8000ab0 <main+0x8cc>)
 800091c:	68d3      	ldr	r3, [r2, #12]
 800091e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8000928:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800092c:	f042 0201 	orr.w	r2, r2, #1
 8000930:	f8c8 2020 	str.w	r2, [r8, #32]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000934:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8000938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800093c:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000940:	f8d8 2000 	ldr.w	r2, [r8]
 8000944:	f042 0201 	orr.w	r2, r2, #1
 8000948:	f8c8 2000 	str.w	r2, [r8]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800094c:	f508 4354 	add.w	r3, r8, #54272	; 0xd400
 8000950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000954:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8000956:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800095a:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8000962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000966:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000968:	6833      	ldr	r3, [r6, #0]
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6033      	str	r3, [r6, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6023      	str	r3, [r4, #0]
 8000980:	f8da 3000 	ldr.w	r3, [sl]
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8ca 3000 	str.w	r3, [sl]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800098c:	4635      	mov	r5, r6
 800098e:	463c      	mov	r4, r7
					OLED_CS_1;
 8000990:	f5a6 4678 	sub.w	r6, r6, #63488	; 0xf800
 8000994:	3e80      	subs	r6, #128	; 0x80
 8000996:	e023      	b.n	80009e0 <main+0x7fc>
			  	end_of_music_file = 2;
 8000998:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <main+0x8c4>)
 800099a:	2202      	movs	r2, #2
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e037      	b.n	8000a10 <main+0x82c>
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009a8:	4a42      	ldr	r2, [pc, #264]	; (8000ab4 <main+0x8d0>)
 80009aa:	6813      	ldr	r3, [r2, #0]
 80009ac:	f023 0301 	bic.w	r3, r3, #1
 80009b0:	6013      	str	r3, [r2, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <main+0x8d4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(TIMx->CCER, Channels);
 80009b8:	6a1a      	ldr	r2, [r3, #32]
 80009ba:	f022 0201 	bic.w	r2, r2, #1
 80009be:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f022 0201 	bic.w	r2, r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e022      	b.n	8000a10 <main+0x82c>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 80009ca:	4a3c      	ldr	r2, [pc, #240]	; (8000abc <main+0x8d8>)
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	6051      	str	r1, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 80009d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d6:	6051      	str	r1, [r2, #4]
	  		if(end_of_video_file == 1){
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d028      	beq.n	8000a2e <main+0x84a>
	  		else if(end_of_video_file == 2){
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d036      	beq.n	8000a4e <main+0x86a>
	  if(end_of_music_file > 0){
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <main+0x8c4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b1a3      	cbz	r3, 8000a10 <main+0x82c>
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80009e6:	4a35      	ldr	r2, [pc, #212]	; (8000abc <main+0x8d8>)
 80009e8:	6812      	ldr	r2, [r2, #0]
		  if(LL_DMA_IsActiveFlag_TC7(DMA1) || LL_DMA_IsActiveFlag_HT7(DMA1)){
 80009ea:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80009ee:	d104      	bne.n	80009fa <main+0x816>
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7));
 80009f0:	4a32      	ldr	r2, [pc, #200]	; (8000abc <main+0x8d8>)
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 80009f8:	d00a      	beq.n	8000a10 <main+0x82c>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80009fa:	4a30      	ldr	r2, [pc, #192]	; (8000abc <main+0x8d8>)
 80009fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000a00:	6051      	str	r1, [r2, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8000a02:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000a06:	6051      	str	r1, [r2, #4]
			  if(end_of_music_file == 1){
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d0c5      	beq.n	8000998 <main+0x7b4>
			  else if(end_of_music_file == 2){
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d0c7      	beq.n	80009a0 <main+0x7bc>
	  if(end_of_video_file > 0){
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <main+0x8c8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0e3      	beq.n	80009e0 <main+0x7fc>
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <main+0x8d8>)
 8000a1a:	6812      	ldr	r2, [r2, #0]
	  	if(LL_DMA_IsActiveFlag_TC3(DMA1) || LL_DMA_IsActiveFlag_HT3(DMA1)){
 8000a1c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8000a20:	d1d3      	bne.n	80009ca <main+0x7e6>
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3));
 8000a22:	4a26      	ldr	r2, [pc, #152]	; (8000abc <main+0x8d8>)
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000a2a:	d0d9      	beq.n	80009e0 <main+0x7fc>
 8000a2c:	e7cd      	b.n	80009ca <main+0x7e6>
					LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer);
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <main+0x890>)
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000a30:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000a32:	6863      	ldr	r3, [r4, #4]
 8000a34:	0c1b      	lsrs	r3, r3, #16
 8000a36:	041b      	lsls	r3, r3, #16
 8000a38:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000a3c:	6063      	str	r3, [r4, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6023      	str	r3, [r4, #0]
					end_of_video_file = 2;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <main+0x8c8>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e7c8      	b.n	80009e0 <main+0x7fc>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <main+0x8dc>)
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f023 0301 	bic.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]
					OLED_CS_1;
 8000a60:	68f3      	ldr	r3, [r6, #12]
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	60f3      	str	r3, [r6, #12]
					OLED_Driver_Clear_Screen();
 8000a6c:	f000 fdc8 	bl	8001600 <OLED_Driver_Clear_Screen>
 8000a70:	e7b6      	b.n	80009e0 <main+0x7fc>
 8000a72:	bf00      	nop
 8000a74:	2000128c 	.word	0x2000128c
 8000a78:	40003800 	.word	0x40003800
 8000a7c:	4000380c 	.word	0x4000380c
 8000a80:	08002310 	.word	0x08002310
 8000a84:	200020b0 	.word	0x200020b0
 8000a88:	08002314 	.word	0x08002314
 8000a8c:	20000030 	.word	0x20000030
 8000a90:	20000254 	.word	0x20000254
 8000a94:	200020ac 	.word	0x200020ac
 8000a98:	08002320 	.word	0x08002320
 8000a9c:	20001e8c 	.word	0x20001e8c
 8000aa0:	20001288 	.word	0x20001288
 8000aa4:	20000250 	.word	0x20000250
 8000aa8:	200022d8 	.word	0x200022d8
 8000aac:	2000002c 	.word	0x2000002c
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40000800 	.word	0x40000800
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40000400 	.word	0x40000400

08000ac4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ac4:	4770      	bx	lr

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler>

08000ace <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	4770      	bx	lr
	...

08000ad8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ad8:	b530      	push	{r4, r5, lr}
 8000ada:	b083      	sub	sp, #12
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8000adc:	4b51      	ldr	r3, [pc, #324]	; (8000c24 <DMA1_Channel3_IRQHandler+0x14c>)
 8000ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae2:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8000ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae8:	605a      	str	r2, [r3, #4]
	// Clear both the half and full transfer flags, at it can be both that activated this buffer
	LL_DMA_ClearFlag_TC3(DMA1);
	LL_DMA_ClearFlag_HT3(DMA1);
	// If the number if pixels sent is greater or equal to the frame's number of pixels, that
	// means it's time to wait for the sync timer and update the OLED.
	if(vid_number_of_send >= VID_FRAME_SIZE){
 8000aea:	4b4f      	ldr	r3, [pc, #316]	; (8000c28 <DMA1_Channel3_IRQHandler+0x150>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000af2:	db2e      	blt.n	8000b52 <DMA1_Channel3_IRQHandler+0x7a>
		OLED_CS_1; // End communication to the OLED display
 8000af4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000af8:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8000afc:	68d3      	ldr	r3, [r2, #12]
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b06:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000b08:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8000b0c:	6913      	ldr	r3, [r2, #16]
 8000b0e:	f013 0f01 	tst.w	r3, #1
 8000b12:	d0fb      	beq.n	8000b0c <DMA1_Channel3_IRQHandler+0x34>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <DMA1_Channel3_IRQHandler+0x154>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	f022 0201 	bic.w	r2, r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000b1e:	f06f 0201 	mvn.w	r2, #1
 8000b22:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CNT, Counter);
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	f041 0101 	orr.w	r1, r1, #1
 8000b2e:	6019      	str	r1, [r3, #0]
		LL_TIM_DisableCounter(TIM3);
		LL_TIM_ClearFlag_UPDATE(TIM3);
		LL_TIM_SetCounter(TIM3, 0);
		LL_TIM_EnableCounter(TIM3);

		vid_number_of_send = 0; // Reset the number of pixels sent to 0
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <DMA1_Channel3_IRQHandler+0x150>)
 8000b32:	601a      	str	r2, [r3, #0]
		// Restart a new OLED write command
		OLED_Driver_CUSTOM_RAM_Address(OLED_Y_MIN, OLED_Y_MAX, 0, 127);
 8000b34:	237f      	movs	r3, #127	; 0x7f
 8000b36:	2171      	movs	r1, #113	; 0x71
 8000b38:	200f      	movs	r0, #15
 8000b3a:	f000 fd33 	bl	80015a4 <OLED_Driver_CUSTOM_RAM_Address>
		OLED_Driver_Write_Command(0x5C);
 8000b3e:	205c      	movs	r0, #92	; 0x5c
 8000b40:	f000 fcd4 	bl	80014ec <OLED_Driver_Write_Command>
		OLED_DC_1;
 8000b44:	4a3a      	ldr	r2, [pc, #232]	; (8000c30 <DMA1_Channel3_IRQHandler+0x158>)
 8000b46:	68d3      	ldr	r3, [r2, #12]
 8000b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b52:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <DMA1_Channel3_IRQHandler+0x15c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f022 0201 	bic.w	r2, r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
	}
	// Disable the DMA, update it with the new array's address and size, then enable it
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, &vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE]);
 8000b5c:	4836      	ldr	r0, [pc, #216]	; (8000c38 <DMA1_Channel3_IRQHandler+0x160>)
 8000b5e:	6802      	ldr	r2, [r0, #0]
 8000b60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b64:	4935      	ldr	r1, [pc, #212]	; (8000c3c <DMA1_Channel3_IRQHandler+0x164>)
 8000b66:	eb01 2242 	add.w	r2, r1, r2, lsl #9
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000b6a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	0c12      	lsrs	r2, r2, #16
 8000b70:	0412      	lsls	r2, r2, #16
 8000b72:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8000b76:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, VID_HALF_BUFFER_SIZE);
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
	// Increment the buffer count variable. If it's equal to the total allocations (2), then set it to 0
	video_bufferCount++;
 8000b80:	6803      	ldr	r3, [r0, #0]
 8000b82:	3301      	adds	r3, #1
	if(video_bufferCount == VID_NUMB_BUFFER){
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d02f      	beq.n	8000be8 <DMA1_Channel3_IRQHandler+0x110>
	video_bufferCount++;
 8000b88:	6003      	str	r3, [r0, #0]
		video_bufferCount = 0;
	}
	// Add to the number of pixels sent what is to be sent out by the DMA (each pixel contains 2 byte)
	vid_number_of_send += VID_HALF_BUFFER_SIZE/2;
 8000b8a:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <DMA1_Channel3_IRQHandler+0x150>)
 8000b8c:	6813      	ldr	r3, [r2, #0]
 8000b8e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b92:	6013      	str	r3, [r2, #0]

	unsigned int f_size = 0;    // Placeholder for size of array written by FatFs
 8000b94:	ab02      	add	r3, sp, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	f843 2d04 	str.w	r2, [r3, #-4]!
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9c:	4c28      	ldr	r4, [pc, #160]	; (8000c40 <DMA1_Channel3_IRQHandler+0x168>)
 8000b9e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000ba2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000baa:	f3bf 8f6f 	isb	sy
	// Disable channel 7's interupt to prevent both this and that interupt trying to read from FatFs at the
	// same time, read the data, then re-enable the interupt
	NVIC_DisableIRQ(DMA1_Channel7_IRQn);
	FRESULT res = f_read(&vid_fil,&vid_buffer[video_bufferCount*VID_HALF_BUFFER_SIZE],VID_HALF_BUFFER_SIZE,&f_size); // Read part of file
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <DMA1_Channel3_IRQHandler+0x160>)
 8000bb0:	6811      	ldr	r1, [r2, #0]
 8000bb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000bb6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000bba:	4820      	ldr	r0, [pc, #128]	; (8000c3c <DMA1_Channel3_IRQHandler+0x164>)
 8000bbc:	eb00 2141 	add.w	r1, r0, r1, lsl #9
 8000bc0:	4820      	ldr	r0, [pc, #128]	; (8000c44 <DMA1_Channel3_IRQHandler+0x16c>)
 8000bc2:	f001 fabf 	bl	8002144 <f_read>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	6025      	str	r5, [r4, #0]
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
	// If the file didn't read currently, just exit while turning off all interupts
	if(res != FR_OK){
 8000bc8:	b190      	cbz	r0, 8000bf0 <DMA1_Channel3_IRQHandler+0x118>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <DMA1_Channel3_IRQHandler+0x15c>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f022 0201 	bic.w	r2, r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f022 0202 	bic.w	r2, r2, #2
 8000bda:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	f022 0204 	bic.w	r2, r2, #4
 8000be2:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000be4:	b003      	add	sp, #12
 8000be6:	bd30      	pop	{r4, r5, pc}
		video_bufferCount = 0;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <DMA1_Channel3_IRQHandler+0x160>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e7cc      	b.n	8000b8a <DMA1_Channel3_IRQHandler+0xb2>
	if(f_size == 0 || f_size != VID_HALF_BUFFER_SIZE){
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000bf6:	d0f5      	beq.n	8000be4 <DMA1_Channel3_IRQHandler+0x10c>
		end_of_video_file = 1;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <DMA1_Channel3_IRQHandler+0x170>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <DMA1_Channel3_IRQHandler+0x15c>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	f022 0201 	bic.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	f022 0202 	bic.w	r2, r2, #2
 8000c0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f022 0204 	bic.w	r2, r2, #4
 8000c16:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f042 0201 	orr.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e7e0      	b.n	8000be4 <DMA1_Channel3_IRQHandler+0x10c>
 8000c22:	bf00      	nop
 8000c24:	40020000 	.word	0x40020000
 8000c28:	20000250 	.word	0x20000250
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40020030 	.word	0x40020030
 8000c38:	20001288 	.word	0x20001288
 8000c3c:	2000128c 	.word	0x2000128c
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	20001e8c 	.word	0x20001e8c
 8000c48:	2000002c 	.word	0x2000002c

08000c4c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c4c:	b500      	push	{lr}
 8000c4e:	b083      	sub	sp, #12
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <DMA1_Channel7_IRQHandler+0xa0>)
 8000c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c56:	605a      	str	r2, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8000c58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c5c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	// Clear both the half and full transfer flags, at it can be both that activated this buffer
  LL_DMA_ClearFlag_TC7(DMA1);
  LL_DMA_ClearFlag_HT7(DMA1);
  // Increment the buffer count variable. If it's equal to the total allocations (2), then set it to 0
  music_bufferCount++;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <DMA1_Channel7_IRQHandler+0xa4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
	if(music_bufferCount == MUSIC_NUMB_BUFFER){
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d020      	beq.n	8000caa <DMA1_Channel7_IRQHandler+0x5e>
  music_bufferCount++;
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <DMA1_Channel7_IRQHandler+0xa4>)
 8000c6a:	6013      	str	r3, [r2, #0]
		music_bufferCount = 0;
	}

  unsigned int f_size = 0;    // Placeholder for size of array written by FatFs
 8000c6c:	ab02      	add	r3, sp, #8
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f843 2d04 	str.w	r2, [r3, #-4]!
  // Read and fill part of the audio buffer
  FRESULT res = f_read(&audio_fil,&musicBuffer[music_bufferCount*MUSIC_HALF_BUFFER_SIZE],MUSIC_HALF_BUFFER_SIZE,&f_size);
 8000c74:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <DMA1_Channel7_IRQHandler+0xa4>)
 8000c76:	6810      	ldr	r0, [r2, #0]
 8000c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7c:	491d      	ldr	r1, [pc, #116]	; (8000cf4 <DMA1_Channel7_IRQHandler+0xa8>)
 8000c7e:	eb01 21c0 	add.w	r1, r1, r0, lsl #11
 8000c82:	481d      	ldr	r0, [pc, #116]	; (8000cf8 <DMA1_Channel7_IRQHandler+0xac>)
 8000c84:	f001 fa5e 	bl	8002144 <f_read>
  // If the file didn't read currently, just exit while turning off all interupts
  if(res != FR_OK){
 8000c88:	b198      	cbz	r0, 8000cb2 <DMA1_Channel7_IRQHandler+0x66>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <DMA1_Channel7_IRQHandler+0xb0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	f022 0202 	bic.w	r2, r2, #2
 8000c9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f022 0204 	bic.w	r2, r2, #4
 8000ca2:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ca4:	b003      	add	sp, #12
 8000ca6:	f85d fb04 	ldr.w	pc, [sp], #4
		music_bufferCount = 0;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <DMA1_Channel7_IRQHandler+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e7dc      	b.n	8000c6c <DMA1_Channel7_IRQHandler+0x20>
  if(f_size == 0 || f_size != MUSIC_HALF_BUFFER_SIZE){
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb8:	d0f4      	beq.n	8000ca4 <DMA1_Channel7_IRQHandler+0x58>
    end_of_music_file = 1;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <DMA1_Channel7_IRQHandler+0xb4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <DMA1_Channel7_IRQHandler+0xb0>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f022 0220 	bic.w	r2, r2, #32
 8000cd0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f022 0202 	bic.w	r2, r2, #2
 8000cd8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f022 0204 	bic.w	r2, r2, #4
 8000ce0:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f042 0201 	orr.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e7db      	b.n	8000ca4 <DMA1_Channel7_IRQHandler+0x58>
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200020ac 	.word	0x200020ac
 8000cf4:	20000254 	.word	0x20000254
 8000cf8:	20000030 	.word	0x20000030
 8000cfc:	40020080 	.word	0x40020080
 8000d00:	200022d8 	.word	0x200022d8

08000d04 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <SystemInit+0x40>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f042 0201 	orr.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d0e:	6859      	ldr	r1, [r3, #4]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <SystemInit+0x44>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d20:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d28:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000d30:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d32:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d36:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SystemInit+0x48>)
 8000d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d3e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	f8ff0000 	.word	0xf8ff0000
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d52:	e003      	b.n	8000d5c <LoopCopyDataInit>

08000d54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d5a:	3104      	adds	r1, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d5c:	480a      	ldr	r0, [pc, #40]	; (8000d88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d64:	d3f6      	bcc.n	8000d54 <CopyDataInit>
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d68:	e002      	b.n	8000d70 <LoopFillZerobss>

08000d6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d6c:	f842 3b04 	str.w	r3, [r2], #4

08000d70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d74:	d3f9      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d76:	f7ff ffc5 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f001 fa91 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fa31 	bl	80001e4 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r3, =_sidata
 8000d84:	080023cc 	.word	0x080023cc
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d8c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000d90:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000d94:	200022f0 	.word	0x200022f0

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>

08000d9a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000d9e:	680e      	ldr	r6, [r1, #0]
 8000da0:	f3c6 260f 	ubfx	r6, r6, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da4:	fa96 f5a6 	rbit	r5, r6
  pinpos = POSITION_VAL(pinmask);
 8000da8:	fab5 f585 	clz	r5, r5

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000dac:	fa36 f305 	lsrs.w	r3, r6, r5
 8000db0:	d071      	beq.n	8000e96 <LL_GPIO_Init+0xfc>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000db2:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000db6:	f04f 0e0f 	mov.w	lr, #15
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000dba:	f04f 0803 	mov.w	r8, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000dbe:	f04f 0904 	mov.w	r9, #4
 8000dc2:	e034      	b.n	8000e2e <LL_GPIO_Init+0x94>
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000dc4:	f1a5 0308 	sub.w	r3, r5, #8
 8000dc8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000dd4:	0e1f      	lsrs	r7, r3, #24
 8000dd6:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	fa93 f4a3 	rbit	r4, r3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	fa0e fa02 	lsl.w	sl, lr, r2
 8000de8:	59c2      	ldr	r2, [r0, r7]
 8000dea:	ea22 0a0a 	bic.w	sl, r2, sl
 8000dee:	fab4 f484 	clz	r4, r4
 8000df2:	00a4      	lsls	r4, r4, #2
 8000df4:	684a      	ldr	r2, [r1, #4]
 8000df6:	fa02 f404 	lsl.w	r4, r2, r4
 8000dfa:	ea4a 0204 	orr.w	r2, sl, r4
 8000dfe:	51c2      	str	r2, [r0, r7]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000e00:	68c4      	ldr	r4, [r0, #12]
 8000e02:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 8000e06:	fa9a f2aa 	rbit	r2, sl
 8000e0a:	fab2 fb82 	clz	fp, r2
 8000e0e:	690a      	ldr	r2, [r1, #16]
 8000e10:	fa02 f20b 	lsl.w	r2, r2, fp
 8000e14:	ea24 040a 	bic.w	r4, r4, sl
 8000e18:	4322      	orrs	r2, r4
 8000e1a:	60c2      	str	r2, [r0, #12]
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e1c:	684a      	ldr	r2, [r1, #4]
 8000e1e:	f022 0208 	bic.w	r2, r2, #8
 8000e22:	2a01      	cmp	r2, #1
 8000e24:	d00d      	beq.n	8000e42 <LL_GPIO_Init+0xa8>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 8000e26:	3501      	adds	r5, #1
  while ((pinmask  >> pinpos) != 0u)
 8000e28:	fa36 f305 	lsrs.w	r3, r6, r5
 8000e2c:	d033      	beq.n	8000e96 <LL_GPIO_Init+0xfc>
    if ((pinmask & (1u << pinpos)) != 0u)
 8000e2e:	fa0c f305 	lsl.w	r3, ip, r5
 8000e32:	4233      	tst	r3, r6
 8000e34:	d0f7      	beq.n	8000e26 <LL_GPIO_Init+0x8c>
      if (pinpos < GPIO_PIN_MASK_POS)
 8000e36:	2d07      	cmp	r5, #7
 8000e38:	d8c4      	bhi.n	8000dc4 <LL_GPIO_Init+0x2a>
        currentpin = (0x00000101uL << pinpos);
 8000e3a:	f240 1301 	movw	r3, #257	; 0x101
 8000e3e:	40ab      	lsls	r3, r5
 8000e40:	e7c8      	b.n	8000dd4 <LL_GPIO_Init+0x3a>
 8000e42:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	fa93 faa3 	rbit	sl, r3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	fa08 f202 	lsl.w	r2, r8, r2
 8000e54:	59c4      	ldr	r4, [r0, r7]
 8000e56:	ea24 0202 	bic.w	r2, r4, r2
 8000e5a:	faba fa8a 	clz	sl, sl
 8000e5e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000e62:	688c      	ldr	r4, [r1, #8]
 8000e64:	fa04 fa0a 	lsl.w	sl, r4, sl
 8000e68:	ea42 020a 	orr.w	r2, r2, sl
 8000e6c:	51c2      	str	r2, [r0, r7]
 8000e6e:	fa93 f4a3 	rbit	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000e72:	fab4 f484 	clz	r4, r4
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	00a4      	lsls	r4, r4, #2
 8000e7c:	fa09 f404 	lsl.w	r4, r9, r4
 8000e80:	ea22 0204 	bic.w	r2, r2, r4
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	68cc      	ldr	r4, [r1, #12]
 8000e8c:	fa04 f303 	lsl.w	r3, r4, r3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	51c2      	str	r2, [r0, r7]
 8000e94:	e7c7      	b.n	8000e26 <LL_GPIO_Init+0x8c>
  }
  return (SUCCESS);
}
 8000e96:	2000      	movs	r0, #0
 8000e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e9c <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000e9c:	6803      	ldr	r3, [r0, #0]
 8000e9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000ea2:	d129      	bne.n	8000ef8 <LL_SPI_Init+0x5c>
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000ea4:	b410      	push	{r4}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000ea6:	6802      	ldr	r2, [r0, #0]
 8000ea8:	680b      	ldr	r3, [r1, #0]
 8000eaa:	684c      	ldr	r4, [r1, #4]
 8000eac:	4323      	orrs	r3, r4
 8000eae:	688c      	ldr	r4, [r1, #8]
 8000eb0:	4323      	orrs	r3, r4
 8000eb2:	68cc      	ldr	r4, [r1, #12]
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	690c      	ldr	r4, [r1, #16]
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	694c      	ldr	r4, [r1, #20]
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	698c      	ldr	r4, [r1, #24]
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	69cc      	ldr	r4, [r1, #28]
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	6a0c      	ldr	r4, [r1, #32]
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ece:	f022 02bf 	bic.w	r2, r2, #191	; 0xbf
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	6003      	str	r3, [r0, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000ed6:	6842      	ldr	r2, [r0, #4]
 8000ed8:	8acb      	ldrh	r3, [r1, #22]
 8000eda:	f022 0204 	bic.w	r2, r2, #4
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000ee2:	6a0b      	ldr	r3, [r1, #32]
 8000ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee8:	d002      	beq.n	8000ef0 <LL_SPI_Init+0x54>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8000eea:	2000      	movs	r0, #0
#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8000eec:	bc10      	pop	{r4}
 8000eee:	4770      	bx	lr
 8000ef0:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000ef2:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	e7f9      	b.n	8000eec <LL_SPI_Init+0x50>
  ErrorStatus status = ERROR;
 8000ef8:	2001      	movs	r0, #1
}
 8000efa:	4770      	bx	lr

08000efc <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000efc:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <LL_TIM_Init+0x7c>)
 8000f00:	4290      	cmp	r0, r2
 8000f02:	d013      	beq.n	8000f2c <LL_TIM_Init+0x30>
 8000f04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f08:	d026      	beq.n	8000f58 <LL_TIM_Init+0x5c>
 8000f0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	d027      	beq.n	8000f62 <LL_TIM_Init+0x66>
 8000f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f16:	4290      	cmp	r0, r2
 8000f18:	d028      	beq.n	8000f6c <LL_TIM_Init+0x70>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f1a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f1c:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f1e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f20:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f22:	6283      	str	r3, [r0, #40]	; 0x28
 8000f24:	e012      	b.n	8000f4c <LL_TIM_Init+0x50>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000f26:	7c0a      	ldrb	r2, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
 8000f2a:	e00f      	b.n	8000f4c <LL_TIM_Init+0x50>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f30:	684a      	ldr	r2, [r1, #4]
 8000f32:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f38:	68ca      	ldr	r2, [r1, #12]
 8000f3a:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f3c:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f3e:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f40:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f42:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f44:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <LL_TIM_Init+0x7c>)
 8000f48:	4298      	cmp	r0, r3
 8000f4a:	d0ec      	beq.n	8000f26 <LL_TIM_Init+0x2a>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000f4c:	6943      	ldr	r3, [r0, #20]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8000f54:	2000      	movs	r0, #0
 8000f56:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f5c:	684a      	ldr	r2, [r1, #4]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	e7e8      	b.n	8000f34 <LL_TIM_Init+0x38>
 8000f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f66:	684a      	ldr	r2, [r1, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	e7e3      	b.n	8000f34 <LL_TIM_Init+0x38>
 8000f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f70:	684a      	ldr	r2, [r1, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	e7de      	b.n	8000f34 <LL_TIM_Init+0x38>
 8000f76:	bf00      	nop
 8000f78:	40012c00 	.word	0x40012c00

08000f7c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000f7c:	b430      	push	{r4, r5}
  ErrorStatus result = ERROR;

  switch (Channel)
 8000f7e:	2910      	cmp	r1, #16
 8000f80:	d05e      	beq.n	8001040 <LL_TIM_OC_Init+0xc4>
 8000f82:	d928      	bls.n	8000fd6 <LL_TIM_OC_Init+0x5a>
 8000f84:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000f88:	f000 808f 	beq.w	80010aa <LL_TIM_OC_Init+0x12e>
 8000f8c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8000f90:	f040 80c5 	bne.w	800111e <LL_TIM_OC_Init+0x1a2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000f94:	6a03      	ldr	r3, [r0, #32]
 8000f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000f9c:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000f9e:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000fa0:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000fa2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8000fa6:	6815      	ldr	r5, [r2, #0]
 8000fa8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fb0:	6915      	ldr	r5, [r2, #16]
 8000fb2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fba:	6855      	ldr	r5, [r2, #4]
 8000fbc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000fc0:	4d58      	ldr	r5, [pc, #352]	; (8001124 <LL_TIM_OC_Init+0x1a8>)
 8000fc2:	42a8      	cmp	r0, r5
 8000fc4:	f000 80a5 	beq.w	8001112 <LL_TIM_OC_Init+0x196>
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000fc8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000fca:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000fcc:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000fce:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000fd0:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000fd2:	2000      	movs	r0, #0
      break;
 8000fd4:	e01e      	b.n	8001014 <LL_TIM_OC_Init+0x98>
  switch (Channel)
 8000fd6:	2901      	cmp	r1, #1
 8000fd8:	f040 80a1 	bne.w	800111e <LL_TIM_OC_Init+0x1a2>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000fdc:	6a03      	ldr	r3, [r0, #32]
 8000fde:	f023 0301 	bic.w	r3, r3, #1
 8000fe2:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000fe4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000fe6:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8000fe8:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8000fea:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8000fee:	6815      	ldr	r5, [r2, #0]
 8000ff0:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8000ff2:	f023 0302 	bic.w	r3, r3, #2
 8000ff6:	6915      	ldr	r5, [r2, #16]
 8000ff8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	6855      	ldr	r5, [r2, #4]
 8001000:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001002:	4d48      	ldr	r5, [pc, #288]	; (8001124 <LL_TIM_OC_Init+0x1a8>)
 8001004:	42a8      	cmp	r0, r5
 8001006:	d007      	beq.n	8001018 <LL_TIM_OC_Init+0x9c>
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001008:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800100a:	6181      	str	r1, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800100c:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800100e:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001010:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001012:	2000      	movs	r0, #0
}
 8001014:	bc30      	pop	{r4, r5}
 8001016:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001018:	f023 0308 	bic.w	r3, r3, #8
 800101c:	6955      	ldr	r5, [r2, #20]
 800101e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001022:	f023 0304 	bic.w	r3, r3, #4
 8001026:	6895      	ldr	r5, [r2, #8]
 8001028:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800102c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001030:	6995      	ldr	r5, [r2, #24]
 8001032:	432c      	orrs	r4, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001034:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8001038:	69d5      	ldr	r5, [r2, #28]
 800103a:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 800103e:	e7e3      	b.n	8001008 <LL_TIM_OC_Init+0x8c>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001040:	6a03      	ldr	r3, [r0, #32]
 8001042:	f023 0310 	bic.w	r3, r3, #16
 8001046:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001048:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800104a:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800104c:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800104e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8001052:	6815      	ldr	r5, [r2, #0]
 8001054:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001058:	f023 0320 	bic.w	r3, r3, #32
 800105c:	6915      	ldr	r5, [r2, #16]
 800105e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001062:	f023 0310 	bic.w	r3, r3, #16
 8001066:	6855      	ldr	r5, [r2, #4]
 8001068:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800106c:	4d2d      	ldr	r5, [pc, #180]	; (8001124 <LL_TIM_OC_Init+0x1a8>)
 800106e:	42a8      	cmp	r0, r5
 8001070:	d006      	beq.n	8001080 <LL_TIM_OC_Init+0x104>
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001072:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001074:	6181      	str	r1, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001076:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001078:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800107a:	6203      	str	r3, [r0, #32]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800107c:	2000      	movs	r0, #0
      break;
 800107e:	e7c9      	b.n	8001014 <LL_TIM_OC_Init+0x98>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001084:	6955      	ldr	r5, [r2, #20]
 8001086:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800108a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800108e:	6895      	ldr	r5, [r2, #8]
 8001090:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001094:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001098:	6995      	ldr	r5, [r2, #24]
 800109a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800109e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80010a2:	69d5      	ldr	r5, [r2, #28]
 80010a4:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80010a8:	e7e3      	b.n	8001072 <LL_TIM_OC_Init+0xf6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80010aa:	6a03      	ldr	r3, [r0, #32]
 80010ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b0:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80010b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80010b4:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80010b6:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80010b8:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 80010bc:	6815      	ldr	r5, [r2, #0]
 80010be:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80010c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010c4:	6915      	ldr	r5, [r2, #16]
 80010c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80010ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ce:	6855      	ldr	r5, [r2, #4]
 80010d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80010d4:	4d13      	ldr	r5, [pc, #76]	; (8001124 <LL_TIM_OC_Init+0x1a8>)
 80010d6:	42a8      	cmp	r0, r5
 80010d8:	d006      	beq.n	80010e8 <LL_TIM_OC_Init+0x16c>
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010da:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80010dc:	61c1      	str	r1, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80010de:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010e0:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010e2:	6203      	str	r3, [r0, #32]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80010e4:	2000      	movs	r0, #0
      break;
 80010e6:	e795      	b.n	8001014 <LL_TIM_OC_Init+0x98>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80010e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80010ec:	6955      	ldr	r5, [r2, #20]
 80010ee:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80010f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010f6:	6895      	ldr	r5, [r2, #8]
 80010f8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80010fc:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001100:	6995      	ldr	r5, [r2, #24]
 8001102:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001106:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 800110a:	69d5      	ldr	r5, [r2, #28]
 800110c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 8001110:	e7e3      	b.n	80010da <LL_TIM_OC_Init+0x15e>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001112:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8001116:	6995      	ldr	r5, [r2, #24]
 8001118:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800111c:	e754      	b.n	8000fc8 <LL_TIM_OC_Init+0x4c>
  ErrorStatus result = ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e778      	b.n	8001014 <LL_TIM_OC_Init+0x98>
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00

08001128 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8001128:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800112a:	688a      	ldr	r2, [r1, #8]
 800112c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800112e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001132:	684a      	ldr	r2, [r1, #4]
 8001134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8001136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800113a:	680a      	ldr	r2, [r1, #0]
 800113c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800113e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001142:	89ca      	ldrh	r2, [r1, #14]
 8001144:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8001146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800114a:	690a      	ldr	r2, [r1, #16]
 800114c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800114e:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001150:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001154:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001156:	6443      	str	r3, [r0, #68]	; 0x44
}
 8001158:	2000      	movs	r0, #0
 800115a:	4770      	bx	lr

0800115c <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <LL_Init1msTick+0x18>)
 800115e:	fba3 3000 	umull	r3, r0, r3, r0
 8001162:	0980      	lsrs	r0, r0, #6
 8001164:	3801      	subs	r0, #1
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <LL_Init1msTick+0x1c>)
 8001168:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	2205      	movs	r2, #5
 8001170:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8001172:	4770      	bx	lr
 8001174:	10624dd3 	.word	0x10624dd3
 8001178:	e000e010 	.word	0xe000e010

0800117c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <LL_SetSystemCoreClock+0x8>)
 800117e:	6018      	str	r0, [r3, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000000 	.word	0x20000000

08001188 <initDelay>:
  WRITE_REG(TIMx->ARR, AutoReload);
 8001188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001190:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 282; // Set prescaler to 1mS
	TIM2->EGR |= (1<<0);// Update register*/
	LL_TIM_SetAutoReload(TIM2, 0x00FF);
	LL_TIM_SetPrescaler(TIM2, 282);
	LL_TIM_EnableCounter(TIM2);
}
 800119e:	4770      	bx	lr

080011a0 <delayMs>:
void delayMs(volatile int ms){
 80011a0:	b082      	sub	sp, #8
 80011a2:	9001      	str	r0, [sp, #4]
	TIM2->CNT = 0x00; // Clear the timer
 80011a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 |= (1<<0); // Enable Counter
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
	while(ms != 0){
 80011b4:	9b01      	ldr	r3, [sp, #4]
 80011b6:	b16b      	cbz	r3, 80011d4 <delayMs+0x34>
		while((TIM2->SR & 0x01) == 0x00){
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000

		} // Wait until update
		ms--;
		TIM2->SR = 0x00; // Clear statue
 80011bc:	2100      	movs	r1, #0
		while((TIM2->SR & 0x01) == 0x00){
 80011be:	6913      	ldr	r3, [r2, #16]
 80011c0:	f013 0f01 	tst.w	r3, #1
 80011c4:	d0fb      	beq.n	80011be <delayMs+0x1e>
		ms--;
 80011c6:	9b01      	ldr	r3, [sp, #4]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	9301      	str	r3, [sp, #4]
		TIM2->SR = 0x00; // Clear statue
 80011cc:	6111      	str	r1, [r2, #16]
	while(ms != 0){
 80011ce:	9b01      	ldr	r3, [sp, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f4      	bne.n	80011be <delayMs+0x1e>
	}
	TIM2->SR = 0x00; // Clear statue
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
	TIM2->CR1 &= ~(1<<0); // Disable Counter
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	f022 0201 	bic.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	b002      	add	sp, #8
 80011e6:	4770      	bx	lr

080011e8 <spiTransfer>:
void sendcommandanddummy(volatile uint8_t command, volatile int arguments, volatile uint8_t numberofresponse);
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

uint8_t spiTransfer(volatile uint8_t data){
 80011e8:	b082      	sub	sp, #8
 80011ea:	f88d 0007 	strb.w	r0, [sp, #7]
	SPI2->DR = data; // Write data into the data register
 80011ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <spiTransfer+0x24>)
 80011f6:	60d3      	str	r3, [r2, #12]
	//while( (SPI2->SR & (1<<1)) == 0){} // Wait until the TXE register is empty
	while( (SPI2->SR & (1<<0)) == 0);
 80011f8:	6893      	ldr	r3, [r2, #8]
 80011fa:	f013 0f01 	tst.w	r3, #1
 80011fe:	d0fb      	beq.n	80011f8 <spiTransfer+0x10>
	//while( (SPI2->SR & (1<<7)) != 0){}
	return SPI2->DR;
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <spiTransfer+0x24>)
 8001202:	68d8      	ldr	r0, [r3, #12]

//	LL_SPI_TransmitData8(SPI2, data);
//	while(LL_SPI_IsActiveFlag_RXNE(SPI2) == 0);
//	while( (SPI2->SR & (1<<0)) == 0);
//	return LL_SPI_ReceiveData8(SPI2);
}
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	b002      	add	sp, #8
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40003800 	.word	0x40003800

08001210 <sendcommandanddummy>:

void sendcommandanddummy(uint8_t command, int arguments, uint8_t numberofresponse){
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	4616      	mov	r6, r2
	uint8_t datatosend[6];

	//Dummy Clock
	//spiTransfer(0xFF);

	datatosend[0] = 0x40 | command;
 8001216:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800121a:	f88d 0000 	strb.w	r0, [sp]
	for(int i=0;i<4;i++){
		datatosend[4-i] = ( arguments & ( 0xFF<<(i*8) ) ) >> (i*8);
 800121e:	f88d 1004 	strb.w	r1, [sp, #4]
 8001222:	120b      	asrs	r3, r1, #8
 8001224:	f88d 3003 	strb.w	r3, [sp, #3]
 8001228:	140b      	asrs	r3, r1, #16
 800122a:	f88d 3002 	strb.w	r3, [sp, #2]
 800122e:	1609      	asrs	r1, r1, #24
 8001230:	f88d 1001 	strb.w	r1, [sp, #1]
	}
	datatosend[5] = crcvalue; //Suppose to be CRC check, but this software is not using it
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <sendcommandanddummy+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f88d 3005 	strb.w	r3, [sp, #5]
 800123c:	466c      	mov	r4, sp
 800123e:	f10d 0506 	add.w	r5, sp, #6

	for(uint8_t i=0;i<6;i++){
		spiTransfer( datatosend[i]); // Write data into the data register
 8001242:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001246:	f7ff ffcf 	bl	80011e8 <spiTransfer>
	for(uint8_t i=0;i<6;i++){
 800124a:	42ac      	cmp	r4, r5
 800124c:	d1f9      	bne.n	8001242 <sendcommandanddummy+0x32>
	}

	//Dummy Clock
	spiTransfer(0xFF);
 800124e:	20ff      	movs	r0, #255	; 0xff
 8001250:	f7ff ffca 	bl	80011e8 <spiTransfer>
	for(int i=0;i<numberofresponse;i++){
 8001254:	4635      	mov	r5, r6
 8001256:	b14e      	cbz	r6, 800126c <sendcommandanddummy+0x5c>
 8001258:	2400      	movs	r4, #0
		returneddata[i] = spiTransfer(0xFF);
 800125a:	27ff      	movs	r7, #255	; 0xff
 800125c:	4e05      	ldr	r6, [pc, #20]	; (8001274 <sendcommandanddummy+0x64>)
 800125e:	4638      	mov	r0, r7
 8001260:	f7ff ffc2 	bl	80011e8 <spiTransfer>
 8001264:	5530      	strb	r0, [r6, r4]
	for(int i=0;i<numberofresponse;i++){
 8001266:	3401      	adds	r4, #1
 8001268:	42ac      	cmp	r4, r5
 800126a:	d1f8      	bne.n	800125e <sendcommandanddummy+0x4e>
	}
}
 800126c:	b003      	add	sp, #12
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001270:	20000020 	.word	0x20000020
 8001274:	200022dc 	.word	0x200022dc

08001278 <disk_status>:
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	return 0;
}
 8001278:	2000      	movs	r0, #0
 800127a:	4770      	bx	lr

0800127c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive number to identify the drive */
)
{
 800127c:	b570      	push	{r4, r5, r6, lr}
	SPI2->CR1 &= ~(0b111<<3); // Set baud rate to MAX4
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <disk_initialize+0x15c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001286:	601a      	str	r2, [r3, #0]
	SPI2->CR1 |= (0b110<<3); // Set baud rate to 250Khz (to start up the SD card)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800128e:	601a      	str	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001290:	f503 4354 	add.w	r3, r3, #54272	; 0xd400
 8001294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	2414      	movs	r4, #20
	//Pulse the SD card 74+ time to wake it up
	SS_HIGH //SS pin HIGH

	for(uint8_t i=0;i<20;i++){ //Keep clocking the SD card until it wakes up
		spiTransfer(0xFF);
 800129c:	25ff      	movs	r5, #255	; 0xff
 800129e:	4628      	mov	r0, r5
 80012a0:	f7ff ffa2 	bl	80011e8 <spiTransfer>
 80012a4:	1e63      	subs	r3, r4, #1
	for(uint8_t i=0;i<20;i++){ //Keep clocking the SD card until it wakes up
 80012a6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80012aa:	d1f8      	bne.n	800129e <disk_initialize+0x22>
	}
	//Send CMD0 to reset the SDcard
	crcvalue = 0x95;
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <disk_initialize+0x160>)
 80012ae:	2295      	movs	r2, #149	; 0x95
 80012b0:	701a      	strb	r2, [r3, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <disk_initialize+0x164>)
 80012b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b8:	615a      	str	r2, [r3, #20]
	SS_LOW //SS pin LOW
	sendcommandanddummy(0, 0, 1);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2100      	movs	r1, #0
 80012be:	4608      	mov	r0, r1
 80012c0:	f7ff ffa6 	bl	8001210 <sendcommandanddummy>
	if(returneddata[0] != 1){
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <disk_initialize+0x168>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d009      	beq.n	80012e2 <disk_initialize+0x66>
 80012ce:	2414      	movs	r4, #20
	  uint8_t temp;
	  for(int i=0;i<20;i++){
	    temp = spiTransfer(0xFF);
 80012d0:	25ff      	movs	r5, #255	; 0xff
 80012d2:	4628      	mov	r0, r5
 80012d4:	f7ff ff88 	bl	80011e8 <spiTransfer>
	    if(temp == 0x01){break;}
 80012d8:	2801      	cmp	r0, #1
 80012da:	d07a      	beq.n	80013d2 <disk_initialize+0x156>
	  for(int i=0;i<20;i++){
 80012dc:	3c01      	subs	r4, #1
 80012de:	d1f8      	bne.n	80012d2 <disk_initialize+0x56>
 80012e0:	e077      	b.n	80013d2 <disk_initialize+0x156>
	  }
	  return 0;
	}
	while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <disk_initialize+0x15c>)
 80012e4:	6893      	ldr	r3, [r2, #8]
 80012e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012ea:	d1fb      	bne.n	80012e4 <disk_initialize+0x68>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <disk_initialize+0x164>)
 80012ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f2:	611a      	str	r2, [r3, #16]
//	if(returneddata[0] != 0x01){
//	  return 0;
//	}

	//Send CMD8
	crcvalue = 0x87;
 80012f4:	4939      	ldr	r1, [pc, #228]	; (80013dc <disk_initialize+0x160>)
 80012f6:	2087      	movs	r0, #135	; 0x87
 80012f8:	7008      	strb	r0, [r1, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80012fa:	615a      	str	r2, [r3, #20]
	SS_LOW //SS pin LOW
	sendcommandanddummy(8, 0x1AA, 5);
 80012fc:	2205      	movs	r2, #5
 80012fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001302:	2008      	movs	r0, #8
 8001304:	f7ff ff84 	bl	8001210 <sendcommandanddummy>
	while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8001308:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <disk_initialize+0x15c>)
 800130a:	6893      	ldr	r3, [r2, #8]
 800130c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001310:	d1fb      	bne.n	800130a <disk_initialize+0x8e>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <disk_initialize+0x164>)
 8001314:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001318:	6119      	str	r1, [r3, #16]
	SS_HIGH //SS pin HIGH

	crcvalue = 0x01;
 800131a:	2201      	movs	r2, #1
 800131c:	482f      	ldr	r0, [pc, #188]	; (80013dc <disk_initialize+0x160>)
 800131e:	7002      	strb	r2, [r0, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001320:	6159      	str	r1, [r3, #20]
	//Send ACMD41 (So CMD55 + CMD41) and wait until it recieves 0x00
	SS_LOW //SS pin LOW
	sendcommandanddummy(55, 0, 1);
 8001322:	2100      	movs	r1, #0
 8001324:	2037      	movs	r0, #55	; 0x37
 8001326:	f7ff ff73 	bl	8001210 <sendcommandanddummy>
	if(returneddata[0] == 0x05){
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <disk_initialize+0x168>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b05      	cmp	r3, #5
 8001332:	d009      	beq.n	8001348 <disk_initialize+0xcc>
	      sendcommandanddummy(1, 0, 1);
	      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
	    }
  }
	else{
	  sendcommandanddummy(41, 0x40000000, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800133a:	2029      	movs	r0, #41	; 0x29
 800133c:	f7ff ff68 	bl	8001210 <sendcommandanddummy>
    while(returneddata[0] != 0x00){
 8001340:	4d28      	ldr	r5, [pc, #160]	; (80013e4 <disk_initialize+0x168>)
      delayMs(20);
 8001342:	2614      	movs	r6, #20
      sendcommandanddummy(55, 0, 1);
      sendcommandanddummy(41, 0x40000000, 1);
      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8001344:	4c24      	ldr	r4, [pc, #144]	; (80013d8 <disk_initialize+0x15c>)
    while(returneddata[0] != 0x00){
 8001346:	e02a      	b.n	800139e <disk_initialize+0x122>
	    sendcommandanddummy(1, 0, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	2100      	movs	r1, #0
 800134c:	4610      	mov	r0, r2
 800134e:	f7ff ff5f 	bl	8001210 <sendcommandanddummy>
	    while(returneddata[0] != 0x00){
 8001352:	4d24      	ldr	r5, [pc, #144]	; (80013e4 <disk_initialize+0x168>)
	      delayMs(20);
 8001354:	2614      	movs	r6, #20
	      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8001356:	4c20      	ldr	r4, [pc, #128]	; (80013d8 <disk_initialize+0x15c>)
	    while(returneddata[0] != 0x00){
 8001358:	e00b      	b.n	8001372 <disk_initialize+0xf6>
	      delayMs(20);
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff ff20 	bl	80011a0 <delayMs>
	      sendcommandanddummy(1, 0, 1);
 8001360:	2201      	movs	r2, #1
 8001362:	2100      	movs	r1, #0
 8001364:	4610      	mov	r0, r2
 8001366:	f7ff ff53 	bl	8001210 <sendcommandanddummy>
	      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 800136a:	68a3      	ldr	r3, [r4, #8]
 800136c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001370:	d1fb      	bne.n	800136a <disk_initialize+0xee>
	    while(returneddata[0] != 0x00){
 8001372:	782b      	ldrb	r3, [r5, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <disk_initialize+0xde>
 8001378:	e014      	b.n	80013a4 <disk_initialize+0x128>
      delayMs(20);
 800137a:	4630      	mov	r0, r6
 800137c:	f7ff ff10 	bl	80011a0 <delayMs>
      sendcommandanddummy(55, 0, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	2037      	movs	r0, #55	; 0x37
 8001386:	f7ff ff43 	bl	8001210 <sendcommandanddummy>
      sendcommandanddummy(41, 0x40000000, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001390:	2029      	movs	r0, #41	; 0x29
 8001392:	f7ff ff3d 	bl	8001210 <sendcommandanddummy>
      while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 8001396:	68a3      	ldr	r3, [r4, #8]
 8001398:	f013 0f80 	tst.w	r3, #128	; 0x80
 800139c:	d1fb      	bne.n	8001396 <disk_initialize+0x11a>
    while(returneddata[0] != 0x00){
 800139e:	782b      	ldrb	r3, [r5, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1ea      	bne.n	800137a <disk_initialize+0xfe>
    }
	}
	crcvalue = 0xFF;
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <disk_initialize+0x160>)
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	701a      	strb	r2, [r3, #0]
	sendcommandanddummy(16,512,1); //Set blocks to 512 bytes
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	2010      	movs	r0, #16
 80013b2:	f7ff ff2d 	bl	8001210 <sendcommandanddummy>

	while( (SPI2->SR & (1<<7)) != 0); //Wait until bus is cleared
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <disk_initialize+0x15c>)
 80013b8:	6893      	ldr	r3, [r2, #8]
 80013ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013be:	d1fb      	bne.n	80013b8 <disk_initialize+0x13c>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <disk_initialize+0x164>)
 80013c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c6:	611a      	str	r2, [r3, #16]
	SS_HIGH //SS pin HIGH
	SPI2->CR1 &= ~(0b111<<3); // Set baud rate to MAX4
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <disk_initialize+0x15c>)
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80013d0:	6013      	str	r3, [r2, #0]
	//SPI2->CR1 |= (0b110<<3);
	return 0;
}
 80013d2:	2000      	movs	r0, #0
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
 80013d6:	bf00      	nop
 80013d8:	40003800 	.word	0x40003800
 80013dc:	20000020 	.word	0x20000020
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	200022dc 	.word	0x200022dc

080013e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	b083      	sub	sp, #12
 80013ee:	4688      	mov	r8, r1
 80013f0:	4617      	mov	r7, r2
 80013f2:	461e      	mov	r6, r3
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <disk_read+0xf4>)
 80013f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fa:	615a      	str	r2, [r3, #20]
	SS_LOW

  sendcommandanddummy(23,count,1);
 80013fc:	2201      	movs	r2, #1
 80013fe:	4631      	mov	r1, r6
 8001400:	2017      	movs	r0, #23
 8001402:	f7ff ff05 	bl	8001210 <sendcommandanddummy>

	sendcommandanddummy(18,sector*512,1);
 8001406:	2201      	movs	r2, #1
 8001408:	0279      	lsls	r1, r7, #9
 800140a:	2012      	movs	r0, #18
 800140c:	f7ff ff00 	bl	8001210 <sendcommandanddummy>
	//Dummy Clock
	spiTransfer(0xFF);
 8001410:	20ff      	movs	r0, #255	; 0xff
 8001412:	f7ff fee9 	bl	80011e8 <spiTransfer>
	//SPI2->DR = 0xFF;

	for(volatile int j=0;j<count;j++){
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
 800141c:	429e      	cmp	r6, r3
 800141e:	d945      	bls.n	80014ac <disk_read+0xc4>

		while( spiTransfer(0xFF) != 0xFE); //Wait until data token is recieved

		while( (SPI2->SR & (1<<7)) != 0);
 8001420:	4c2f      	ldr	r4, [pc, #188]	; (80014e0 <disk_read+0xf8>)
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001422:	4d30      	ldr	r5, [pc, #192]	; (80014e4 <disk_read+0xfc>)
		while( spiTransfer(0xFF) != 0xFE); //Wait until data token is recieved
 8001424:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8001428:	4648      	mov	r0, r9
 800142a:	f7ff fedd 	bl	80011e8 <spiTransfer>
 800142e:	28fe      	cmp	r0, #254	; 0xfe
 8001430:	d1fa      	bne.n	8001428 <disk_read+0x40>
		while( (SPI2->SR & (1<<7)) != 0);
 8001432:	68a3      	ldr	r3, [r4, #8]
 8001434:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001438:	d1fb      	bne.n	8001432 <disk_read+0x4a>

		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_4, buff+(512U*j));
 800143a:	9b01      	ldr	r3, [sp, #4]
 800143c:	eb08 2343 	add.w	r3, r8, r3, lsl #9
 8001440:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001442:	686b      	ldr	r3, [r5, #4]
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	606b      	str	r3, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	602b      	str	r3, [r5, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6063      	str	r3, [r4, #4]
 800145e:	f44f 7200 	mov.w	r2, #512	; 0x200
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, 512);
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
		LL_SPI_EnableDMAReq_RX(SPI2);

		for(int i=0;i<512;i++){
			SPI2->DR = 0xFF; // Write data into the data register
 8001462:	21ff      	movs	r1, #255	; 0xff
 8001464:	60e1      	str	r1, [r4, #12]
			while( (SPI2->SR & (1<<1)) == 0); // Wait until the TXE register is empty
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	f013 0f02 	tst.w	r3, #2
 800146c:	d0fb      	beq.n	8001466 <disk_read+0x7e>
		for(int i=0;i<512;i++){
 800146e:	3a01      	subs	r2, #1
 8001470:	d1f8      	bne.n	8001464 <disk_read+0x7c>
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <disk_read+0x100>)
 8001474:	6813      	ldr	r3, [r2, #0]
		}
		while(1){		// Check if DMA is still doing thing from last request
			if(LL_DMA_IsActiveFlag_TC4(DMA1) != 0){
 8001476:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800147a:	d0fb      	beq.n	8001474 <disk_read+0x8c>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	f023 0301 	bic.w	r3, r3, #1
 8001482:	602b      	str	r3, [r5, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <disk_read+0x100>)
 8001486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6063      	str	r3, [r4, #4]
		LL_SPI_DisableDMAReq_RX(SPI2);

		//while( (SPI2->SR & (1<<7)) != 0);
		//To get CRC, which we will not use
		for(int i=0;i<2;i++){
			spiTransfer(0xFF);
 8001494:	20ff      	movs	r0, #255	; 0xff
 8001496:	f7ff fea7 	bl	80011e8 <spiTransfer>
 800149a:	20ff      	movs	r0, #255	; 0xff
 800149c:	f7ff fea4 	bl	80011e8 <spiTransfer>
	for(volatile int j=0;j<count;j++){
 80014a0:	9b01      	ldr	r3, [sp, #4]
 80014a2:	3301      	adds	r3, #1
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	42b3      	cmp	r3, r6
 80014aa:	d3bb      	bcc.n	8001424 <disk_read+0x3c>
		}
	}
	sendcommandanddummy(12,sector,0); // Stop the multiple block read
 80014ac:	2200      	movs	r2, #0
 80014ae:	4639      	mov	r1, r7
 80014b0:	200c      	movs	r0, #12
 80014b2:	f7ff fead 	bl	8001210 <sendcommandanddummy>
	while( spiTransfer(0xFF) == 0x00 ){} //Wait until data token is recieved
 80014b6:	24ff      	movs	r4, #255	; 0xff
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff fe95 	bl	80011e8 <spiTransfer>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d0fa      	beq.n	80014b8 <disk_read+0xd0>
	while( (SPI2->SR & (1<<7)) != 0){} //Wait until bus is cleared
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <disk_read+0xf8>)
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80014ca:	d1fb      	bne.n	80014c4 <disk_read+0xdc>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <disk_read+0xf4>)
 80014ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d2:	611a      	str	r2, [r3, #16]
	SS_HIGH
	return 0;
}
 80014d4:	2000      	movs	r0, #0
 80014d6:	b003      	add	sp, #12
 80014d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014dc:	40010c00 	.word	0x40010c00
 80014e0:	40003800 	.word	0x40003800
 80014e4:	40020044 	.word	0x40020044
 80014e8:	40020000 	.word	0x40020000

080014ec <OLED_Driver_Write_Command>:
#include "display.h"

volatile uint8_t color_byte[2],color_fill_byte[2];


void OLED_Driver_Write_Command(volatile uint8_t cmd)  {
 80014ec:	b082      	sub	sp, #8
 80014ee:	f88d 0007 	strb.w	r0, [sp, #7]

  OLED_CS_0;
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <OLED_Driver_Write_Command+0x38>)
 80014f4:	68d3      	ldr	r3, [r2, #12]
 80014f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014fe:	60d3      	str	r3, [r2, #12]
  OLED_DC_0;
 8001500:	68d3      	ldr	r3, [r2, #12]
 8001502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001506:	f023 0310 	bic.w	r3, r3, #16
 800150a:	60d3      	str	r3, [r2, #12]
  SPI_Write_Byte(cmd);
 800150c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 8001516:	60d3      	str	r3, [r2, #12]
 8001518:	6893      	ldr	r3, [r2, #8]
 800151a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800151e:	d1fb      	bne.n	8001518 <OLED_Driver_Write_Command+0x2c>

}
 8001520:	b002      	add	sp, #8
 8001522:	4770      	bx	lr
 8001524:	40010800 	.word	0x40010800

08001528 <OLED_Driver_Write_Data>:

void OLED_Driver_Write_Data(volatile uint8_t dat) {
 8001528:	b082      	sub	sp, #8
 800152a:	f88d 0007 	strb.w	r0, [sp, #7]

  OLED_CS_0;
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <OLED_Driver_Write_Data+0x38>)
 8001530:	68d3      	ldr	r3, [r2, #12]
 8001532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800153a:	60d3      	str	r3, [r2, #12]
  OLED_DC_1;
 800153c:	68d3      	ldr	r3, [r2, #12]
 800153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	60d3      	str	r3, [r2, #12]
  SPI_Write_Byte(dat);
 8001548:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 8001552:	60d3      	str	r3, [r2, #12]
 8001554:	6893      	ldr	r3, [r2, #8]
 8001556:	f013 0f80 	tst.w	r3, #128	; 0x80
 800155a:	d1fb      	bne.n	8001554 <OLED_Driver_Write_Data+0x2c>

}
 800155c:	b002      	add	sp, #8
 800155e:	4770      	bx	lr
 8001560:	40010800 	.word	0x40010800

08001564 <OLED_Driver_RAM_Address>:
void OLED_Driver_Set_FillColor(volatile uint16_t color)  {
  color_fill_byte[0] = (uint8_t)(color >> 8);
  color_fill_byte[1] = (uint8_t)(color & 0x00ff);
}

void OLED_Driver_RAM_Address(void)  {
 8001564:	b538      	push	{r3, r4, r5, lr}

  OLED_Driver_Write_Command(0x15);
 8001566:	2015      	movs	r0, #21
 8001568:	f7ff ffc0 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ffdb 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f);
 8001572:	207f      	movs	r0, #127	; 0x7f
 8001574:	f7ff ffd8 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 8001578:	4c09      	ldr	r4, [pc, #36]	; (80015a0 <OLED_Driver_RAM_Address+0x3c>)
 800157a:	68e3      	ldr	r3, [r4, #12]
 800157c:	f244 0540 	movw	r5, #16448	; 0x4040
 8001580:	432b      	orrs	r3, r5
 8001582:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0x75);
 8001584:	2075      	movs	r0, #117	; 0x75
 8001586:	f7ff ffb1 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff ffcc 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f);
 8001590:	207f      	movs	r0, #127	; 0x7f
 8001592:	f7ff ffc9 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 8001596:	68e3      	ldr	r3, [r4, #12]
 8001598:	432b      	orrs	r3, r5
 800159a:	60e3      	str	r3, [r4, #12]
}
 800159c:	bd38      	pop	{r3, r4, r5, pc}
 800159e:	bf00      	nop
 80015a0:	40010800 	.word	0x40010800

080015a4 <OLED_Driver_CUSTOM_RAM_Address>:

void OLED_Driver_CUSTOM_RAM_Address(volatile uint8_t s_row, volatile uint8_t e_row, volatile uint8_t s_col, volatile uint8_t e_col)  {
 80015a4:	b530      	push	{r4, r5, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	f88d 0007 	strb.w	r0, [sp, #7]
 80015ac:	f88d 1006 	strb.w	r1, [sp, #6]
 80015b0:	f88d 2005 	strb.w	r2, [sp, #5]
 80015b4:	f88d 3004 	strb.w	r3, [sp, #4]

  OLED_Driver_Write_Command(0x15);
 80015b8:	2015      	movs	r0, #21
 80015ba:	f7ff ff97 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(s_col);
 80015be:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80015c2:	f7ff ffb1 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(e_col);
 80015c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80015ca:	f7ff ffad 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80015ce:	4c0b      	ldr	r4, [pc, #44]	; (80015fc <OLED_Driver_CUSTOM_RAM_Address+0x58>)
 80015d0:	68e3      	ldr	r3, [r4, #12]
 80015d2:	f244 0540 	movw	r5, #16448	; 0x4040
 80015d6:	432b      	orrs	r3, r5
 80015d8:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0x75);
 80015da:	2075      	movs	r0, #117	; 0x75
 80015dc:	f7ff ff86 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(s_row);
 80015e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80015e4:	f7ff ffa0 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(e_row);
 80015e8:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80015ec:	f7ff ff9c 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80015f0:	68e3      	ldr	r3, [r4, #12]
 80015f2:	432b      	orrs	r3, r5
 80015f4:	60e3      	str	r3, [r4, #12]
}
 80015f6:	b003      	add	sp, #12
 80015f8:	bd30      	pop	{r4, r5, pc}
 80015fa:	bf00      	nop
 80015fc:	40010800 	.word	0x40010800

08001600 <OLED_Driver_Clear_Screen>:

void OLED_Driver_Clear_Screen(void)  {
 8001600:	b570      	push	{r4, r5, r6, lr}

  int i,j;

  uint8_t clear_byte[] = {0x00, 0x00};
  OLED_Driver_RAM_Address();
 8001602:	f7ff ffaf 	bl	8001564 <OLED_Driver_RAM_Address>
  OLED_Driver_Write_Command(0x5C);
 8001606:	205c      	movs	r0, #92	; 0x5c
 8001608:	f7ff ff70 	bl	80014ec <OLED_Driver_Write_Command>
 800160c:	2680      	movs	r6, #128	; 0x80
  for(i=0;i<128;i++)  {
    for(j=0;j<128;j++)  {
      OLED_Driver_Write_Data(clear_byte[0]);
 800160e:	2500      	movs	r5, #0
void OLED_Driver_Clear_Screen(void)  {
 8001610:	2480      	movs	r4, #128	; 0x80
      OLED_Driver_Write_Data(clear_byte[0]);
 8001612:	4628      	mov	r0, r5
 8001614:	f7ff ff88 	bl	8001528 <OLED_Driver_Write_Data>
      OLED_Driver_Write_Data(clear_byte[1]);
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff ff85 	bl	8001528 <OLED_Driver_Write_Data>
    for(j=0;j<128;j++)  {
 800161e:	3c01      	subs	r4, #1
 8001620:	d1f7      	bne.n	8001612 <OLED_Driver_Clear_Screen+0x12>
  for(i=0;i<128;i++)  {
 8001622:	3e01      	subs	r6, #1
 8001624:	d1f4      	bne.n	8001610 <OLED_Driver_Clear_Screen+0x10>
    }
  }
  OLED_CS_1;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <OLED_Driver_Clear_Screen+0x38>)
 8001628:	68d3      	ldr	r3, [r2, #12]
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bd70      	pop	{r4, r5, r6, pc}
 8001636:	bf00      	nop
 8001638:	40010800 	.word	0x40010800

0800163c <OLED_Driver_Device_Init>:
  OLED_Driver_Write_Data(color_byte[1]);

  OLED_CS_1;
}

void OLED_Driver_Device_Init(void) {
 800163c:	b538      	push	{r3, r4, r5, lr}

  OLED_DC_0;
 800163e:	4c7f      	ldr	r4, [pc, #508]	; (800183c <OLED_Driver_Device_Init+0x200>)
 8001640:	68e3      	ldr	r3, [r4, #12]
 8001642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001646:	f023 0310 	bic.w	r3, r3, #16
 800164a:	60e3      	str	r3, [r4, #12]
  OLED_CS_1;
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	f244 0540 	movw	r5, #16448	; 0x4040
 8001652:	432b      	orrs	r3, r5
 8001654:	60e3      	str	r3, [r4, #12]


  OLED_RST_0;
 8001656:	68e3      	ldr	r3, [r4, #12]
 8001658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800165c:	f023 0308 	bic.w	r3, r3, #8
 8001660:	60e3      	str	r3, [r4, #12]
  delayMs(500);
 8001662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001666:	f7ff fd9b 	bl	80011a0 <delayMs>
  OLED_RST_1;
 800166a:	68e3      	ldr	r3, [r4, #12]
 800166c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	60e3      	str	r3, [r4, #12]
  delayMs(500);
 8001676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800167a:	f7ff fd91 	bl	80011a0 <delayMs>


  OLED_Driver_Write_Command(0xfd);  // command lock
 800167e:	20fd      	movs	r0, #253	; 0xfd
 8001680:	f7ff ff34 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x12);
 8001684:	2012      	movs	r0, #18
 8001686:	f7ff ff4f 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 800168a:	68e3      	ldr	r3, [r4, #12]
 800168c:	432b      	orrs	r3, r5
 800168e:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xfd);  // command lock
 8001690:	20fd      	movs	r0, #253	; 0xfd
 8001692:	f7ff ff2b 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xB1);
 8001696:	20b1      	movs	r0, #177	; 0xb1
 8001698:	f7ff ff46 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 800169c:	68e3      	ldr	r3, [r4, #12]
 800169e:	432b      	orrs	r3, r5
 80016a0:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xae);  // display off
 80016a2:	20ae      	movs	r0, #174	; 0xae
 80016a4:	f7ff ff22 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_CS_1;
 80016a8:	68e3      	ldr	r3, [r4, #12]
 80016aa:	432b      	orrs	r3, r5
 80016ac:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xa4);  // Normal Display mode
 80016ae:	20a4      	movs	r0, #164	; 0xa4
 80016b0:	f7ff ff1c 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_CS_1;
 80016b4:	68e3      	ldr	r3, [r4, #12]
 80016b6:	432b      	orrs	r3, r5
 80016b8:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0x15);  //set column address
 80016ba:	2015      	movs	r0, #21
 80016bc:	f7ff ff16 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00); //column address start 00
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff ff31 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f); //column address end 127
 80016c6:	207f      	movs	r0, #127	; 0x7f
 80016c8:	f7ff ff2e 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80016cc:	68e3      	ldr	r3, [r4, #12]
 80016ce:	432b      	orrs	r3, r5
 80016d0:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0x75);  //set row address
 80016d2:	2075      	movs	r0, #117	; 0x75
 80016d4:	f7ff ff0a 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00); //row address start 00
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff25 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x7f); //row address end 127
 80016de:	207f      	movs	r0, #127	; 0x7f
 80016e0:	f7ff ff22 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80016e4:	68e3      	ldr	r3, [r4, #12]
 80016e6:	432b      	orrs	r3, r5
 80016e8:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xB3);
 80016ea:	20b3      	movs	r0, #179	; 0xb3
 80016ec:	f7ff fefe 	bl	80014ec <OLED_Driver_Write_Command>
  //OLED_Driver_Write_Data(0xF1);
  OLED_Driver_Write_Data(0xF0);
 80016f0:	20f0      	movs	r0, #240	; 0xf0
 80016f2:	f7ff ff19 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80016f6:	68e3      	ldr	r3, [r4, #12]
 80016f8:	432b      	orrs	r3, r5
 80016fa:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xCA);
 80016fc:	20ca      	movs	r0, #202	; 0xca
 80016fe:	f7ff fef5 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x7F);
 8001702:	207f      	movs	r0, #127	; 0x7f
 8001704:	f7ff ff10 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 8001708:	68e3      	ldr	r3, [r4, #12]
 800170a:	432b      	orrs	r3, r5
 800170c:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xa0);  //set re-map & data format
 800170e:	20a0      	movs	r0, #160	; 0xa0
 8001710:	f7ff feec 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x74); //Horizontal address increment
 8001714:	2074      	movs	r0, #116	; 0x74
 8001716:	f7ff ff07 	bl	8001528 <OLED_Driver_Write_Data>
//  OLED_Driver_Write_Data(0b10110100); //Horizontal address increment
  OLED_CS_1;
 800171a:	68e3      	ldr	r3, [r4, #12]
 800171c:	432b      	orrs	r3, r5
 800171e:	60e3      	str	r3, [r4, #12]
            //74
  OLED_Driver_Write_Command(0xa1);  //set display start line
 8001720:	20a1      	movs	r0, #161	; 0xa1
 8001722:	f7ff fee3 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00); //start 00 line
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fefe 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 800172c:	68e3      	ldr	r3, [r4, #12]
 800172e:	432b      	orrs	r3, r5
 8001730:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xa2);  //set display offset
 8001732:	20a2      	movs	r0, #162	; 0xa2
 8001734:	f7ff feda 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x00);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fef5 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 800173e:	68e3      	ldr	r3, [r4, #12]
 8001740:	432b      	orrs	r3, r5
 8001742:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xAB);
 8001744:	20ab      	movs	r0, #171	; 0xab
 8001746:	f7ff fed1 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x01);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff feec 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 8001750:	68e3      	ldr	r3, [r4, #12]
 8001752:	432b      	orrs	r3, r5
 8001754:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xB4);
 8001756:	20b4      	movs	r0, #180	; 0xb4
 8001758:	f7ff fec8 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xA0);
 800175c:	20a0      	movs	r0, #160	; 0xa0
 800175e:	f7ff fee3 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0xB5);
 8001762:	20b5      	movs	r0, #181	; 0xb5
 8001764:	f7ff fee0 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x55);
 8001768:	2055      	movs	r0, #85	; 0x55
 800176a:	f7ff fedd 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 800176e:	68e3      	ldr	r3, [r4, #12]
 8001770:	432b      	orrs	r3, r5
 8001772:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xC1);
 8001774:	20c1      	movs	r0, #193	; 0xc1
 8001776:	f7ff feb9 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xC8);
 800177a:	20c8      	movs	r0, #200	; 0xc8
 800177c:	f7ff fed4 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x80);
 8001780:	2080      	movs	r0, #128	; 0x80
 8001782:	f7ff fed1 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0xC0);
 8001786:	20c0      	movs	r0, #192	; 0xc0
 8001788:	f7ff fece 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 800178c:	68e3      	ldr	r3, [r4, #12]
 800178e:	432b      	orrs	r3, r5
 8001790:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xC7);
 8001792:	20c7      	movs	r0, #199	; 0xc7
 8001794:	f7ff feaa 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x0F);
 8001798:	200f      	movs	r0, #15
 800179a:	f7ff fec5 	bl	8001528 <OLED_Driver_Write_Data>
  //OLED_Driver_Write_Data(0x05);
  OLED_CS_1;
 800179e:	68e3      	ldr	r3, [r4, #12]
 80017a0:	432b      	orrs	r3, r5
 80017a2:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xB1);
 80017a4:	20b1      	movs	r0, #177	; 0xb1
 80017a6:	f7ff fea1 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x32);
 80017aa:	2032      	movs	r0, #50	; 0x32
 80017ac:	f7ff febc 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80017b0:	68e3      	ldr	r3, [r4, #12]
 80017b2:	432b      	orrs	r3, r5
 80017b4:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xB2);
 80017b6:	20b2      	movs	r0, #178	; 0xb2
 80017b8:	f7ff fe98 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0xA4);
 80017bc:	20a4      	movs	r0, #164	; 0xa4
 80017be:	f7ff feb3 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x00);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff feb0 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_Driver_Write_Data(0x00);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fead 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80017ce:	68e3      	ldr	r3, [r4, #12]
 80017d0:	432b      	orrs	r3, r5
 80017d2:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xBB);
 80017d4:	20bb      	movs	r0, #187	; 0xbb
 80017d6:	f7ff fe89 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x17);
 80017da:	2017      	movs	r0, #23
 80017dc:	f7ff fea4 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80017e0:	68e3      	ldr	r3, [r4, #12]
 80017e2:	432b      	orrs	r3, r5
 80017e4:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xb5); // Set GPIO 0 to 1  turn on DC/DC
 80017e6:	20b5      	movs	r0, #181	; 0xb5
 80017e8:	f7ff fe80 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x0b);
 80017ec:	200b      	movs	r0, #11
 80017ee:	f7ff fe9b 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 80017f2:	68e3      	ldr	r3, [r4, #12]
 80017f4:	432b      	orrs	r3, r5
 80017f6:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xB6);
 80017f8:	20b6      	movs	r0, #182	; 0xb6
 80017fa:	f7ff fe77 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x01);
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff fe92 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 8001804:	68e3      	ldr	r3, [r4, #12]
 8001806:	432b      	orrs	r3, r5
 8001808:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xBE);
 800180a:	20be      	movs	r0, #190	; 0xbe
 800180c:	f7ff fe6e 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_Driver_Write_Data(0x05);
 8001810:	2005      	movs	r0, #5
 8001812:	f7ff fe89 	bl	8001528 <OLED_Driver_Write_Data>
  OLED_CS_1;
 8001816:	68e3      	ldr	r3, [r4, #12]
 8001818:	432b      	orrs	r3, r5
 800181a:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Write_Command(0xA6);
 800181c:	20a6      	movs	r0, #166	; 0xa6
 800181e:	f7ff fe65 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_CS_1;
 8001822:	68e3      	ldr	r3, [r4, #12]
 8001824:	432b      	orrs	r3, r5
 8001826:	60e3      	str	r3, [r4, #12]

  OLED_Driver_Clear_Screen();
 8001828:	f7ff feea 	bl	8001600 <OLED_Driver_Clear_Screen>
  OLED_Driver_Write_Command(0xaf);   //display on
 800182c:	20af      	movs	r0, #175	; 0xaf
 800182e:	f7ff fe5d 	bl	80014ec <OLED_Driver_Write_Command>
  OLED_CS_1;
 8001832:	68e3      	ldr	r3, [r4, #12]
 8001834:	431d      	orrs	r5, r3
 8001836:	60e5      	str	r5, [r4, #12]
}
 8001838:	bd38      	pop	{r3, r4, r5, pc}
 800183a:	bf00      	nop
 800183c:	40010800 	.word	0x40010800

08001840 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8001840:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8001842:	7883      	ldrb	r3, [r0, #2]
 8001844:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8001848:	7843      	ldrb	r3, [r0, #1]
 800184a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800184e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8001850:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001854:	4770      	bx	lr

08001856 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001856:	b410      	push	{r4}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8001858:	f810 3b01 	ldrb.w	r3, [r0], #1
 800185c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001860:	1b1b      	subs	r3, r3, r4
	} while (--cnt && r == 0);
 8001862:	3a01      	subs	r2, #1
 8001864:	d001      	beq.n	800186a <mem_cmp+0x14>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f6      	beq.n	8001858 <mem_cmp+0x2>

	return r;
}
 800186a:	4618      	mov	r0, r3
 800186c:	bc10      	pop	{r4}
 800186e:	4770      	bx	lr

08001870 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8001870:	6801      	ldr	r1, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8001872:	b1e9      	cbz	r1, 80018b0 <get_ldnumber+0x40>
	tt = tp = *path;
 8001874:	460a      	mov	r2, r1
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8001876:	f812 3b01 	ldrb.w	r3, [r2], #1
 800187a:	2b20      	cmp	r3, #32
 800187c:	d912      	bls.n	80018a4 <get_ldnumber+0x34>
 800187e:	2b3a      	cmp	r3, #58	; 0x3a
 8001880:	d1f9      	bne.n	8001876 <get_ldnumber+0x6>
{
 8001882:	b410      	push	{r4}

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8001884:	780b      	ldrb	r3, [r1, #0]
 8001886:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800188a:	b2e4      	uxtb	r4, r4
 800188c:	2c09      	cmp	r4, #9
 800188e:	d812      	bhi.n	80018b6 <get_ldnumber+0x46>
 8001890:	3102      	adds	r1, #2
 8001892:	428a      	cmp	r2, r1
 8001894:	d112      	bne.n	80018bc <get_ldnumber+0x4c>
			i = (int)*tp - '0';	/* Get the LD number */
 8001896:	3b30      	subs	r3, #48	; 0x30
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8001898:	2b00      	cmp	r3, #0
 800189a:	dc12      	bgt.n	80018c2 <get_ldnumber+0x52>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 800189c:	6002      	str	r2, [r0, #0]
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bc10      	pop	{r4}
 80018a2:	4770      	bx	lr
	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80018a4:	2b3a      	cmp	r3, #58	; 0x3a
	return vol;		/* Return the default drive */
 80018a6:	bf18      	it	ne
 80018a8:	2300      	movne	r3, #0
	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80018aa:	d0ea      	beq.n	8001882 <get_ldnumber+0x12>
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	4770      	bx	lr
	if (!tp) return vol;	/* Invalid path name? */
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b4:	e7fa      	b.n	80018ac <get_ldnumber+0x3c>
	int i, vol = -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ba:	e7f0      	b.n	800189e <get_ldnumber+0x2e>
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c0:	e7ed      	b.n	800189e <get_ldnumber+0x2e>
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c6:	e7ea      	b.n	800189e <get_ldnumber+0x2e>

080018c8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80018cc:	b1a8      	cbz	r0, 80018fa <validate+0x32>
 80018ce:	4604      	mov	r4, r0
 80018d0:	6803      	ldr	r3, [r0, #0]
 80018d2:	b1ab      	cbz	r3, 8001900 <validate+0x38>
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	b1aa      	cbz	r2, 8001904 <validate+0x3c>
 80018d8:	8881      	ldrh	r1, [r0, #4]
 80018da:	88da      	ldrh	r2, [r3, #6]
 80018dc:	4291      	cmp	r1, r2
 80018de:	d003      	beq.n	80018e8 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80018e0:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80018e2:	2300      	movs	r3, #0
 80018e4:	602b      	str	r3, [r5, #0]
	return res;
}
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80018e8:	7858      	ldrb	r0, [r3, #1]
 80018ea:	f7ff fcc5 	bl	8001278 <disk_status>
 80018ee:	f010 0f01 	tst.w	r0, #1
 80018f2:	d10a      	bne.n	800190a <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80018f4:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 80018f6:	2000      	movs	r0, #0
 80018f8:	e7f4      	b.n	80018e4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80018fa:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80018fc:	2300      	movs	r3, #0
 80018fe:	e7f1      	b.n	80018e4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8001900:	2009      	movs	r0, #9
 8001902:	e7ef      	b.n	80018e4 <validate+0x1c>
 8001904:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001906:	2300      	movs	r3, #0
 8001908:	e7ec      	b.n	80018e4 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800190a:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800190c:	2300      	movs	r3, #0
 800190e:	e7e9      	b.n	80018e4 <validate+0x1c>

08001910 <move_window>:
{
 8001910:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8001912:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001914:	428b      	cmp	r3, r1
 8001916:	d012      	beq.n	800193e <move_window+0x2e>
 8001918:	4605      	mov	r5, r0
 800191a:	460c      	mov	r4, r1
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800191c:	2301      	movs	r3, #1
 800191e:	460a      	mov	r2, r1
 8001920:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8001924:	7840      	ldrb	r0, [r0, #1]
 8001926:	f7ff fd5f 	bl	80013e8 <disk_read>
 800192a:	1e03      	subs	r3, r0, #0
				res = FR_DISK_ERR;
 800192c:	3000      	adds	r0, #0
 800192e:	bf18      	it	ne
 8001930:	2001      	movne	r0, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf18      	it	ne
 8001936:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800193a:	626c      	str	r4, [r5, #36]	; 0x24
}
 800193c:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800193e:	2000      	movs	r0, #0
 8001940:	e7fc      	b.n	800193c <move_window+0x2c>

08001942 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001942:	2901      	cmp	r1, #1
 8001944:	d956      	bls.n	80019f4 <get_fat+0xb2>
{
 8001946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8001948:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800194a:	68f3      	ldr	r3, [r6, #12]
 800194c:	428b      	cmp	r3, r1
 800194e:	d953      	bls.n	80019f8 <get_fat+0xb6>
 8001950:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8001952:	7833      	ldrb	r3, [r6, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d02a      	beq.n	80019ae <get_fat+0x6c>
 8001958:	2b03      	cmp	r3, #3
 800195a:	d03a      	beq.n	80019d2 <get_fat+0x90>
 800195c:	2b01      	cmp	r3, #1
 800195e:	d001      	beq.n	8001964 <get_fat+0x22>
			val = 1;	/* Internal error */
 8001960:	2001      	movs	r0, #1
 8001962:	e04a      	b.n	80019fa <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8001964:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001968:	69b1      	ldr	r1, [r6, #24]
 800196a:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800196e:	4630      	mov	r0, r6
 8001970:	f7ff ffce 	bl	8001910 <move_window>
 8001974:	2800      	cmp	r0, #0
 8001976:	d141      	bne.n	80019fc <get_fat+0xba>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8001978:	1c6f      	adds	r7, r5, #1
 800197a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800197e:	4435      	add	r5, r6
 8001980:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001984:	69b1      	ldr	r1, [r6, #24]
 8001986:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800198a:	4630      	mov	r0, r6
 800198c:	f7ff ffc0 	bl	8001910 <move_window>
 8001990:	bbb8      	cbnz	r0, 8001a02 <get_fat+0xc0>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8001992:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8001996:	4433      	add	r3, r6
 8001998:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
 800199c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80019a0:	f014 0f01 	tst.w	r4, #1
 80019a4:	bf14      	ite	ne
 80019a6:	0900      	lsrne	r0, r0, #4
 80019a8:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 80019ac:	e025      	b.n	80019fa <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80019ae:	69b1      	ldr	r1, [r6, #24]
 80019b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80019b4:	4630      	mov	r0, r6
 80019b6:	f7ff ffab 	bl	8001910 <move_window>
 80019ba:	bb28      	cbnz	r0, 8001a08 <get_fat+0xc6>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80019bc:	f106 0328 	add.w	r3, r6, #40	; 0x28
 80019c0:	0061      	lsls	r1, r4, #1
 80019c2:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 80019c6:	185a      	adds	r2, r3, r1
	rv = rv << 8 | ptr[0];
 80019c8:	7852      	ldrb	r2, [r2, #1]
 80019ca:	5c58      	ldrb	r0, [r3, r1]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80019cc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
			break;
 80019d0:	e013      	b.n	80019fa <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80019d2:	69b1      	ldr	r1, [r6, #24]
 80019d4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80019d8:	4630      	mov	r0, r6
 80019da:	f7ff ff99 	bl	8001910 <move_window>
 80019de:	b9b0      	cbnz	r0, 8001a0e <get_fat+0xcc>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80019e0:	3628      	adds	r6, #40	; 0x28
 80019e2:	00a1      	lsls	r1, r4, #2
 80019e4:	f401 70fe 	and.w	r0, r1, #508	; 0x1fc
 80019e8:	4430      	add	r0, r6
 80019ea:	f7ff ff29 	bl	8001840 <ld_dword>
 80019ee:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80019f2:	e002      	b.n	80019fa <get_fat+0xb8>
		val = 1;	/* Internal error */
 80019f4:	2001      	movs	r0, #1
}
 80019f6:	4770      	bx	lr
		val = 1;	/* Internal error */
 80019f8:	2001      	movs	r0, #1
}
 80019fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a00:	e7fb      	b.n	80019fa <get_fat+0xb8>
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a06:	e7f8      	b.n	80019fa <get_fat+0xb8>
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a0c:	e7f5      	b.n	80019fa <get_fat+0xb8>
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 8001a12:	e7f2      	b.n	80019fa <get_fat+0xb8>

08001a14 <dir_sdi>:
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001a14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001a18:	d242      	bcs.n	8001aa0 <dir_sdi+0x8c>
{
 8001a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1c:	4605      	mov	r5, r0
 8001a1e:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8001a20:	f011 0f1f 	tst.w	r1, #31
 8001a24:	d13e      	bne.n	8001aa4 <dir_sdi+0x90>
	FATFS *fs = dp->obj.fs;
 8001a26:	6806      	ldr	r6, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8001a28:	6129      	str	r1, [r5, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8001a2a:	6881      	ldr	r1, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8001a2c:	b9c9      	cbnz	r1, 8001a62 <dir_sdi+0x4e>
 8001a2e:	7833      	ldrb	r3, [r6, #0]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <dir_sdi+0x24>
		clst = fs->dirbase;
 8001a34:	69f3      	ldr	r3, [r6, #28]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8001a36:	b99b      	cbnz	r3, 8001a60 <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8001a38:	8933      	ldrh	r3, [r6, #8]
 8001a3a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8001a3e:	d933      	bls.n	8001aa8 <dir_sdi+0x94>
		dp->sect = fs->dirbase;
 8001a40:	69f3      	ldr	r3, [r6, #28]
 8001a42:	61ab      	str	r3, [r5, #24]
	dp->clust = clst;					/* Current cluster# */
 8001a44:	6169      	str	r1, [r5, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8001a46:	69ab      	ldr	r3, [r5, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d035      	beq.n	8001ab8 <dir_sdi+0xa4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8001a4c:	eb03 2354 	add.w	r3, r3, r4, lsr #9
 8001a50:	61ab      	str	r3, [r5, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001a52:	3628      	adds	r6, #40	; 0x28
 8001a54:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8001a58:	4434      	add	r4, r6
 8001a5a:	61ec      	str	r4, [r5, #28]
	return FR_OK;
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e022      	b.n	8001aa6 <dir_sdi+0x92>
		clst = fs->dirbase;
 8001a60:	4619      	mov	r1, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001a62:	8977      	ldrh	r7, [r6, #10]
 8001a64:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8001a66:	42bc      	cmp	r4, r7
 8001a68:	d30e      	bcc.n	8001a88 <dir_sdi+0x74>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff ff69 	bl	8001942 <get_fat>
 8001a70:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001a72:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001a76:	d019      	beq.n	8001aac <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001a78:	2801      	cmp	r0, #1
 8001a7a:	d919      	bls.n	8001ab0 <dir_sdi+0x9c>
 8001a7c:	68f3      	ldr	r3, [r6, #12]
 8001a7e:	4283      	cmp	r3, r0
 8001a80:	d918      	bls.n	8001ab4 <dir_sdi+0xa0>
			ofs -= csz;
 8001a82:	1be4      	subs	r4, r4, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 8001a84:	42a7      	cmp	r7, r4
 8001a86:	d9f0      	bls.n	8001a6a <dir_sdi+0x56>
	clst -= 2;		/* Cluster number is origin from 2 */
 8001a88:	1e8a      	subs	r2, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001a8a:	68f3      	ldr	r3, [r6, #12]
 8001a8c:	3b02      	subs	r3, #2
 8001a8e:	429a      	cmp	r2, r3
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001a90:	bf3d      	ittte	cc
 8001a92:	8973      	ldrhcc	r3, [r6, #10]
 8001a94:	6a30      	ldrcc	r0, [r6, #32]
 8001a96:	fb02 0303 	mlacc	r3, r2, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001a9a:	2300      	movcs	r3, #0
		dp->sect = clst2sect(fs, clst);
 8001a9c:	61ab      	str	r3, [r5, #24]
 8001a9e:	e7d1      	b.n	8001a44 <dir_sdi+0x30>
		return FR_INT_ERR;
 8001aa0:	2002      	movs	r0, #2
}
 8001aa2:	4770      	bx	lr
		return FR_INT_ERR;
 8001aa4:	2002      	movs	r0, #2
}
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	e7fc      	b.n	8001aa6 <dir_sdi+0x92>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8001aac:	2001      	movs	r0, #1
 8001aae:	e7fa      	b.n	8001aa6 <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	e7f8      	b.n	8001aa6 <dir_sdi+0x92>
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	e7f6      	b.n	8001aa6 <dir_sdi+0x92>
	if (dp->sect == 0) return FR_INT_ERR;
 8001ab8:	2002      	movs	r0, #2
 8001aba:	e7f4      	b.n	8001aa6 <dir_sdi+0x92>

08001abc <check_fs>:
{
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	70c3      	strb	r3, [r0, #3]
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac8:	6243      	str	r3, [r0, #36]	; 0x24
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8001aca:	f7ff ff21 	bl	8001910 <move_window>
 8001ace:	bb18      	cbnz	r0, 8001b18 <check_fs+0x5c>
	rv = rv << 8 | ptr[0];
 8001ad0:	f894 2227 	ldrb.w	r2, [r4, #551]	; 0x227
 8001ad4:	f894 3226 	ldrb.w	r3, [r4, #550]	; 0x226
 8001ad8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <check_fs+0x6c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d11b      	bne.n	8001b1c <check_fs+0x60>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8001ae4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001ae8:	2beb      	cmp	r3, #235	; 0xeb
 8001aea:	d003      	beq.n	8001af4 <check_fs+0x38>
 8001aec:	3318      	adds	r3, #24
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d815      	bhi.n	8001b20 <check_fs+0x64>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8001af4:	2203      	movs	r2, #3
 8001af6:	490d      	ldr	r1, [pc, #52]	; (8001b2c <check_fs+0x70>)
 8001af8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 8001afc:	f7ff feab 	bl	8001856 <mem_cmp>
 8001b00:	b180      	cbz	r0, 8001b24 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8001b02:	2205      	movs	r2, #5
 8001b04:	490a      	ldr	r1, [pc, #40]	; (8001b30 <check_fs+0x74>)
 8001b06:	f104 007a 	add.w	r0, r4, #122	; 0x7a
 8001b0a:	f7ff fea4 	bl	8001856 <mem_cmp>
 8001b0e:	2800      	cmp	r0, #0
	return 2;	/* Valid BS but not FAT */
 8001b10:	bf0c      	ite	eq
 8001b12:	2000      	moveq	r0, #0
 8001b14:	2002      	movne	r0, #2
 8001b16:	e002      	b.n	8001b1e <check_fs+0x62>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8001b18:	2004      	movs	r0, #4
 8001b1a:	e000      	b.n	8001b1e <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8001b1c:	2003      	movs	r0, #3
}
 8001b1e:	bd10      	pop	{r4, pc}
	return 2;	/* Valid BS but not FAT */
 8001b20:	2002      	movs	r0, #2
 8001b22:	e7fc      	b.n	8001b1e <check_fs+0x62>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8001b24:	2000      	movs	r0, #0
 8001b26:	e7fa      	b.n	8001b1e <check_fs+0x62>
 8001b28:	ffffaa55 	.word	0xffffaa55
 8001b2c:	080023a8 	.word	0x080023a8
 8001b30:	080023ac 	.word	0x080023ac

08001b34 <find_volume>:
{
 8001b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b38:	b085      	sub	sp, #20
 8001b3a:	460e      	mov	r6, r1
	*rfs = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8001b40:	f7ff fe96 	bl	8001870 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001b44:	1e05      	subs	r5, r0, #0
 8001b46:	f2c0 80c6 	blt.w	8001cd6 <find_volume+0x1a2>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8001b4a:	4b9c      	ldr	r3, [pc, #624]	; (8001dbc <find_volume+0x288>)
 8001b4c:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8001b50:	2c00      	cmp	r4, #0
 8001b52:	f000 80c2 	beq.w	8001cda <find_volume+0x1a6>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8001b56:	6034      	str	r4, [r6, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8001b58:	7823      	ldrb	r3, [r4, #0]
 8001b5a:	b133      	cbz	r3, 8001b6a <find_volume+0x36>
		stat = disk_status(fs->pdrv);
 8001b5c:	7860      	ldrb	r0, [r4, #1]
 8001b5e:	f7ff fb8b 	bl	8001278 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001b62:	f010 0f01 	tst.w	r0, #1
 8001b66:	f000 80ba 	beq.w	8001cde <find_volume+0x1aa>
	fs->fs_type = 0;					/* Clear the filesystem object */
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001b6e:	b2e8      	uxtb	r0, r5
 8001b70:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8001b72:	f7ff fb83 	bl	800127c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8001b76:	f010 0f01 	tst.w	r0, #1
 8001b7a:	f040 80b2 	bne.w	8001ce2 <find_volume+0x1ae>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff ff9b 	bl	8001abc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8001b86:	2802      	cmp	r0, #2
 8001b88:	d070      	beq.n	8001c6c <find_volume+0x138>
	bsect = 0;
 8001b8a:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001b8c:	2804      	cmp	r0, #4
 8001b8e:	f000 80ac 	beq.w	8001cea <find_volume+0x1b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001b92:	2801      	cmp	r0, #1
 8001b94:	f200 80ab 	bhi.w	8001cee <find_volume+0x1ba>
	rv = rv << 8 | ptr[0];
 8001b98:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001b9c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8001ba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001baa:	f040 80a2 	bne.w	8001cf2 <find_volume+0x1be>
	rv = rv << 8 | ptr[0];
 8001bae:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
 8001bb2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8001bb6:	ea53 2606 	orrs.w	r6, r3, r6, lsl #8
 8001bba:	d104      	bne.n	8001bc6 <find_volume+0x92>
 8001bbc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8001bc0:	f7ff fe3e 	bl	8001840 <ld_dword>
 8001bc4:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8001bc6:	6126      	str	r6, [r4, #16]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8001bc8:	f894 7038 	ldrb.w	r7, [r4, #56]	; 0x38
 8001bcc:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8001bce:	1e7b      	subs	r3, r7, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	f200 808f 	bhi.w	8001cf6 <find_volume+0x1c2>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8001bd8:	f894 8035 	ldrb.w	r8, [r4, #53]	; 0x35
 8001bdc:	fa1f f388 	uxth.w	r3, r8
 8001be0:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8089 	beq.w	8001cfa <find_volume+0x1c6>
 8001be8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8001bec:	ea13 0f08 	tst.w	r3, r8
 8001bf0:	f040 8085 	bne.w	8001cfe <find_volume+0x1ca>
	rv = rv << 8 | ptr[0];
 8001bf4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001bf8:	f894 9039 	ldrb.w	r9, [r4, #57]	; 0x39
 8001bfc:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8001c00:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8001c04:	f019 0f0f 	tst.w	r9, #15
 8001c08:	d17b      	bne.n	8001d02 <find_volume+0x1ce>
	rv = rv << 8 | ptr[0];
 8001c0a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8001c0e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8001c12:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 8001c16:	d103      	bne.n	8001c20 <find_volume+0xec>
 8001c18:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8001c1c:	f7ff fe10 	bl	8001840 <ld_dword>
	rv = rv << 8 | ptr[0];
 8001c20:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 8001c24:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8001c28:	ea53 2101 	orrs.w	r1, r3, r1, lsl #8
 8001c2c:	d06b      	beq.n	8001d06 <find_volume+0x1d2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8001c2e:	fb06 fc07 	mul.w	ip, r6, r7
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8001c32:	eb01 1219 	add.w	r2, r1, r9, lsr #4
 8001c36:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8001c38:	4290      	cmp	r0, r2
 8001c3a:	d366      	bcc.n	8001d0a <find_volume+0x1d6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8001c3c:	1a83      	subs	r3, r0, r2
 8001c3e:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <find_volume+0x1da>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8001c46:	4f5e      	ldr	r7, [pc, #376]	; (8001dc0 <find_volume+0x28c>)
 8001c48:	42bb      	cmp	r3, r7
 8001c4a:	bf94      	ite	ls
 8001c4c:	2703      	movls	r7, #3
 8001c4e:	2700      	movhi	r7, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8001c50:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8001c54:	4283      	cmp	r3, r0
 8001c56:	f240 808e 	bls.w	8001d76 <find_volume+0x242>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8001c5a:	f640 70f5 	movw	r0, #4085	; 0xff5
 8001c5e:	4283      	cmp	r3, r0
 8001c60:	d966      	bls.n	8001d30 <find_volume+0x1fc>
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8001c62:	2f00      	cmp	r7, #0
 8001c64:	f040 808c 	bne.w	8001d80 <find_volume+0x24c>
 8001c68:	200d      	movs	r0, #13
 8001c6a:	e03b      	b.n	8001ce4 <find_volume+0x1b0>
 8001c6c:	466e      	mov	r6, sp
 8001c6e:	f504 75f7 	add.w	r5, r4, #494	; 0x1ee
 8001c72:	f204 282e 	addw	r8, r4, #558	; 0x22e
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8001c76:	4637      	mov	r7, r6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8001c78:	f04f 0900 	mov.w	r9, #0
 8001c7c:	e005      	b.n	8001c8a <find_volume+0x156>
 8001c7e:	4648      	mov	r0, r9
 8001c80:	f847 0b04 	str.w	r0, [r7], #4
 8001c84:	3510      	adds	r5, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8001c86:	4545      	cmp	r5, r8
 8001c88:	d007      	beq.n	8001c9a <find_volume+0x166>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8001c8a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f5      	beq.n	8001c7e <find_volume+0x14a>
 8001c92:	4628      	mov	r0, r5
 8001c94:	f7ff fdd4 	bl	8001840 <ld_dword>
 8001c98:	e7f2      	b.n	8001c80 <find_volume+0x14c>
 8001c9a:	f106 0710 	add.w	r7, r6, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001c9e:	f04f 0803 	mov.w	r8, #3
 8001ca2:	e008      	b.n	8001cb6 <find_volume+0x182>
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff ff08 	bl	8001abc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8001cac:	2801      	cmp	r0, #1
 8001cae:	d93a      	bls.n	8001d26 <find_volume+0x1f2>
 8001cb0:	42be      	cmp	r6, r7
 8001cb2:	f43f af6b 	beq.w	8001b8c <find_volume+0x58>
			bsect = br[i];
 8001cb6:	f856 5b04 	ldr.w	r5, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001cba:	2d00      	cmp	r5, #0
 8001cbc:	d1f2      	bne.n	8001ca4 <find_volume+0x170>
 8001cbe:	4640      	mov	r0, r8
 8001cc0:	e7f6      	b.n	8001cb0 <find_volume+0x17c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001cc2:	f1b9 0f00 	cmp.w	r9, #0
 8001cc6:	d028      	beq.n	8001d1a <find_volume+0x1e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8001cc8:	4463      	add	r3, ip
 8001cca:	61e3      	str	r3, [r4, #28]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001ccc:	2f02      	cmp	r7, #2
 8001cce:	d13e      	bne.n	8001d4e <find_volume+0x21a>
 8001cd0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001cd4:	e041      	b.n	8001d5a <find_volume+0x226>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001cd6:	200b      	movs	r0, #11
 8001cd8:	e004      	b.n	8001ce4 <find_volume+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8001cda:	200c      	movs	r0, #12
 8001cdc:	e002      	b.n	8001ce4 <find_volume+0x1b0>
			return FR_OK;				/* The filesystem object is valid */
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e000      	b.n	8001ce4 <find_volume+0x1b0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001ce2:	2003      	movs	r0, #3
}
 8001ce4:	b005      	add	sp, #20
 8001ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001cea:	2001      	movs	r0, #1
 8001cec:	e7fa      	b.n	8001ce4 <find_volume+0x1b0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001cee:	200d      	movs	r0, #13
 8001cf0:	e7f8      	b.n	8001ce4 <find_volume+0x1b0>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001cf2:	200d      	movs	r0, #13
 8001cf4:	e7f6      	b.n	8001ce4 <find_volume+0x1b0>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8001cf6:	200d      	movs	r0, #13
 8001cf8:	e7f4      	b.n	8001ce4 <find_volume+0x1b0>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001cfa:	200d      	movs	r0, #13
 8001cfc:	e7f2      	b.n	8001ce4 <find_volume+0x1b0>
 8001cfe:	200d      	movs	r0, #13
 8001d00:	e7f0      	b.n	8001ce4 <find_volume+0x1b0>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8001d02:	200d      	movs	r0, #13
 8001d04:	e7ee      	b.n	8001ce4 <find_volume+0x1b0>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8001d06:	200d      	movs	r0, #13
 8001d08:	e7ec      	b.n	8001ce4 <find_volume+0x1b0>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8001d0a:	200d      	movs	r0, #13
 8001d0c:	e7ea      	b.n	8001ce4 <find_volume+0x1b0>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001d0e:	200d      	movs	r0, #13
 8001d10:	e7e8      	b.n	8001ce4 <find_volume+0x1b0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001d12:	200d      	movs	r0, #13
 8001d14:	e7e6      	b.n	8001ce4 <find_volume+0x1b0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8001d16:	200d      	movs	r0, #13
 8001d18:	e7e4      	b.n	8001ce4 <find_volume+0x1b0>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001d1a:	200d      	movs	r0, #13
 8001d1c:	e7e2      	b.n	8001ce4 <find_volume+0x1b0>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001d1e:	200d      	movs	r0, #13
 8001d20:	e7e0      	b.n	8001ce4 <find_volume+0x1b0>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001d22:	200d      	movs	r0, #13
 8001d24:	e7de      	b.n	8001ce4 <find_volume+0x1b0>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001d26:	2804      	cmp	r0, #4
 8001d28:	f47f af36 	bne.w	8001b98 <find_volume+0x64>
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	e7d9      	b.n	8001ce4 <find_volume+0x1b0>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8001d30:	f103 0802 	add.w	r8, r3, #2
 8001d34:	f8c4 800c 	str.w	r8, [r4, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8001d38:	6165      	str	r5, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8001d3a:	194b      	adds	r3, r1, r5
 8001d3c:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8001d3e:	442a      	add	r2, r5
 8001d40:	6222      	str	r2, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001d42:	f1b9 0f00 	cmp.w	r9, #0
 8001d46:	d0ec      	beq.n	8001d22 <find_volume+0x1ee>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8001d48:	4463      	add	r3, ip
 8001d4a:	61e3      	str	r3, [r4, #28]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8001d4c:	2701      	movs	r7, #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001d4e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8001d52:	f008 0801 	and.w	r8, r8, #1
 8001d56:	eb08 0853 	add.w	r8, r8, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001d5a:	f208 18ff 	addw	r8, r8, #511	; 0x1ff
 8001d5e:	ebb6 2f58 	cmp.w	r6, r8, lsr #9
 8001d62:	d3dc      	bcc.n	8001d1e <find_volume+0x1ea>
	fs->fs_type = fmt;		/* FAT sub-type */
 8001d64:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <find_volume+0x290>)
 8001d68:	8813      	ldrh	r3, [r2, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	8013      	strh	r3, [r2, #0]
 8001d70:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7b6      	b.n	8001ce4 <find_volume+0x1b0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8001d76:	f640 70f5 	movw	r0, #4085	; 0xff5
 8001d7a:	4283      	cmp	r3, r0
 8001d7c:	d9d8      	bls.n	8001d30 <find_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8001d7e:	2702      	movs	r7, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8001d80:	f103 0802 	add.w	r8, r3, #2
 8001d84:	f8c4 800c 	str.w	r8, [r4, #12]
		fs->volbase = bsect;							/* Volume start sector */
 8001d88:	6165      	str	r5, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8001d8a:	194b      	adds	r3, r1, r5
 8001d8c:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8001d8e:	442a      	add	r2, r5
 8001d90:	6222      	str	r2, [r4, #32]
		if (fmt == FS_FAT32) {
 8001d92:	2f03      	cmp	r7, #3
 8001d94:	d195      	bne.n	8001cc2 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 8001d96:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8001d9a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001d9e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8001da2:	d1b6      	bne.n	8001d12 <find_volume+0x1de>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8001da4:	f1b9 0f00 	cmp.w	r9, #0
 8001da8:	d1b5      	bne.n	8001d16 <find_volume+0x1e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8001daa:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8001dae:	f7ff fd47 	bl	8001840 <ld_dword>
 8001db2:	61e0      	str	r0, [r4, #28]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8001db4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001db8:	e7cf      	b.n	8001d5a <find_volume+0x226>
 8001dba:	bf00      	nop
 8001dbc:	20000024 	.word	0x20000024
 8001dc0:	0ffffff5 	.word	0x0ffffff5
 8001dc4:	20000028 	.word	0x20000028

08001dc8 <ld_clust>:
	rv = rv << 8 | ptr[0];
 8001dc8:	7eca      	ldrb	r2, [r1, #27]
 8001dca:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8001dcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8001dd0:	7802      	ldrb	r2, [r0, #0]
 8001dd2:	2a03      	cmp	r2, #3
 8001dd4:	d001      	beq.n	8001dda <ld_clust+0x12>
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 8001dda:	7d48      	ldrb	r0, [r1, #21]
 8001ddc:	7d0a      	ldrb	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001dde:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return cl;
 8001de6:	e7f6      	b.n	8001dd6 <ld_clust+0xe>

08001de8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8001de8:	b510      	push	{r4, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	9001      	str	r0, [sp, #4]
 8001dee:	9100      	str	r1, [sp, #0]
 8001df0:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8001df2:	a804      	add	r0, sp, #16
 8001df4:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8001df8:	f7ff fd3a 	bl	8001870 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	db17      	blt.n	8001e30 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <f_mount+0x4c>)
 8001e02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 8001e06:	b10b      	cbz	r3, 8001e0c <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8001e0c:	9b01      	ldr	r3, [sp, #4]
 8001e0e:	b10b      	cbz	r3, 8001e14 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <f_mount+0x4c>)
 8001e16:	9a01      	ldr	r2, [sp, #4]
 8001e18:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8001e1c:	b914      	cbnz	r4, 8001e24 <f_mount+0x3c>
 8001e1e:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8001e20:	b004      	add	sp, #16
 8001e22:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8001e24:	2200      	movs	r2, #0
 8001e26:	a901      	add	r1, sp, #4
 8001e28:	4668      	mov	r0, sp
 8001e2a:	f7ff fe83 	bl	8001b34 <find_volume>
	LEAVE_FF(fs, res);
 8001e2e:	e7f7      	b.n	8001e20 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
 8001e30:	200b      	movs	r0, #11
 8001e32:	e7f5      	b.n	8001e20 <f_mount+0x38>
 8001e34:	20000024 	.word	0x20000024

08001e38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e3c:	b093      	sub	sp, #76	; 0x4c
 8001e3e:	9103      	str	r1, [sp, #12]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8001e40:	2800      	cmp	r0, #0
 8001e42:	f000 8113 	beq.w	800206c <f_open+0x234>
 8001e46:	4682      	mov	sl, r0

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8001e48:	f002 0301 	and.w	r3, r2, #1
 8001e4c:	9301      	str	r3, [sp, #4]
	res = find_volume(&path, &fs, mode);
 8001e4e:	461a      	mov	r2, r3
 8001e50:	a905      	add	r1, sp, #20
 8001e52:	a803      	add	r0, sp, #12
 8001e54:	f7ff fe6e 	bl	8001b34 <find_volume>
	if (res == FR_OK) {
 8001e58:	9000      	str	r0, [sp, #0]
 8001e5a:	b130      	cbz	r0, 8001e6a <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8ca 3000 	str.w	r3, [sl]

	LEAVE_FF(fs, res);
}
 8001e62:	9800      	ldr	r0, [sp, #0]
 8001e64:	b013      	add	sp, #76	; 0x4c
 8001e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8001e6a:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001e6e:	f8cd b018 	str.w	fp, [sp, #24]
 8001e72:	9b03      	ldr	r3, [sp, #12]
 8001e74:	4699      	mov	r9, r3
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8001e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e7a:	2a2f      	cmp	r2, #47	; 0x2f
 8001e7c:	d0fa      	beq.n	8001e74 <f_open+0x3c>
 8001e7e:	2a5c      	cmp	r2, #92	; 0x5c
 8001e80:	d0f8      	beq.n	8001e74 <f_open+0x3c>
		dp->obj.sclust = 0;					/* Start from root directory */
 8001e82:	2300      	movs	r3, #0
 8001e84:	9308      	str	r3, [sp, #32]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8001e86:	f899 3000 	ldrb.w	r3, [r9]
 8001e8a:	2b1f      	cmp	r3, #31
 8001e8c:	d904      	bls.n	8001e98 <f_open+0x60>
			i = 8; ni = 11;				/* Enter file extension field */
 8001e8e:	2308      	movs	r3, #8
 8001e90:	9302      	str	r3, [sp, #8]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8001e92:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8002140 <f_open+0x308>
 8001e96:	e101      	b.n	800209c <f_open+0x264>
		dp->fn[NSFLAG] = NS_NONAME;
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		res = dir_sdi(dp, 0);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	a806      	add	r0, sp, #24
 8001ea2:	f7ff fdb7 	bl	8001a14 <dir_sdi>
		if (res == FR_OK) {
 8001ea6:	bb40      	cbnz	r0, 8001efa <f_open+0xc2>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
 8001ea8:	f99d 3043 	ldrsb.w	r3, [sp, #67]	; 0x43
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f2c0 8131 	blt.w	8002114 <f_open+0x2dc>
				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
 8001eb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8001eb6:	f013 0f10 	tst.w	r3, #16
 8001eba:	f040 812e 	bne.w	800211a <f_open+0x2e2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8001ebe:	9c05      	ldr	r4, [sp, #20]
 8001ec0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff ff7f 	bl	8001dc8 <ld_clust>
 8001eca:	f8ca 0008 	str.w	r0, [sl, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8001ece:	f105 001c 	add.w	r0, r5, #28
 8001ed2:	f7ff fcb5 	bl	8001840 <ld_dword>
 8001ed6:	f8ca 000c 	str.w	r0, [sl, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8001eda:	f8ca 4000 	str.w	r4, [sl]
			fp->obj.id = fs->id;
 8001ede:	88e3      	ldrh	r3, [r4, #6]
 8001ee0:	f8aa 3004 	strh.w	r3, [sl, #4]
			fp->flag = mode;		/* Set file access mode */
 8001ee4:	9b01      	ldr	r3, [sp, #4]
 8001ee6:	f88a 3010 	strb.w	r3, [sl, #16]
			fp->err = 0;			/* Clear error flag */
 8001eea:	2300      	movs	r3, #0
 8001eec:	f88a 3011 	strb.w	r3, [sl, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8001ef0:	f8ca 301c 	str.w	r3, [sl, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8001ef4:	f8ca 3014 	str.w	r3, [sl, #20]
 8001ef8:	e7b3      	b.n	8001e62 <f_open+0x2a>
		res = dir_sdi(dp, 0);
 8001efa:	9000      	str	r0, [sp, #0]
 8001efc:	e7ae      	b.n	8001e5c <f_open+0x24>
 8001efe:	444a      	add	r2, r9
 8001f00:	e000      	b.n	8001f04 <f_open+0xcc>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8001f02:	3001      	adds	r0, #1
 8001f04:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001f08:	292f      	cmp	r1, #47	; 0x2f
 8001f0a:	d0fa      	beq.n	8001f02 <f_open+0xca>
 8001f0c:	295c      	cmp	r1, #92	; 0x5c
 8001f0e:	d0f8      	beq.n	8001f02 <f_open+0xca>
	*path = p + si;						/* Return pointer to the next segment */
 8001f10:	4481      	add	r9, r0
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8001f12:	2d00      	cmp	r5, #0
 8001f14:	f000 80a7 	beq.w	8002066 <f_open+0x22e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8001f18:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8001f1c:	2ae5      	cmp	r2, #229	; 0xe5
 8001f1e:	bf04      	itt	eq
 8001f20:	2205      	moveq	r2, #5
 8001f22:	f88d 2038 	strbeq.w	r2, [sp, #56]	; 0x38
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8001f26:	2b21      	cmp	r3, #33	; 0x21
 8001f28:	bf34      	ite	cc
 8001f2a:	2304      	movcc	r3, #4
 8001f2c:	2300      	movcs	r3, #0
 8001f2e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	FATFS *fs = dp->obj.fs;
 8001f32:	a812      	add	r0, sp, #72	; 0x48
 8001f34:	f850 7d30 	ldr.w	r7, [r0, #-48]!
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f7ff fd6b 	bl	8001a14 <dir_sdi>
	if (res != FR_OK) return res;
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d03f      	beq.n	8001fc4 <f_open+0x18c>
 8001f44:	e05c      	b.n	8002000 <f_open+0x1c8>
			i = 8; ni = 11;				/* Enter file extension field */
 8001f46:	9d02      	ldr	r5, [sp, #8]
 8001f48:	4664      	mov	r4, ip
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	e0c5      	b.n	80020da <f_open+0x2a2>
		if (c >= 0x80) {				/* Is SBC extended character? */
 8001f4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f52:	d116      	bne.n	8001f82 <f_open+0x14a>
	while (*str && *str != chr) str++;
 8001f54:	2b22      	cmp	r3, #34	; 0x22
 8001f56:	d019      	beq.n	8001f8c <f_open+0x154>
 8001f58:	463a      	mov	r2, r7
 8001f5a:	4e77      	ldr	r6, [pc, #476]	; (8002138 <f_open+0x300>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d018      	beq.n	8001f92 <f_open+0x15a>
 8001f60:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d1f9      	bne.n	8001f5c <f_open+0x124>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8001f68:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	2a19      	cmp	r2, #25
 8001f70:	bf9c      	itt	ls
 8001f72:	3b20      	subls	r3, #32
 8001f74:	b2db      	uxtbls	r3, r3
			sfn[i++] = c;
 8001f76:	aa12      	add	r2, sp, #72	; 0x48
 8001f78:	442a      	add	r2, r5
 8001f7a:	f802 3c10 	strb.w	r3, [r2, #-16]
 8001f7e:	3501      	adds	r5, #1
 8001f80:	e7e3      	b.n	8001f4a <f_open+0x112>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8001f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f86:	4a6d      	ldr	r2, [pc, #436]	; (800213c <f_open+0x304>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	e7e3      	b.n	8001f54 <f_open+0x11c>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8001f8c:	2306      	movs	r3, #6
		res = dir_sdi(dp, 0);
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	e764      	b.n	8001e5c <f_open+0x24>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ef      	beq.n	8001f76 <f_open+0x13e>
 8001f96:	2306      	movs	r3, #6
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	e0b6      	b.n	800210a <f_open+0x2d2>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8001f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80c2 	beq.w	8002128 <f_open+0x2f0>
	FATFS *fs = dp->obj.fs;
 8001fa4:	9d06      	ldr	r5, [sp, #24]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8001fa6:	f3c4 0608 	ubfx	r6, r4, #0, #9
 8001faa:	b93e      	cbnz	r6, 8001fbc <f_open+0x184>
		dp->sect++;				/* Next sector */
 8001fac:	3301      	adds	r3, #1
 8001fae:	930c      	str	r3, [sp, #48]	; 0x30
		if (dp->clust == 0) {	/* Static table */
 8001fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001fb2:	bb79      	cbnz	r1, 8002014 <f_open+0x1dc>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8001fb4:	892b      	ldrh	r3, [r5, #8]
 8001fb6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8001fba:	d927      	bls.n	800200c <f_open+0x1d4>
	dp->dptr = ofs;						/* Current entry */
 8001fbc:	940a      	str	r4, [sp, #40]	; 0x28
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001fbe:	3528      	adds	r5, #40	; 0x28
 8001fc0:	4435      	add	r5, r6
 8001fc2:	950d      	str	r5, [sp, #52]	; 0x34
		res = move_window(fs, dp->sect);
 8001fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	f7ff fca2 	bl	8001910 <move_window>
		if (res != FR_OK) break;
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b9b8      	cbnz	r0, 8002000 <f_open+0x1c8>
		c = dp->dir[DIR_Name];
 8001fd0:	980d      	ldr	r0, [sp, #52]	; 0x34
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8001fd2:	7803      	ldrb	r3, [r0, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a3 	beq.w	8002120 <f_open+0x2e8>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8001fda:	7ac3      	ldrb	r3, [r0, #11]
 8001fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe0:	f88d 201e 	strb.w	r2, [sp, #30]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8001fe4:	f013 0f08 	tst.w	r3, #8
 8001fe8:	d105      	bne.n	8001ff6 <f_open+0x1be>
 8001fea:	220b      	movs	r2, #11
 8001fec:	a90e      	add	r1, sp, #56	; 0x38
 8001fee:	f7ff fc32 	bl	8001856 <mem_cmp>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d03d      	beq.n	8002072 <f_open+0x23a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8001ff6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001ff8:	3420      	adds	r4, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8001ffa:	4544      	cmp	r4, r8
 8001ffc:	d9ce      	bls.n	8001f9c <f_open+0x164>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8001ffe:	2304      	movs	r3, #4
			ns = dp->fn[NSFLAG];
 8002000:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002004:	2b04      	cmp	r3, #4
 8002006:	d025      	beq.n	8002054 <f_open+0x21c>
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	e07e      	b.n	800210a <f_open+0x2d2>
				dp->sect = 0; return FR_NO_FILE;
 800200c:	2304      	movs	r3, #4
			ns = dp->fn[NSFLAG];
 800200e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8002012:	e7f7      	b.n	8002004 <f_open+0x1cc>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002014:	896b      	ldrh	r3, [r5, #10]
 8002016:	3b01      	subs	r3, #1
 8002018:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 800201c:	d1ce      	bne.n	8001fbc <f_open+0x184>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800201e:	a806      	add	r0, sp, #24
 8002020:	f7ff fc8f 	bl	8001942 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002024:	2801      	cmp	r0, #1
 8002026:	f240 8081 	bls.w	800212c <f_open+0x2f4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800202a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800202e:	d07f      	beq.n	8002130 <f_open+0x2f8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002030:	68eb      	ldr	r3, [r5, #12]
 8002032:	4298      	cmp	r0, r3
 8002034:	d20c      	bcs.n	8002050 <f_open+0x218>
				dp->clust = clst;		/* Initialize data for new cluster */
 8002036:	900b      	str	r0, [sp, #44]	; 0x2c
	clst -= 2;		/* Cluster number is origin from 2 */
 8002038:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800203a:	68eb      	ldr	r3, [r5, #12]
 800203c:	3b02      	subs	r3, #2
 800203e:	4298      	cmp	r0, r3
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8002040:	bf3d      	ittte	cc
 8002042:	896b      	ldrhcc	r3, [r5, #10]
 8002044:	6a2a      	ldrcc	r2, [r5, #32]
 8002046:	fb00 2003 	mlacc	r0, r0, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800204a:	2000      	movcs	r0, #0
				dp->sect = clst2sect(fs, clst);
 800204c:	900c      	str	r0, [sp, #48]	; 0x30
 800204e:	e7b5      	b.n	8001fbc <f_open+0x184>
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
 8002050:	2304      	movs	r3, #4
 8002052:	e7dc      	b.n	800200e <f_open+0x1d6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002054:	f002 0204 	and.w	r2, r2, #4
 8002058:	2a00      	cmp	r2, #0
 800205a:	bf08      	it	eq
 800205c:	2305      	moveq	r3, #5
 800205e:	e796      	b.n	8001f8e <f_open+0x156>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8002060:	2306      	movs	r3, #6
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	e051      	b.n	800210a <f_open+0x2d2>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002066:	2306      	movs	r3, #6
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	e04e      	b.n	800210a <f_open+0x2d2>
	if (!fp) return FR_INVALID_OBJECT;
 800206c:	2309      	movs	r3, #9
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	e6f7      	b.n	8001e62 <f_open+0x2a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002072:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8002076:	f013 0f04 	tst.w	r3, #4
 800207a:	f47f af15 	bne.w	8001ea8 <f_open+0x70>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800207e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002082:	f013 0f10 	tst.w	r3, #16
 8002086:	d055      	beq.n	8002134 <f_open+0x2fc>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002088:	f10b 0128 	add.w	r1, fp, #40	; 0x28
 800208c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800208e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002092:	4419      	add	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	f7ff fe97 	bl	8001dc8 <ld_clust>
 800209a:	9008      	str	r0, [sp, #32]
		*d++ = (BYTE)val;
 800209c:	2320      	movs	r3, #32
 800209e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80020a2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 80020a6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80020aa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80020ae:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80020b2:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80020b6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80020ba:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80020be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80020c2:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 80020c6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 80020ca:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
	si = i = 0; ni = 8;
 80020ce:	2500      	movs	r5, #0
 80020d0:	462a      	mov	r2, r5
 80020d2:	2408      	movs	r4, #8
			i = 8; ni = 11;				/* Enter file extension field */
 80020d4:	f04f 0c0b 	mov.w	ip, #11
	while (*str && *str != chr) str++;
 80020d8:	272a      	movs	r7, #42	; 0x2a
		c = (BYTE)p[si++];				/* Get a byte */
 80020da:	1c50      	adds	r0, r2, #1
 80020dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	f67f af15 	bls.w	8001f10 <f_open+0xd8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80020e6:	2b2f      	cmp	r3, #47	; 0x2f
 80020e8:	f43f af09 	beq.w	8001efe <f_open+0xc6>
 80020ec:	2b5c      	cmp	r3, #92	; 0x5c
 80020ee:	f43f af06 	beq.w	8001efe <f_open+0xc6>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80020f2:	2b2e      	cmp	r3, #46	; 0x2e
 80020f4:	d002      	beq.n	80020fc <f_open+0x2c4>
 80020f6:	42ac      	cmp	r4, r5
 80020f8:	f63f af29 	bhi.w	8001f4e <f_open+0x116>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80020fc:	2c0b      	cmp	r4, #11
 80020fe:	d0af      	beq.n	8002060 <f_open+0x228>
 8002100:	2b2e      	cmp	r3, #46	; 0x2e
 8002102:	f43f af20 	beq.w	8001f46 <f_open+0x10e>
 8002106:	2306      	movs	r3, #6
 8002108:	9300      	str	r3, [sp, #0]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800210a:	9b00      	ldr	r3, [sp, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f43f aea8 	beq.w	8001e62 <f_open+0x2a>
 8002112:	e6a3      	b.n	8001e5c <f_open+0x24>
				res = FR_INVALID_NAME;
 8002114:	2306      	movs	r3, #6
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	e6a0      	b.n	8001e5c <f_open+0x24>
					res = FR_NO_FILE;
 800211a:	2304      	movs	r3, #4
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	e69d      	b.n	8001e5c <f_open+0x24>
			ns = dp->fn[NSFLAG];
 8002120:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002124:	2304      	movs	r3, #4
 8002126:	e76d      	b.n	8002004 <f_open+0x1cc>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002128:	2304      	movs	r3, #4
 800212a:	e770      	b.n	800200e <f_open+0x1d6>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800212c:	2302      	movs	r3, #2
 800212e:	e76e      	b.n	800200e <f_open+0x1d6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002130:	2301      	movs	r3, #1
 8002132:	e76c      	b.n	800200e <f_open+0x1d6>
				res = FR_NO_PATH; break;
 8002134:	2305      	movs	r3, #5
 8002136:	e72a      	b.n	8001f8e <f_open+0x156>
 8002138:	080023b5 	.word	0x080023b5
 800213c:	08002328 	.word	0x08002328
 8002140:	001fffff 	.word	0x001fffff

08002144 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8002144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002148:	b085      	sub	sp, #20
 800214a:	4605      	mov	r5, r0
 800214c:	468b      	mov	fp, r1
 800214e:	4614      	mov	r4, r2
 8002150:	469a      	mov	sl, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8002152:	2300      	movs	r3, #0
 8002154:	f8ca 3000 	str.w	r3, [sl]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002158:	9000      	str	r0, [sp, #0]
 800215a:	a903      	add	r1, sp, #12
 800215c:	f7ff fbb4 	bl	80018c8 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002160:	4680      	mov	r8, r0
 8002162:	2800      	cmp	r0, #0
 8002164:	f040 8088 	bne.w	8002278 <f_read+0x134>
 8002168:	f895 8011 	ldrb.w	r8, [r5, #17]
 800216c:	f1b8 0f00 	cmp.w	r8, #0
 8002170:	f040 8082 	bne.w	8002278 <f_read+0x134>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002174:	7c2b      	ldrb	r3, [r5, #16]
 8002176:	f013 0f01 	tst.w	r3, #1
 800217a:	f000 808e 	beq.w	800229a <f_read+0x156>
	remain = fp->obj.objsize - fp->fptr;
 800217e:	68ee      	ldr	r6, [r5, #12]
 8002180:	696b      	ldr	r3, [r5, #20]
 8002182:	1af6      	subs	r6, r6, r3
 8002184:	42a6      	cmp	r6, r4
 8002186:	bf28      	it	cs
 8002188:	4626      	movcs	r6, r4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
 800218a:	2e00      	cmp	r6, #0
 800218c:	d074      	beq.n	8002278 <f_read+0x134>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800218e:	f105 0320 	add.w	r3, r5, #32
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	e038      	b.n	8002208 <f_read+0xc4>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8002196:	69a9      	ldr	r1, [r5, #24]
 8002198:	9800      	ldr	r0, [sp, #0]
 800219a:	f7ff fbd2 	bl	8001942 <get_fat>
 800219e:	e043      	b.n	8002228 <f_read+0xe4>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80021a0:	f04f 0802 	mov.w	r8, #2
 80021a4:	f885 8011 	strb.w	r8, [r5, #17]
 80021a8:	e066      	b.n	8002278 <f_read+0x134>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80021aa:	f04f 0801 	mov.w	r8, #1
 80021ae:	f885 8011 	strb.w	r8, [r5, #17]
 80021b2:	e061      	b.n	8002278 <f_read+0x134>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80021b4:	f04f 0802 	mov.w	r8, #2
 80021b8:	f885 8011 	strb.w	r8, [r5, #17]
 80021bc:	e05c      	b.n	8002278 <f_read+0x134>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80021be:	0264      	lsls	r4, r4, #9
				continue;
 80021c0:	e017      	b.n	80021f2 <f_read+0xae>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80021c2:	69eb      	ldr	r3, [r5, #28]
 80021c4:	42bb      	cmp	r3, r7
 80021c6:	d15b      	bne.n	8002280 <f_read+0x13c>
			fp->sect = sect;
 80021c8:	61ef      	str	r7, [r5, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80021ca:	696b      	ldr	r3, [r5, #20]
 80021cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d0:	f5c3 7400 	rsb	r4, r3, #512	; 0x200
 80021d4:	42b4      	cmp	r4, r6
 80021d6:	bf28      	it	cs
 80021d8:	4634      	movcs	r4, r6
	if (cnt != 0) {
 80021da:	b154      	cbz	r4, 80021f2 <f_read+0xae>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80021dc:	9a01      	ldr	r2, [sp, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80021e4:	1918      	adds	r0, r3, r4
			*d++ = *s++;
 80021e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80021ea:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 80021ee:	4298      	cmp	r0, r3
 80021f0:	d1f9      	bne.n	80021e6 <f_read+0xa2>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80021f2:	f8da 3000 	ldr.w	r3, [sl]
 80021f6:	4423      	add	r3, r4
 80021f8:	f8ca 3000 	str.w	r3, [sl]
 80021fc:	44a3      	add	fp, r4
 80021fe:	696b      	ldr	r3, [r5, #20]
 8002200:	4423      	add	r3, r4
 8002202:	616b      	str	r3, [r5, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8002204:	1b36      	subs	r6, r6, r4
 8002206:	d037      	beq.n	8002278 <f_read+0x134>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8002208:	696b      	ldr	r3, [r5, #20]
 800220a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800220e:	2a00      	cmp	r2, #0
 8002210:	d1db      	bne.n	80021ca <f_read+0x86>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8002212:	9a03      	ldr	r2, [sp, #12]
 8002214:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8002218:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
			if (csect == 0) {					/* On the cluster boundary? */
 800221c:	ea19 2953 	ands.w	r9, r9, r3, lsr #9
 8002220:	d108      	bne.n	8002234 <f_read+0xf0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1b7      	bne.n	8002196 <f_read+0x52>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8002226:	68a8      	ldr	r0, [r5, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002228:	2801      	cmp	r0, #1
 800222a:	d9b9      	bls.n	80021a0 <f_read+0x5c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800222c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002230:	d0bb      	beq.n	80021aa <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 8002232:	61a8      	str	r0, [r5, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8002234:	9803      	ldr	r0, [sp, #12]
	clst -= 2;		/* Cluster number is origin from 2 */
 8002236:	69af      	ldr	r7, [r5, #24]
 8002238:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800223a:	68c3      	ldr	r3, [r0, #12]
 800223c:	3b02      	subs	r3, #2
 800223e:	429f      	cmp	r7, r3
 8002240:	d2b8      	bcs.n	80021b4 <f_read+0x70>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8002242:	8943      	ldrh	r3, [r0, #10]
 8002244:	6a02      	ldr	r2, [r0, #32]
 8002246:	fb03 2707 	mla	r7, r3, r7, r2
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800224a:	2f00      	cmp	r7, #0
 800224c:	d0b2      	beq.n	80021b4 <f_read+0x70>
			sect += csect;
 800224e:	444f      	add	r7, r9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8002250:	0a74      	lsrs	r4, r6, #9
 8002252:	d0b6      	beq.n	80021c2 <f_read+0x7e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002254:	eb09 0204 	add.w	r2, r9, r4
 8002258:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800225a:	bf88      	it	hi
 800225c:	eba3 0409 	subhi.w	r4, r3, r9
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002260:	4623      	mov	r3, r4
 8002262:	463a      	mov	r2, r7
 8002264:	4659      	mov	r1, fp
 8002266:	7840      	ldrb	r0, [r0, #1]
 8002268:	f7ff f8be 	bl	80013e8 <disk_read>
 800226c:	2800      	cmp	r0, #0
 800226e:	d0a6      	beq.n	80021be <f_read+0x7a>
 8002270:	f04f 0801 	mov.w	r8, #1
 8002274:	f885 8011 	strb.w	r8, [r5, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8002278:	4640      	mov	r0, r8
 800227a:	b005      	add	sp, #20
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8002280:	2301      	movs	r3, #1
 8002282:	463a      	mov	r2, r7
 8002284:	9901      	ldr	r1, [sp, #4]
 8002286:	7840      	ldrb	r0, [r0, #1]
 8002288:	f7ff f8ae 	bl	80013e8 <disk_read>
 800228c:	2800      	cmp	r0, #0
 800228e:	d09b      	beq.n	80021c8 <f_read+0x84>
 8002290:	f04f 0801 	mov.w	r8, #1
 8002294:	f885 8011 	strb.w	r8, [r5, #17]
 8002298:	e7ee      	b.n	8002278 <f_read+0x134>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800229a:	f04f 0807 	mov.w	r8, #7
 800229e:	e7eb      	b.n	8002278 <f_read+0x134>

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	2500      	movs	r5, #0
 80022a4:	4e0c      	ldr	r6, [pc, #48]	; (80022d8 <__libc_init_array+0x38>)
 80022a6:	4c0d      	ldr	r4, [pc, #52]	; (80022dc <__libc_init_array+0x3c>)
 80022a8:	1ba4      	subs	r4, r4, r6
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	42a5      	cmp	r5, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	f000 f822 	bl	80022f8 <_init>
 80022b4:	2500      	movs	r5, #0
 80022b6:	4e0a      	ldr	r6, [pc, #40]	; (80022e0 <__libc_init_array+0x40>)
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <__libc_init_array+0x44>)
 80022ba:	1ba4      	subs	r4, r4, r6
 80022bc:	10a4      	asrs	r4, r4, #2
 80022be:	42a5      	cmp	r5, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022c8:	4798      	blx	r3
 80022ca:	3501      	adds	r5, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022d2:	4798      	blx	r3
 80022d4:	3501      	adds	r5, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	080023c4 	.word	0x080023c4
 80022dc:	080023c4 	.word	0x080023c4
 80022e0:	080023c4 	.word	0x080023c4
 80022e4:	080023c8 	.word	0x080023c8

080022e8 <memset>:
 80022e8:	4603      	mov	r3, r0
 80022ea:	4402      	add	r2, r0
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d100      	bne.n	80022f2 <memset+0xa>
 80022f0:	4770      	bx	lr
 80022f2:	f803 1b01 	strb.w	r1, [r3], #1
 80022f6:	e7f9      	b.n	80022ec <memset+0x4>

080022f8 <_init>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr

08002304 <_fini>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	bf00      	nop
 8002308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230a:	bc08      	pop	{r3}
 800230c:	469e      	mov	lr, r3
 800230e:	4770      	bx	lr
